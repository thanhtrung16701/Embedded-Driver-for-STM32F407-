
Driver_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800217c  0800217c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800217c  0800217c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800217c  0800217c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800217c  0800217c  0001217c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002180  08002180  00012180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001e2e  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000783  00000000  00000000  00021ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000270  00000000  00000000  00022680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001c2  00000000  00000000  000228f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003547  00000000  00000000  00022ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002b89  00000000  00000000  00025ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000c204  00000000  00000000  00028b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000110c  00000000  00000000  00034d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00035e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002060 	.word	0x08002060

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08002060 	.word	0x08002060

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay>:
#define LED_PIN 			9

extern void initialise_monitor_handles(void);

void delay(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for (uint32_t i = 0;  i < 500000/2; i++); // ~ 200ms when system clock is 16 Mhz
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <delay+0x28>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9f8      	bls.n	80002ac <delay+0xc>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	0003d08f 	.word	0x0003d08f

080002cc <SPI2_GPIOInits>:

void SPI2_GPIOInits(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80002d2:	4b14      	ldr	r3, [pc, #80]	; (8000324 <SPI2_GPIOInits+0x58>)
 80002d4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinCfg.GPIO_PinMode = GPIO_MODE_ALFN;
 80002d6:	2302      	movs	r3, #2
 80002d8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinCfg.GPIO_PinAltFunMode = 5;
 80002da:	2305      	movs	r3, #5
 80002dc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinCfg.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002de:	2302      	movs	r3, #2
 80002e0:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinCfg.GPIO_PinOutputType = GPIO_OP_PP;
 80002e2:	2300      	movs	r3, #0
 80002e4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinCfg.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72fb      	strb	r3, [r7, #11]

	// PB15 -> MOSI
	SPIPins.GPIO_PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80002ea:	230f      	movs	r3, #15
 80002ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fc47 	bl	8000b84 <GPIO_Init>

	SPIPins.GPIO_PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80002f6:	230e      	movs	r3, #14
 80002f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fc41 	bl	8000b84 <GPIO_Init>

	// PB13 -> SCK
	SPIPins.GPIO_PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000302:	230d      	movs	r3, #13
 8000304:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fc3b 	bl	8000b84 <GPIO_Init>

	//PB12 -> NSS
	SPIPins.GPIO_PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 800030e:	230c      	movs	r3, #12
 8000310:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fc35 	bl	8000b84 <GPIO_Init>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020400 	.word	0x40020400

08000328 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.SPIx = SPI2;
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <SPI2_Inits+0x38>)
 8000330:	603b      	str	r3, [r7, #0]
	SPI2handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000332:	2301      	movs	r3, #1
 8000334:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPI_Config.SPI_BusConfig = SPI_BUS_CFG_FD;
 8000336:	2301      	movs	r3, #1
 8000338:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32; // sclk 2Mhz
 800033a:	2304      	movs	r3, #4
 800033c:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 800033e:	2300      	movs	r3, #0
 8000340:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000342:	2300      	movs	r3, #0
 8000344:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000346:	2300      	movs	r3, #0
 8000348:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_DI; // HW enable for NSS
 800034a:	2300      	movs	r3, #0
 800034c:	72bb      	strb	r3, [r7, #10]
	SPI_Init(&SPI2handle);
 800034e:	463b      	mov	r3, r7
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fde9 	bl	8000f28 <SPI_Init>

}
 8000356:	bf00      	nop
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40003800 	.word	0x40003800

08000364 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
	GPIO_Handle_t gBTN, GpioLed;
	gBTN.pGPIOx = GPIOA;
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <GPIO_ButtonInit+0x4c>)
 800036c:	60fb      	str	r3, [r7, #12]
		gBTN.GPIO_PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800036e:	2300      	movs	r3, #0
 8000370:	743b      	strb	r3, [r7, #16]
		gBTN.GPIO_PinCfg.GPIO_PinMode = GPIO_MODE_IN;
 8000372:	2300      	movs	r3, #0
 8000374:	747b      	strb	r3, [r7, #17]
		gBTN.GPIO_PinCfg.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000376:	2302      	movs	r3, #2
 8000378:	74bb      	strb	r3, [r7, #18]
		gBTN.GPIO_PinCfg.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800037a:	2300      	movs	r3, #0
 800037c:	74fb      	strb	r3, [r7, #19]

		GPIO_Init(&gBTN);
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fbfe 	bl	8000b84 <GPIO_Init>

		//this is led gpio configuration
			GpioLed.pGPIOx = GPIOD;
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <GPIO_ButtonInit+0x50>)
 800038a:	603b      	str	r3, [r7, #0]
			GpioLed.GPIO_PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 800038c:	230c      	movs	r3, #12
 800038e:	713b      	strb	r3, [r7, #4]
			GpioLed.GPIO_PinCfg.GPIO_PinMode = GPIO_MODE_OUT;
 8000390:	2301      	movs	r3, #1
 8000392:	717b      	strb	r3, [r7, #5]
			GpioLed.GPIO_PinCfg.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000394:	2302      	movs	r3, #2
 8000396:	71bb      	strb	r3, [r7, #6]
			GpioLed.GPIO_PinCfg.GPIO_PinOutputType = GPIO_OP_OD;
 8000398:	2301      	movs	r3, #1
 800039a:	723b      	strb	r3, [r7, #8]
			GpioLed.GPIO_PinCfg.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800039c:	2300      	movs	r3, #0
 800039e:	71fb      	strb	r3, [r7, #7]

			GPIO_Init(&GpioLed);
 80003a0:	463b      	mov	r3, r7
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fbee 	bl	8000b84 <GPIO_Init>
}
 80003a8:	bf00      	nop
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40020000 	.word	0x40020000
 80003b4:	40020c00 	.word	0x40020c00

080003b8 <SPI_ResponseVerify>:

uint8_t SPI_ResponseVerify(uint8_t ACK)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	if(ACK == (uint8_t)0xF5)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2bf5      	cmp	r3, #245	; 0xf5
 80003c6:	d101      	bne.n	80003cc <SPI_ResponseVerify+0x14>
	{
		return 1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	e000      	b.n	80003ce <SPI_ResponseVerify+0x16>
	}
	return 0;
 80003cc:	2300      	movs	r3, #0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <main>:

int main(int argc, char **argv) {
 80003d8:	b5b0      	push	{r4, r5, r7, lr}
 80003da:	b090      	sub	sp, #64	; 0x40
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]

//	initialise_monitor_handles();
	uint8_t dummy_write = 0xff;
 80003e2:	23ff      	movs	r3, #255	; 0xff
 80003e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t dummy_read;

	printf("Application is running\n");
 80003e8:	48ad      	ldr	r0, [pc, #692]	; (80006a0 <main+0x2c8>)
 80003ea:	f000 ffd7 	bl	800139c <puts>


	GPIO_ButtonInit();
 80003ee:	f7ff ffb9 	bl	8000364 <GPIO_ButtonInit>
	SPI2_GPIOInits();
 80003f2:	f7ff ff6b 	bl	80002cc <SPI2_GPIOInits>
	SPI2_Inits();
 80003f6:	f7ff ff97 	bl	8000328 <SPI2_Inits>

	printf("SPI init. Done \n");
 80003fa:	48aa      	ldr	r0, [pc, #680]	; (80006a4 <main+0x2cc>)
 80003fc:	f000 ffce 	bl	800139c <puts>
	SPI_SSOEConfig(SPI2, ENABLE);
 8000400:	2101      	movs	r1, #1
 8000402:	48a9      	ldr	r0, [pc, #676]	; (80006a8 <main+0x2d0>)
 8000404:	f000 fe87 	bl	8001116 <SPI_SSOEConfig>

	while(1)
	{
		while( !(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)) );
 8000408:	bf00      	nop
 800040a:	2100      	movs	r1, #0
 800040c:	48a7      	ldr	r0, [pc, #668]	; (80006ac <main+0x2d4>)
 800040e:	f000 fd05 	bl	8000e1c <GPIO_ReadFromInputPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f8      	beq.n	800040a <main+0x32>
		delay();
 8000418:	f7ff ff42 	bl	80002a0 <delay>

		SPI_PeriControl(SPI2, ENABLE);
 800041c:	2101      	movs	r1, #1
 800041e:	48a2      	ldr	r0, [pc, #648]	; (80006a8 <main+0x2d0>)
 8000420:	f000 fe5e 	bl	80010e0 <SPI_PeriControl>

		// 1. CMD_LED_CTRL <pin_num (1byte)> <value (1byte)>

		uint8_t cmd_code = CMD_LED_CTRL;
 8000424:	2350      	movs	r3, #80	; 0x50
 8000426:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t ackbyte;
		uint8_t args[2];

		// send cmd (data and dummy byte)
		SPI_SendData(SPI2, &cmd_code, 1);
 800042a:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	489d      	ldr	r0, [pc, #628]	; (80006a8 <main+0x2d0>)
 8000434:	f000 fde6 	bl	8001004 <SPI_SendData>

		// Read dummy byte to clear off RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000438:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	4899      	ldr	r0, [pc, #612]	; (80006a8 <main+0x2d0>)
 8000442:	f000 fe16 	bl	8001072 <SPI_ReceiveData>

		// send dummy byte (báo có phan hoi tu slave)
		SPI_SendData(SPI2, &dummy_write, 1);
 8000446:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	4896      	ldr	r0, [pc, #600]	; (80006a8 <main+0x2d0>)
 8000450:	f000 fdd8 	bl	8001004 <SPI_SendData>

		// Read ACK byte received -> fetch ACK from slave
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000454:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	4892      	ldr	r0, [pc, #584]	; (80006a8 <main+0x2d0>)
 800045e:	f000 fe08 	bl	8001072 <SPI_ReceiveData>

		if(SPI_ResponseVerify(ackbyte) )	// response return true
 8000462:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffa6 	bl	80003b8 <SPI_ResponseVerify>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d00f      	beq.n	8000492 <main+0xba>
		{
			// send arguments
			args[0] = LED_PIN;
 8000472:	2309      	movs	r3, #9
 8000474:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			args[1] = LED_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			SPI_SendData(SPI2, args, 2);
 800047e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000482:	2202      	movs	r2, #2
 8000484:	4619      	mov	r1, r3
 8000486:	4888      	ldr	r0, [pc, #544]	; (80006a8 <main+0x2d0>)
 8000488:	f000 fdbc 	bl	8001004 <SPI_SendData>
			printf("CMD_LED_CTRL executed \n");
 800048c:	4888      	ldr	r0, [pc, #544]	; (80006b0 <main+0x2d8>)
 800048e:	f000 ff85 	bl	800139c <puts>
		// end of CMD_LED_CTRL


		// 2. CMD_SENSOR_READ <analog pin(1)>

		while( !(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)) );
 8000492:	bf00      	nop
 8000494:	2100      	movs	r1, #0
 8000496:	4885      	ldr	r0, [pc, #532]	; (80006ac <main+0x2d4>)
 8000498:	f000 fcc0 	bl	8000e1c <GPIO_ReadFromInputPin>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f8      	beq.n	8000494 <main+0xbc>
		// to avoid button debouncing
		delay();
 80004a2:	f7ff fefd 	bl	80002a0 <delay>

		cmd_code = CMD_SENSOR_READ;
 80004a6:	2351      	movs	r3, #81	; 0x51
 80004a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35


		// send cmd (data and dummy byte)
		SPI_SendData(SPI2, &cmd_code, 1);
 80004ac:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80004b0:	2201      	movs	r2, #1
 80004b2:	4619      	mov	r1, r3
 80004b4:	487c      	ldr	r0, [pc, #496]	; (80006a8 <main+0x2d0>)
 80004b6:	f000 fda5 	bl	8001004 <SPI_SendData>

		// Read dummy byte to clear off RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004ba:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	4879      	ldr	r0, [pc, #484]	; (80006a8 <main+0x2d0>)
 80004c4:	f000 fdd5 	bl	8001072 <SPI_ReceiveData>

		// send dummy byte (báo có phan hoi tu slave)
		SPI_SendData(SPI2, &dummy_write, 1);
 80004c8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	4875      	ldr	r0, [pc, #468]	; (80006a8 <main+0x2d0>)
 80004d2:	f000 fd97 	bl	8001004 <SPI_SendData>

		// Read ACK byte received -> fetch ACK from slave
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80004d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	4872      	ldr	r0, [pc, #456]	; (80006a8 <main+0x2d0>)
 80004e0:	f000 fdc7 	bl	8001072 <SPI_ReceiveData>

		if(SPI_ResponseVerify(ackbyte) )	// response return true
 80004e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ff65 	bl	80003b8 <SPI_ResponseVerify>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d025      	beq.n	8000540 <main+0x168>
		{
			// send arguments to slave
			args[0] = ANALOG_PIN0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			SPI_SendData(SPI2, args, 1); // send 1 byte
 80004fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	4869      	ldr	r0, [pc, #420]	; (80006a8 <main+0x2d0>)
 8000504:	f000 fd7e 	bl	8001004 <SPI_SendData>

			// do dummy read to clear RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000508:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	4865      	ldr	r0, [pc, #404]	; (80006a8 <main+0x2d0>)
 8000512:	f000 fdae 	bl	8001072 <SPI_ReceiveData>
			// insert delay so that slave can read the analog value
			// < slave does ADC conversion on that pin >
			delay();
 8000516:	f7ff fec3 	bl	80002a0 <delay>

			// send dummy byte to fetch the response from slave
			SPI_SendData(SPI2, &dummy_write, 1);
 800051a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800051e:	2201      	movs	r2, #1
 8000520:	4619      	mov	r1, r3
 8000522:	4861      	ldr	r0, [pc, #388]	; (80006a8 <main+0x2d0>)
 8000524:	f000 fd6e 	bl	8001004 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 8000528:	f107 030f 	add.w	r3, r7, #15
 800052c:	2201      	movs	r2, #1
 800052e:	4619      	mov	r1, r3
 8000530:	485d      	ldr	r0, [pc, #372]	; (80006a8 <main+0x2d0>)
 8000532:	f000 fd9e 	bl	8001072 <SPI_ReceiveData>
			printf("CMD_SENSOR_READ executed %d \n",analog_read);
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	4619      	mov	r1, r3
 800053a:	485e      	ldr	r0, [pc, #376]	; (80006b4 <main+0x2dc>)
 800053c:	f000 fec8 	bl	80012d0 <iprintf>
		// end of CMD_SENSOR_READ



		// 3. CMD_LED_READ <pin(1)>
		while( !(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)) );
 8000540:	bf00      	nop
 8000542:	2100      	movs	r1, #0
 8000544:	4859      	ldr	r0, [pc, #356]	; (80006ac <main+0x2d4>)
 8000546:	f000 fc69 	bl	8000e1c <GPIO_ReadFromInputPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0f8      	beq.n	8000542 <main+0x16a>
		// to avoid button debouncing
		delay();
 8000550:	f7ff fea6 	bl	80002a0 <delay>

		cmd_code = CMD_LED_READ;
 8000554:	2352      	movs	r3, #82	; 0x52
 8000556:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

		//send cmd
		SPI_SendData(SPI2, &cmd_code, 1);
 800055a:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800055e:	2201      	movs	r2, #1
 8000560:	4619      	mov	r1, r3
 8000562:	4851      	ldr	r0, [pc, #324]	; (80006a8 <main+0x2d0>)
 8000564:	f000 fd4e 	bl	8001004 <SPI_SendData>

		// read dummy byte to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000568:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800056c:	2201      	movs	r2, #1
 800056e:	4619      	mov	r1, r3
 8000570:	484d      	ldr	r0, [pc, #308]	; (80006a8 <main+0x2d0>)
 8000572:	f000 fd7e 	bl	8001072 <SPI_ReceiveData>

		// send dummy byte (response from slave)
		SPI_SendData(SPI2, &dummy_write, 1);
 8000576:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800057a:	2201      	movs	r2, #1
 800057c:	4619      	mov	r1, r3
 800057e:	484a      	ldr	r0, [pc, #296]	; (80006a8 <main+0x2d0>)
 8000580:	f000 fd40 	bl	8001004 <SPI_SendData>

		// read ACK received
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000584:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000588:	2201      	movs	r2, #1
 800058a:	4619      	mov	r1, r3
 800058c:	4846      	ldr	r0, [pc, #280]	; (80006a8 <main+0x2d0>)
 800058e:	f000 fd70 	bl	8001072 <SPI_ReceiveData>

		if (SPI_ResponseVerify(ackbyte) ) {
 8000592:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff0e 	bl	80003b8 <SPI_ResponseVerify>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d025      	beq.n	80005ee <main+0x216>
			args[0] = LED_PIN;
 80005a2:	2309      	movs	r3, #9
 80005a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

		// send argument
			SPI_SendData(SPI2, args, 1);
 80005a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ac:	2201      	movs	r2, #1
 80005ae:	4619      	mov	r1, r3
 80005b0:	483d      	ldr	r0, [pc, #244]	; (80006a8 <main+0x2d0>)
 80005b2:	f000 fd27 	bl	8001004 <SPI_SendData>

		// read dummy byte to clear RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80005b6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80005ba:	2201      	movs	r2, #1
 80005bc:	4619      	mov	r1, r3
 80005be:	483a      	ldr	r0, [pc, #232]	; (80006a8 <main+0x2d0>)
 80005c0:	f000 fd57 	bl	8001072 <SPI_ReceiveData>

			delay();	// slave can ready with data, ~ 200ms
 80005c4:	f7ff fe6c 	bl	80002a0 <delay>

		// send dummy byte  to fetch response
			SPI_SendData(SPI2, &dummy_write, 1);
 80005c8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	4835      	ldr	r0, [pc, #212]	; (80006a8 <main+0x2d0>)
 80005d2:	f000 fd17 	bl	8001004 <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2, &led_status, 1);
 80005d6:	f107 030e 	add.w	r3, r7, #14
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	4832      	ldr	r0, [pc, #200]	; (80006a8 <main+0x2d0>)
 80005e0:	f000 fd47 	bl	8001072 <SPI_ReceiveData>
			printf("CMD_LED_READ executed : %d\n",led_status);
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4833      	ldr	r0, [pc, #204]	; (80006b8 <main+0x2e0>)
 80005ea:	f000 fe71 	bl	80012d0 <iprintf>
		}
		// end of CMD_LED_READ

		// 4. CMD_PRINT <len>  <message>
		//wait till button is pressed
		while(! (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) ) );
 80005ee:	bf00      	nop
 80005f0:	2100      	movs	r1, #0
 80005f2:	482e      	ldr	r0, [pc, #184]	; (80006ac <main+0x2d4>)
 80005f4:	f000 fc12 	bl	8000e1c <GPIO_ReadFromInputPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f8      	beq.n	80005f0 <main+0x218>

		delay();	// to avoid button debouncing
 80005fe:	f7ff fe4f 	bl	80002a0 <delay>

		cmd_code = CMD_PRINT;
 8000602:	2353      	movs	r3, #83	; 0x53
 8000604:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

		// send cmd
		SPI_SendData(SPI2, &cmd_code, 1);
 8000608:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800060c:	2201      	movs	r2, #1
 800060e:	4619      	mov	r1, r3
 8000610:	4825      	ldr	r0, [pc, #148]	; (80006a8 <main+0x2d0>)
 8000612:	f000 fcf7 	bl	8001004 <SPI_SendData>

		//send dummy byte to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000616:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	4822      	ldr	r0, [pc, #136]	; (80006a8 <main+0x2d0>)
 8000620:	f000 fd27 	bl	8001072 <SPI_ReceiveData>

		// send dummy byte to fetch response
		SPI_SendData(SPI2, &dummy_write, 1);
 8000624:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	481e      	ldr	r0, [pc, #120]	; (80006a8 <main+0x2d0>)
 800062e:	f000 fce9 	bl	8001004 <SPI_SendData>

		// read the ACK received
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000632:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	481b      	ldr	r0, [pc, #108]	; (80006a8 <main+0x2d0>)
 800063c:	f000 fd19 	bl	8001072 <SPI_ReceiveData>

		uint8_t mes[] = "Hello! How are you";
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <main+0x2e4>)
 8000642:	f107 041c 	add.w	r4, r7, #28
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	8022      	strh	r2, [r4, #0]
 8000652:	3402      	adds	r4, #2
 8000654:	0c1b      	lsrs	r3, r3, #16
 8000656:	7023      	strb	r3, [r4, #0]

		if (SPI_ResponseVerify(ackbyte)) {
 8000658:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff feab 	bl	80003b8 <SPI_ResponseVerify>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d047      	beq.n	80006f8 <main+0x320>
			args[0]= strlen((char*)mes);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fdbf 	bl	80001f0 <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

			//send arguments
			SPI_SendData(SPI2, args, 1); // send length
 800067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <main+0x2d0>)
 8000684:	f000 fcbe 	bl	8001004 <SPI_SendData>

			// read dummy byte to clear RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000688:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <main+0x2d0>)
 8000692:	f000 fcee 	bl	8001072 <SPI_ReceiveData>

			delay(); // slave can ready with data
 8000696:	f7ff fe03 	bl	80002a0 <delay>

			// send message
			for (int i = 0; i < args[0]; i++) {
 800069a:	2300      	movs	r3, #0
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800069e:	e022      	b.n	80006e6 <main+0x30e>
 80006a0:	08002078 	.word	0x08002078
 80006a4:	08002090 	.word	0x08002090
 80006a8:	40003800 	.word	0x40003800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	080020a0 	.word	0x080020a0
 80006b4:	080020b8 	.word	0x080020b8
 80006b8:	080020d8 	.word	0x080020d8
 80006bc:	08002134 	.word	0x08002134
				SPI_SendData(SPI2, &mes[i], 1);
 80006c0:	f107 021c 	add.w	r2, r7, #28
 80006c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006c6:	4413      	add	r3, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	4619      	mov	r1, r3
 80006cc:	483c      	ldr	r0, [pc, #240]	; (80007c0 <main+0x3e8>)
 80006ce:	f000 fc99 	bl	8001004 <SPI_SendData>
				// read dummy byte
				SPI_ReceiveData(SPI2, &dummy_read, 1);
 80006d2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	4839      	ldr	r0, [pc, #228]	; (80007c0 <main+0x3e8>)
 80006dc:	f000 fcc9 	bl	8001072 <SPI_ReceiveData>
			for (int i = 0; i < args[0]; i++) {
 80006e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e2:	3301      	adds	r3, #1
 80006e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006ea:	461a      	mov	r2, r3
 80006ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ee:	4293      	cmp	r3, r2
 80006f0:	dbe6      	blt.n	80006c0 <main+0x2e8>
			}
			printf("CMD_PRINT executed \n");
 80006f2:	4834      	ldr	r0, [pc, #208]	; (80007c4 <main+0x3ec>)
 80006f4:	f000 fe52 	bl	800139c <puts>



		// 5. CMD_ID_READ
		// wait till button is pressed
		while(! (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)) );
 80006f8:	bf00      	nop
 80006fa:	2100      	movs	r1, #0
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <main+0x3f0>)
 80006fe:	f000 fb8d 	bl	8000e1c <GPIO_ReadFromInputPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f8      	beq.n	80006fa <main+0x322>

		delay(); // to avoid button debouncing
 8000708:	f7ff fdca 	bl	80002a0 <delay>

		cmd_code = CMD_ID_READ;
 800070c:	2354      	movs	r3, #84	; 0x54
 800070e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

		// cmd send
		SPI_SendData(SPI2, &cmd_code, 1);
 8000712:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8000716:	2201      	movs	r2, #1
 8000718:	4619      	mov	r1, r3
 800071a:	4829      	ldr	r0, [pc, #164]	; (80007c0 <main+0x3e8>)
 800071c:	f000 fc72 	bl	8001004 <SPI_SendData>

		// read dummy byte to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000720:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000724:	2201      	movs	r2, #1
 8000726:	4619      	mov	r1, r3
 8000728:	4825      	ldr	r0, [pc, #148]	; (80007c0 <main+0x3e8>)
 800072a:	f000 fca2 	bl	8001072 <SPI_ReceiveData>

		// send dummy byte to fetch response
		SPI_SendData(SPI2, &dummy_write, 1);
 800072e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000732:	2201      	movs	r2, #1
 8000734:	4619      	mov	r1, r3
 8000736:	4822      	ldr	r0, [pc, #136]	; (80007c0 <main+0x3e8>)
 8000738:	f000 fc64 	bl	8001004 <SPI_SendData>

		// read ACK received
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 800073c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	481e      	ldr	r0, [pc, #120]	; (80007c0 <main+0x3e8>)
 8000746:	f000 fc94 	bl	8001072 <SPI_ReceiveData>

		uint8_t ID[10];
		uint32_t i = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
		if (SPI_ResponseVerify(ackbyte) )
 800074e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe30 	bl	80003b8 <SPI_ResponseVerify>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d020      	beq.n	80007a0 <main+0x3c8>
		{
			// read 10 byte from slave
			for (i = 0; i < 10; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
 8000762:	e012      	b.n	800078a <main+0x3b2>
			{
				//send data to fetch response
				SPI_SendData(SPI2, &dummy_write, 1);
 8000764:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <main+0x3e8>)
 800076e:	f000 fc49 	bl	8001004 <SPI_SendData>
				SPI_ReceiveData(SPI2, &ID[i], 1);
 8000772:	f107 0210 	add.w	r2, r7, #16
 8000776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000778:	4413      	add	r3, r2
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	4810      	ldr	r0, [pc, #64]	; (80007c0 <main+0x3e8>)
 8000780:	f000 fc77 	bl	8001072 <SPI_ReceiveData>
			for (i = 0; i < 10; i++)
 8000784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000786:	3301      	adds	r3, #1
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
 800078a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800078c:	2b09      	cmp	r3, #9
 800078e:	d9e9      	bls.n	8000764 <main+0x38c>
			}
			ID[10]= '\0'; // gan null vào ptu thu 10
 8000790:	2300      	movs	r3, #0
 8000792:	76bb      	strb	r3, [r7, #26]
			printf("CMD_ID : %s \n",ID);
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <main+0x3f4>)
 800079c:	f000 fd98 	bl	80012d0 <iprintf>
		}
		// end of CMD_ID

		// confirm SPI not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) );
 80007a0:	bf00      	nop
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4806      	ldr	r0, [pc, #24]	; (80007c0 <main+0x3e8>)
 80007a6:	f000 fc1a 	bl	8000fde <SPI_GetFlagStatus>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f8      	bne.n	80007a2 <main+0x3ca>

		SPI_PeriControl(SPI2, DISABLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	4803      	ldr	r0, [pc, #12]	; (80007c0 <main+0x3e8>)
 80007b4:	f000 fc94 	bl	80010e0 <SPI_PeriControl>

		printf("SPI communication closed \n");
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <main+0x3f8>)
 80007ba:	f000 fdef 	bl	800139c <puts>
	{
 80007be:	e623      	b.n	8000408 <main+0x30>
 80007c0:	40003800 	.word	0x40003800
 80007c4:	080020f4 	.word	0x080020f4
 80007c8:	40020000 	.word	0x40020000
 80007cc:	08002108 	.word	0x08002108
 80007d0:	08002118 	.word	0x08002118

080007d4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <ITM_SendChar+0x44>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <ITM_SendChar+0x44>)
 80007e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007e8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ITM_SendChar+0x48>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <ITM_SendChar+0x48>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007f6:	bf00      	nop
 80007f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f8      	beq.n	80007f8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000806:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000edfc 	.word	0xe000edfc
 800081c:	e0000e00 	.word	0xe0000e00

08000820 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e00a      	b.n	8000848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000832:	f3af 8000 	nop.w
 8000836:	4601      	mov	r1, r0
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	b2ca      	uxtb	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf0      	blt.n	8000832 <_read+0x12>
  }

  return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e009      	b.n	8000880 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	60ba      	str	r2, [r7, #8]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ffad 	bl	80007d4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbf1      	blt.n	800086c <_write+0x12>
  }
  return len;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_close>:

int _close(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b8:	605a      	str	r2, [r3, #4]
  return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008da:	b480      	push	{r7}
 80008dc:	b085      	sub	sp, #20
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f000 fe68 	bl	80015f8 <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20020000 	.word	0x20020000
 8000954:	00000400 	.word	0x00000400
 8000958:	20000078 	.word	0x20000078
 800095c:	200001c8 	.word	0x200001c8

08000960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


  ldr   r0, =_estack
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000964:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800098e:	f000 fe39 	bl	8001604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000992:	f7ff fd21 	bl	80003d8 <main>

08000996 <LoopForever>:

LoopForever:
  b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   r0, =_estack
 8000998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009a4:	08002184 	.word	0x08002184
  ldr r2, =_sbss
 80009a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009ac:	200001c8 	.word	0x200001c8

080009b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <GPIO_PeriClockCtrl>:
 *
 * @note			- none
 *
 */
void GPIO_PeriClockCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d162      	bne.n	8000a8c <GPIO_PeriClockCtrl+0xd8>
	{
		if(pGPIOx == GPIOA)				GPIOA_PCLK_EN();
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a64      	ldr	r2, [pc, #400]	; (8000b5c <GPIO_PeriClockCtrl+0x1a8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d106      	bne.n	80009dc <GPIO_PeriClockCtrl+0x28>
 80009ce:	4b64      	ldr	r3, [pc, #400]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a63      	ldr	r2, [pc, #396]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOF)	 	GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) 		GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH)	 	GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI) 		GPIOI_PCLK_DI();
		}
	}
 80009da:	e0b9      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOB)	 	GPIOB_PCLK_EN();
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a61      	ldr	r2, [pc, #388]	; (8000b64 <GPIO_PeriClockCtrl+0x1b0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d106      	bne.n	80009f2 <GPIO_PeriClockCtrl+0x3e>
 80009e4:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	4a5d      	ldr	r2, [pc, #372]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	6313      	str	r3, [r2, #48]	; 0x30
	}
 80009f0:	e0ae      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOC) 		GPIOC_PCLK_EN();
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a5c      	ldr	r2, [pc, #368]	; (8000b68 <GPIO_PeriClockCtrl+0x1b4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d106      	bne.n	8000a08 <GPIO_PeriClockCtrl+0x54>
 80009fa:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a58      	ldr	r2, [pc, #352]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000a06:	e0a3      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOD)	 	GPIOD_PCLK_EN();
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a58      	ldr	r2, [pc, #352]	; (8000b6c <GPIO_PeriClockCtrl+0x1b8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d106      	bne.n	8000a1e <GPIO_PeriClockCtrl+0x6a>
 8000a10:	4b53      	ldr	r3, [pc, #332]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a52      	ldr	r2, [pc, #328]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000a1c:	e098      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOE) 		GPIOE_PCLK_EN();
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a53      	ldr	r2, [pc, #332]	; (8000b70 <GPIO_PeriClockCtrl+0x1bc>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d106      	bne.n	8000a34 <GPIO_PeriClockCtrl+0x80>
 8000a26:	4b4e      	ldr	r3, [pc, #312]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a4d      	ldr	r2, [pc, #308]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a2c:	f043 0310 	orr.w	r3, r3, #16
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000a32:	e08d      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOF)	 	GPIOF_PCLK_EN();
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a4f      	ldr	r2, [pc, #316]	; (8000b74 <GPIO_PeriClockCtrl+0x1c0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d106      	bne.n	8000a4a <GPIO_PeriClockCtrl+0x96>
 8000a3c:	4b48      	ldr	r3, [pc, #288]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a42:	f043 0320 	orr.w	r3, r3, #32
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000a48:	e082      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOG) 		GPIOG_PCLK_EN();
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <GPIO_PeriClockCtrl+0x1c4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d106      	bne.n	8000a60 <GPIO_PeriClockCtrl+0xac>
 8000a52:	4b43      	ldr	r3, [pc, #268]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a42      	ldr	r2, [pc, #264]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000a5e:	e077      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOH)	 	GPIOH_PCLK_EN();
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a46      	ldr	r2, [pc, #280]	; (8000b7c <GPIO_PeriClockCtrl+0x1c8>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d106      	bne.n	8000a76 <GPIO_PeriClockCtrl+0xc2>
 8000a68:	4b3d      	ldr	r3, [pc, #244]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	4a3c      	ldr	r2, [pc, #240]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a72:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000a74:	e06c      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOI) 		GPIOI_PCLK_EN();
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a41      	ldr	r2, [pc, #260]	; (8000b80 <GPIO_PeriClockCtrl+0x1cc>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d168      	bne.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
 8000a7e:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a37      	ldr	r2, [pc, #220]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000a8a:	e061      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		if(pGPIOx == GPIOA)				GPIOA_PCLK_DI();
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a33      	ldr	r2, [pc, #204]	; (8000b5c <GPIO_PeriClockCtrl+0x1a8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d106      	bne.n	8000aa2 <GPIO_PeriClockCtrl+0xee>
 8000a94:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a31      	ldr	r2, [pc, #196]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000a9a:	f023 0301 	bic.w	r3, r3, #1
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000aa0:	e056      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOB)	 	GPIOB_PCLK_DI();
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a2f      	ldr	r2, [pc, #188]	; (8000b64 <GPIO_PeriClockCtrl+0x1b0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d106      	bne.n	8000ab8 <GPIO_PeriClockCtrl+0x104>
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a2c      	ldr	r2, [pc, #176]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000ab0:	f023 0302 	bic.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000ab6:	e04b      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOC) 		GPIOC_PCLK_DI();
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a2b      	ldr	r2, [pc, #172]	; (8000b68 <GPIO_PeriClockCtrl+0x1b4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d106      	bne.n	8000ace <GPIO_PeriClockCtrl+0x11a>
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000ac6:	f023 0304 	bic.w	r3, r3, #4
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000acc:	e040      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOD)	 	GPIOD_PCLK_DI();
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <GPIO_PeriClockCtrl+0x1b8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d106      	bne.n	8000ae4 <GPIO_PeriClockCtrl+0x130>
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000adc:	f023 0308 	bic.w	r3, r3, #8
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000ae2:	e035      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOE) 		GPIOE_PCLK_DI();
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <GPIO_PeriClockCtrl+0x1bc>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d106      	bne.n	8000afa <GPIO_PeriClockCtrl+0x146>
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000af2:	f023 0310 	bic.w	r3, r3, #16
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000af8:	e02a      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOF)	 	GPIOF_PCLK_DI();
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <GPIO_PeriClockCtrl+0x1c0>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d106      	bne.n	8000b10 <GPIO_PeriClockCtrl+0x15c>
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000b08:	f023 0320 	bic.w	r3, r3, #32
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000b0e:	e01f      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOG) 		GPIOG_PCLK_DI();
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <GPIO_PeriClockCtrl+0x1c4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d106      	bne.n	8000b26 <GPIO_PeriClockCtrl+0x172>
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000b24:	e014      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOH)	 	GPIOH_PCLK_DI();
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <GPIO_PeriClockCtrl+0x1c8>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d106      	bne.n	8000b3c <GPIO_PeriClockCtrl+0x188>
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000b3a:	e009      	b.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOI) 		GPIOI_PCLK_DI();
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <GPIO_PeriClockCtrl+0x1cc>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d105      	bne.n	8000b50 <GPIO_PeriClockCtrl+0x19c>
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <GPIO_PeriClockCtrl+0x1ac>)
 8000b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b4e:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40021400 	.word	0x40021400
 8000b78:	40021800 	.word	0x40021800
 8000b7c:	40021c00 	.word	0x40021c00
 8000b80:	40022000 	.word	0x40022000

08000b84 <GPIO_Init>:

/*
 * Init and de-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	// Enable the peripheral clock
	GPIO_PeriClockCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff0e 	bl	80009b4 <GPIO_PeriClockCtrl>
	uint32_t temp = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
	/*
	 * cfg the mode of gpio pin
	 */
	if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	795b      	ldrb	r3, [r3, #5]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d821      	bhi.n	8000be8 <GPIO_Init+0x64>
		temp = (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	795b      	ldrb	r3, [r3, #5]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	791b      	ldrb	r3, [r3, #4]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	617b      	str	r3, [r7, #20]
		//clear bit pin_num
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber); // clr 2 bit
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	791b      	ldrb	r3, [r3, #4]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4619      	mov	r1, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	400a      	ands	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=  temp; // -> MODER : physical register
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6819      	ldr	r1, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	e07a      	b.n	8000cde <GPIO_Init+0x15a>
	}
	else {
	// interrupt
		if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	795b      	ldrb	r3, [r3, #5]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d117      	bne.n	8000c20 <GPIO_Init+0x9c>
			// 1. config the FT selection register
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 8000bf0:	4b86      	ldr	r3, [pc, #536]	; (8000e0c <GPIO_Init+0x288>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	7912      	ldrb	r2, [r2, #4]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	408a      	lsls	r2, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4a82      	ldr	r2, [pc, #520]	; (8000e0c <GPIO_Init+0x288>)
 8000c02:	430b      	orrs	r3, r1
 8000c04:	60d3      	str	r3, [r2, #12]
			//clear the corresponding FTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 8000c06:	4b81      	ldr	r3, [pc, #516]	; (8000e0c <GPIO_Init+0x288>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	7912      	ldrb	r2, [r2, #4]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	2201      	movs	r2, #1
 8000c12:	408a      	lsls	r2, r1
 8000c14:	43d2      	mvns	r2, r2
 8000c16:	4611      	mov	r1, r2
 8000c18:	4a7c      	ldr	r2, [pc, #496]	; (8000e0c <GPIO_Init+0x288>)
 8000c1a:	400b      	ands	r3, r1
 8000c1c:	6093      	str	r3, [r2, #8]
 8000c1e:	e035      	b.n	8000c8c <GPIO_Init+0x108>

		}else if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	795b      	ldrb	r3, [r3, #5]
 8000c24:	2b05      	cmp	r3, #5
 8000c26:	d117      	bne.n	8000c58 <GPIO_Init+0xd4>

			// 2. config the RTSR
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 8000c28:	4b78      	ldr	r3, [pc, #480]	; (8000e0c <GPIO_Init+0x288>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	7912      	ldrb	r2, [r2, #4]
 8000c30:	4611      	mov	r1, r2
 8000c32:	2201      	movs	r2, #1
 8000c34:	408a      	lsls	r2, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	4a74      	ldr	r2, [pc, #464]	; (8000e0c <GPIO_Init+0x288>)
 8000c3a:	430b      	orrs	r3, r1
 8000c3c:	6093      	str	r3, [r2, #8]
			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 8000c3e:	4b73      	ldr	r3, [pc, #460]	; (8000e0c <GPIO_Init+0x288>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	7912      	ldrb	r2, [r2, #4]
 8000c46:	4611      	mov	r1, r2
 8000c48:	2201      	movs	r2, #1
 8000c4a:	408a      	lsls	r2, r1
 8000c4c:	43d2      	mvns	r2, r2
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a6e      	ldr	r2, [pc, #440]	; (8000e0c <GPIO_Init+0x288>)
 8000c52:	400b      	ands	r3, r1
 8000c54:	60d3      	str	r3, [r2, #12]
 8000c56:	e019      	b.n	8000c8c <GPIO_Init+0x108>

		}else if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode == GPIO_MODE_IT_FRT) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	795b      	ldrb	r3, [r3, #5]
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d115      	bne.n	8000c8c <GPIO_Init+0x108>

			// config both FTSR and RTSR
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 8000c60:	4b6a      	ldr	r3, [pc, #424]	; (8000e0c <GPIO_Init+0x288>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	7912      	ldrb	r2, [r2, #4]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	408a      	lsls	r2, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4a66      	ldr	r2, [pc, #408]	; (8000e0c <GPIO_Init+0x288>)
 8000c72:	430b      	orrs	r3, r1
 8000c74:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 8000c76:	4b65      	ldr	r3, [pc, #404]	; (8000e0c <GPIO_Init+0x288>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	7912      	ldrb	r2, [r2, #4]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	2201      	movs	r2, #1
 8000c82:	408a      	lsls	r2, r1
 8000c84:	4611      	mov	r1, r2
 8000c86:	4a61      	ldr	r2, [pc, #388]	; (8000e0c <GPIO_Init+0x288>)
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6093      	str	r3, [r2, #8]
		}
		// 2. config the GPIO port selection in SYSCFG_EXTI control register

		uint8_t temp1 = pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber / 4;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber % 4;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	791b      	ldrb	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a5b      	ldr	r2, [pc, #364]	; (8000e10 <GPIO_Init+0x28c>)
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	747b      	strb	r3, [r7, #17]

		//  before config SYSCFG, enable SYSCFG clock
		SYSCFG_PCLK_EN();
 8000ca8:	4b5a      	ldr	r3, [pc, #360]	; (8000e14 <GPIO_Init+0x290>)
 8000caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cac:	4a59      	ldr	r2, [pc, #356]	; (8000e14 <GPIO_Init+0x290>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (4 * temp2);
 8000cb4:	7c7a      	ldrb	r2, [r7, #17]
 8000cb6:	7cbb      	ldrb	r3, [r7, #18]
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	fa02 f103 	lsl.w	r1, r2, r3
 8000cbe:	4a56      	ldr	r2, [pc, #344]	; (8000e18 <GPIO_Init+0x294>)
 8000cc0:	7cfb      	ldrb	r3, [r7, #19]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI delivery using interrupt mask reg (IMR)
			EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 8000cc8:	4b50      	ldr	r3, [pc, #320]	; (8000e0c <GPIO_Init+0x288>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	7912      	ldrb	r2, [r2, #4]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	408a      	lsls	r2, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4a4c      	ldr	r2, [pc, #304]	; (8000e0c <GPIO_Init+0x288>)
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	6013      	str	r3, [r2, #0]


	/*
	 * cfg the speed
	 */
	temp = (pGPIOHandle->GPIO_PinCfg.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	799b      	ldrb	r3, [r3, #6]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	791b      	ldrb	r3, [r3, #4]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
	//clear bit pin_num
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	791b      	ldrb	r3, [r3, #4]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	408b      	lsls	r3, r1
 8000d00:	43db      	mvns	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	400a      	ands	r2, r1
 8000d0a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6899      	ldr	r1, [r3, #8]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	609a      	str	r2, [r3, #8]


	/*
	 * cfg the pupd settings
	 */
	temp = (pGPIOHandle->GPIO_PinCfg.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	79db      	ldrb	r3, [r3, #7]
 8000d20:	461a      	mov	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	791b      	ldrb	r3, [r3, #4]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	617b      	str	r3, [r7, #20]
	//clear bit pin_num
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	4619      	mov	r1, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	400a      	ands	r2, r1
 8000d48:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68d9      	ldr	r1, [r3, #12]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	60da      	str	r2, [r3, #12]


	/*
	 * cfg the optype
	 */
	temp = (pGPIOHandle->GPIO_PinCfg.GPIO_PinOutputType << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7a1b      	ldrb	r3, [r3, #8]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	791b      	ldrb	r3, [r3, #4]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	617b      	str	r3, [r7, #20]
	//clear bit pin_num
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	791b      	ldrb	r3, [r3, #4]
 8000d74:	4619      	mov	r1, r3
 8000d76:	2301      	movs	r3, #1
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	400a      	ands	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6859      	ldr	r1, [r3, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	605a      	str	r2, [r3, #4]


	/*
	 * cfg alt func
	 */
	if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode == GPIO_MODE_ALFN) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	795b      	ldrb	r3, [r3, #5]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d131      	bne.n	8000e02 <GPIO_Init+0x27e>
		uint8_t temp1, temp2;

		temp1=pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber/8;		//integer
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	791b      	ldrb	r3, [r3, #4]
 8000da2:	08db      	lsrs	r3, r3, #3
 8000da4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber % 8;	//remainder or balance
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	73fb      	strb	r3, [r7, #15]
		// clear bit
		pGPIOHandle->pGPIOx->AFR[temp1]	&= ~(0xF << (4 * temp2));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	7c3a      	ldrb	r2, [r7, #16]
 8000db6:	3208      	adds	r2, #8
 8000db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	7c3a      	ldrb	r2, [r7, #16]
 8000dd0:	4001      	ands	r1, r0
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfg.GPIO_PinAltFunMode << (4 * temp2));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	7c3a      	ldrb	r2, [r7, #16]
 8000dde:	3208      	adds	r2, #8
 8000de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7a5b      	ldrb	r3, [r3, #9]
 8000de8:	461a      	mov	r2, r3
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	7c3a      	ldrb	r2, [r7, #16]
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40013c00 	.word	0x40013c00
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40013800 	.word	0x40013800

08000e1c <GPIO_ReadFromInputPin>:

/*
 *Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber ) & 0x0000001);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
	return value;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
	...

08000e48 <SPI_PeriClockCtrl>:
 * @note			- none
 *
 */

void SPI_PeriClockCtrl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d12b      	bne.n	8000eb2 <SPI_PeriClockCtrl+0x6a>
	{
		if(pSPIx == SPI1)			SPI1_PCLK_EN();
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a2d      	ldr	r2, [pc, #180]	; (8000f14 <SPI_PeriClockCtrl+0xcc>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d106      	bne.n	8000e70 <SPI_PeriClockCtrl+0x28>
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a2c      	ldr	r2, [pc, #176]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
		if(pSPIx == SPI1)				SPI1_PCLK_DI();
		else if(pSPIx == SPI2)			SPI2_PCLK_DI();
		else if(pSPIx == SPI3)			SPI3_PCLK_DI();
		else if(pSPIx == SPI4)			SPI4_PCLK_DI();
	}
}
 8000e6e:	e04b      	b.n	8000f08 <SPI_PeriClockCtrl+0xc0>
		else if(pSPIx == SPI2)		SPI2_PCLK_EN();
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <SPI_PeriClockCtrl+0xd4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d106      	bne.n	8000e86 <SPI_PeriClockCtrl+0x3e>
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e84:	e040      	b.n	8000f08 <SPI_PeriClockCtrl+0xc0>
		else if(pSPIx == SPI3)		SPI3_PCLK_EN();
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <SPI_PeriClockCtrl+0xd8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d106      	bne.n	8000e9c <SPI_PeriClockCtrl+0x54>
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e9a:	e035      	b.n	8000f08 <SPI_PeriClockCtrl+0xc0>
		else if(pSPIx == SPI4)		SPI4_PCLK_EN();
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <SPI_PeriClockCtrl+0xdc>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d131      	bne.n	8000f08 <SPI_PeriClockCtrl+0xc0>
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000eaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eb0:	e02a      	b.n	8000f08 <SPI_PeriClockCtrl+0xc0>
		if(pSPIx == SPI1)				SPI1_PCLK_DI();
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <SPI_PeriClockCtrl+0xcc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d106      	bne.n	8000ec8 <SPI_PeriClockCtrl+0x80>
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ec6:	e01f      	b.n	8000f08 <SPI_PeriClockCtrl+0xc0>
		else if(pSPIx == SPI2)			SPI2_PCLK_DI();
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <SPI_PeriClockCtrl+0xd4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d106      	bne.n	8000ede <SPI_PeriClockCtrl+0x96>
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000edc:	e014      	b.n	8000f08 <SPI_PeriClockCtrl+0xc0>
		else if(pSPIx == SPI3)			SPI3_PCLK_DI();
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <SPI_PeriClockCtrl+0xd8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d106      	bne.n	8000ef4 <SPI_PeriClockCtrl+0xac>
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000eec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ef2:	e009      	b.n	8000f08 <SPI_PeriClockCtrl+0xc0>
		else if(pSPIx == SPI4)			SPI4_PCLK_DI();
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <SPI_PeriClockCtrl+0xdc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d105      	bne.n	8000f08 <SPI_PeriClockCtrl+0xc0>
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SPI_PeriClockCtrl+0xd0>)
 8000f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40013000 	.word	0x40013000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40003800 	.word	0x40003800
 8000f20:	40003c00 	.word	0x40003c00
 8000f24:	40013400 	.word	0x40013400

08000f28 <SPI_Init>:

/*
 * Init and De-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	// Enable the peripheral clock control
	SPI_PeriClockCtrl(pSPIHandle->SPIx, ENABLE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2101      	movs	r1, #1
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff86 	bl	8000e48 <SPI_PeriClockCtrl>

	// Config SPI_CR1 register
	uint32_t temp = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]

	// 1. Config the device mode master or slave
		temp |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	791b      	ldrb	r3, [r3, #4]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]

	// 2. Config the bus_cfg
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CFG_FD)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	795b      	ldrb	r3, [r3, #5]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d104      	bne.n	8000f60 <SPI_Init+0x38>
	{
	// clear the BIDI mode (bit 15)
		temp &= ~(1 << SPI_CR1_BIDI_MODE);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e014      	b.n	8000f8a <SPI_Init+0x62>

	} else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CFG_HD) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d104      	bne.n	8000f72 <SPI_Init+0x4a>
	//set the BIBI mode
		temp |= 1 << SPI_CR1_BIDI_MODE;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	e00b      	b.n	8000f8a <SPI_Init+0x62>

	}else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CFG_SIMPLEX_RX) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	795b      	ldrb	r3, [r3, #5]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d107      	bne.n	8000f8a <SPI_Init+0x62>
	// clear the bidi mode
		temp &= ~(1 << SPI_CR1_BIDI_MODE);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f80:	60fb      	str	r3, [r7, #12]
		// set the RX only
		temp |= 1 << SPI_CR1_RXONLY;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f88:	60fb      	str	r3, [r7, #12]
	}

	// 3. Config the serial Clock Speed (baud rate)
		temp |= pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	799b      	ldrb	r3, [r3, #6]
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	461a      	mov	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

	// 4. Config the SPI_DFF
		temp |= pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	79db      	ldrb	r3, [r3, #7]
 8000f9c:	02db      	lsls	r3, r3, #11
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]

	// 5. Config SPI_CPHA
		temp |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7a1b      	ldrb	r3, [r3, #8]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]

	// 6. Config SPI_CPOL
		temp |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7a5b      	ldrb	r3, [r3, #9]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

	// 7. Config SPI_SSM
		temp |= pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7a9b      	ldrb	r3, [r3, #10]
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]

	pSPIHandle->SPIx->CR1 = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	601a      	str	r2, [r3, #0]
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <SPI_GetFlagStatus>:
 * Data Send and Receive
 * Buffer : vung nho
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)	{
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <SPI_GetFlagStatus+0x1c>
	}
		return FLAG_RESET;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <SPI_SendData>:
 * @note			- this is blocking call
 *
 */

void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTXBuffer, uint32_t len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8001010:	e027      	b.n	8001062 <SPI_SendData+0x5e>
	{
		// 1. Wait until TXE is set
//		while(! (pSPIx->DR & (1 << 1) )  ); // (pSPIx->DR & (1 << 1) != (1 << 1);

		// while = 1 true, = 0 false TX is set and come out of the loop
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8001012:	bf00      	nop
 8001014:	2102      	movs	r1, #2
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ffe1 	bl	8000fde <SPI_GetFlagStatus>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f8      	beq.n	8001014 <SPI_SendData+0x10>

		// 2. Check the DFF in CR1
		if( pSPIx->CR1 & ( 1 << SPI_CR1_DFF)) // true pSPIx->CR1 bit = 1
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00e      	beq.n	800104c <SPI_SendData+0x48>
		{
			// 16 bit
			// load data from TX buffer (1 byte) to the DR : 8 bit  + pTX 8 bit
			pSPIx->DR = *((uint16_t*)pTXBuffer);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	60da      	str	r2, [r3, #12]
			len--;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
			len--; // 16 bit -> minus 2 times
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3b01      	subs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTXBuffer++;		// increment to  point to next data item
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3301      	adds	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	e00a      	b.n	8001062 <SPI_SendData+0x5e>
		}else {
			pSPIx->DR = *pTXBuffer;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	60da      	str	r2, [r3, #12]
			len--;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3b01      	subs	r3, #1
 800105a:	607b      	str	r3, [r7, #4]
			pTXBuffer++;	// tro toi dia chi tiep theo
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1d4      	bne.n	8001012 <SPI_SendData+0xe>
		}

	}
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <SPI_ReceiveData>:

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRXBuffer, uint32_t len)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
	while(len > 0)
 800107e:	e027      	b.n	80010d0 <SPI_ReceiveData+0x5e>
	{
		// 1. Wait until RXNE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_SET);
 8001080:	bf00      	nop
 8001082:	2101      	movs	r1, #1
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff ffaa 	bl	8000fde <SPI_GetFlagStatus>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d0f8      	beq.n	8001082 <SPI_ReceiveData+0x10>
		// if DFF set = 16 bits else = 8 bits
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF) )
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00e      	beq.n	80010ba <SPI_ReceiveData+0x48>
		{
			// load 2 bytes from DR to RX buffer addr -> uint16_t
			// read from the DR
			*((uint16_t *)pRXBuffer) =  pSPIx->DR;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	801a      	strh	r2, [r3, #0]
			len--;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
			len--;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRXBuffer++;	// increment to receive new
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	e00a      	b.n	80010d0 <SPI_ReceiveData+0x5e>
		} else {
			*pRXBuffer = pSPIx->DR;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	701a      	strb	r2, [r3, #0]
			len--;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
			pRXBuffer++;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1d4      	bne.n	8001080 <SPI_ReceiveData+0xe>
		}
	}
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <SPI_PeriControl>:
/*
 * Other peripheral control APIs
 */

void SPI_PeriControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) // bit 6 CR1 -> SPI peripheral enable(SPE)
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d106      	bne.n	8001100 <SPI_PeriControl+0x20>
	{
		pSPIx->CR1 |= 1 << SPI_CR1_SPE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	601a      	str	r2, [r3, #0]
	}else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80010fe:	e005      	b.n	800110c <SPI_PeriControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <SPI_SSOEConfig>:
 * @note			- SPI = 1, EN -> NSS = 0 , SPI = 0 -> DI
 *
 */

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d106      	bne.n	8001136 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= 1 << SPI_CR2_SSOE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f043 0204 	orr.w	r2, r3, #4
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8001134:	e005      	b.n	8001142 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f023 0204 	bic.w	r2, r3, #4
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	605a      	str	r2, [r3, #4]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <std>:
 800114c:	2300      	movs	r3, #0
 800114e:	b510      	push	{r4, lr}
 8001150:	4604      	mov	r4, r0
 8001152:	e9c0 3300 	strd	r3, r3, [r0]
 8001156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800115a:	6083      	str	r3, [r0, #8]
 800115c:	8181      	strh	r1, [r0, #12]
 800115e:	6643      	str	r3, [r0, #100]	; 0x64
 8001160:	81c2      	strh	r2, [r0, #14]
 8001162:	6183      	str	r3, [r0, #24]
 8001164:	4619      	mov	r1, r3
 8001166:	2208      	movs	r2, #8
 8001168:	305c      	adds	r0, #92	; 0x5c
 800116a:	f000 f9f7 	bl	800155c <memset>
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <std+0x58>)
 8001170:	6263      	str	r3, [r4, #36]	; 0x24
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <std+0x5c>)
 8001174:	62a3      	str	r3, [r4, #40]	; 0x28
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <std+0x60>)
 8001178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <std+0x64>)
 800117c:	6323      	str	r3, [r4, #48]	; 0x30
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <std+0x68>)
 8001180:	6224      	str	r4, [r4, #32]
 8001182:	429c      	cmp	r4, r3
 8001184:	d006      	beq.n	8001194 <std+0x48>
 8001186:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800118a:	4294      	cmp	r4, r2
 800118c:	d002      	beq.n	8001194 <std+0x48>
 800118e:	33d0      	adds	r3, #208	; 0xd0
 8001190:	429c      	cmp	r4, r3
 8001192:	d105      	bne.n	80011a0 <std+0x54>
 8001194:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800119c:	f000 ba56 	b.w	800164c <__retarget_lock_init_recursive>
 80011a0:	bd10      	pop	{r4, pc}
 80011a2:	bf00      	nop
 80011a4:	080013ad 	.word	0x080013ad
 80011a8:	080013cf 	.word	0x080013cf
 80011ac:	08001407 	.word	0x08001407
 80011b0:	0800142b 	.word	0x0800142b
 80011b4:	2000007c 	.word	0x2000007c

080011b8 <stdio_exit_handler>:
 80011b8:	4a02      	ldr	r2, [pc, #8]	; (80011c4 <stdio_exit_handler+0xc>)
 80011ba:	4903      	ldr	r1, [pc, #12]	; (80011c8 <stdio_exit_handler+0x10>)
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <stdio_exit_handler+0x14>)
 80011be:	f000 b869 	b.w	8001294 <_fwalk_sglue>
 80011c2:	bf00      	nop
 80011c4:	20000000 	.word	0x20000000
 80011c8:	08001ee9 	.word	0x08001ee9
 80011cc:	2000000c 	.word	0x2000000c

080011d0 <cleanup_stdio>:
 80011d0:	6841      	ldr	r1, [r0, #4]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <cleanup_stdio+0x34>)
 80011d4:	4299      	cmp	r1, r3
 80011d6:	b510      	push	{r4, lr}
 80011d8:	4604      	mov	r4, r0
 80011da:	d001      	beq.n	80011e0 <cleanup_stdio+0x10>
 80011dc:	f000 fe84 	bl	8001ee8 <_fflush_r>
 80011e0:	68a1      	ldr	r1, [r4, #8]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <cleanup_stdio+0x38>)
 80011e4:	4299      	cmp	r1, r3
 80011e6:	d002      	beq.n	80011ee <cleanup_stdio+0x1e>
 80011e8:	4620      	mov	r0, r4
 80011ea:	f000 fe7d 	bl	8001ee8 <_fflush_r>
 80011ee:	68e1      	ldr	r1, [r4, #12]
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <cleanup_stdio+0x3c>)
 80011f2:	4299      	cmp	r1, r3
 80011f4:	d004      	beq.n	8001200 <cleanup_stdio+0x30>
 80011f6:	4620      	mov	r0, r4
 80011f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011fc:	f000 be74 	b.w	8001ee8 <_fflush_r>
 8001200:	bd10      	pop	{r4, pc}
 8001202:	bf00      	nop
 8001204:	2000007c 	.word	0x2000007c
 8001208:	200000e4 	.word	0x200000e4
 800120c:	2000014c 	.word	0x2000014c

08001210 <global_stdio_init.part.0>:
 8001210:	b510      	push	{r4, lr}
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <global_stdio_init.part.0+0x30>)
 8001214:	4c0b      	ldr	r4, [pc, #44]	; (8001244 <global_stdio_init.part.0+0x34>)
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <global_stdio_init.part.0+0x38>)
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	4620      	mov	r0, r4
 800121c:	2200      	movs	r2, #0
 800121e:	2104      	movs	r1, #4
 8001220:	f7ff ff94 	bl	800114c <std>
 8001224:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001228:	2201      	movs	r2, #1
 800122a:	2109      	movs	r1, #9
 800122c:	f7ff ff8e 	bl	800114c <std>
 8001230:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001234:	2202      	movs	r2, #2
 8001236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800123a:	2112      	movs	r1, #18
 800123c:	f7ff bf86 	b.w	800114c <std>
 8001240:	200001b4 	.word	0x200001b4
 8001244:	2000007c 	.word	0x2000007c
 8001248:	080011b9 	.word	0x080011b9

0800124c <__sfp_lock_acquire>:
 800124c:	4801      	ldr	r0, [pc, #4]	; (8001254 <__sfp_lock_acquire+0x8>)
 800124e:	f000 b9fe 	b.w	800164e <__retarget_lock_acquire_recursive>
 8001252:	bf00      	nop
 8001254:	200001bd 	.word	0x200001bd

08001258 <__sfp_lock_release>:
 8001258:	4801      	ldr	r0, [pc, #4]	; (8001260 <__sfp_lock_release+0x8>)
 800125a:	f000 b9f9 	b.w	8001650 <__retarget_lock_release_recursive>
 800125e:	bf00      	nop
 8001260:	200001bd 	.word	0x200001bd

08001264 <__sinit>:
 8001264:	b510      	push	{r4, lr}
 8001266:	4604      	mov	r4, r0
 8001268:	f7ff fff0 	bl	800124c <__sfp_lock_acquire>
 800126c:	6a23      	ldr	r3, [r4, #32]
 800126e:	b11b      	cbz	r3, 8001278 <__sinit+0x14>
 8001270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001274:	f7ff bff0 	b.w	8001258 <__sfp_lock_release>
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__sinit+0x28>)
 800127a:	6223      	str	r3, [r4, #32]
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__sinit+0x2c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f5      	bne.n	8001270 <__sinit+0xc>
 8001284:	f7ff ffc4 	bl	8001210 <global_stdio_init.part.0>
 8001288:	e7f2      	b.n	8001270 <__sinit+0xc>
 800128a:	bf00      	nop
 800128c:	080011d1 	.word	0x080011d1
 8001290:	200001b4 	.word	0x200001b4

08001294 <_fwalk_sglue>:
 8001294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001298:	4607      	mov	r7, r0
 800129a:	4688      	mov	r8, r1
 800129c:	4614      	mov	r4, r2
 800129e:	2600      	movs	r6, #0
 80012a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80012a4:	f1b9 0901 	subs.w	r9, r9, #1
 80012a8:	d505      	bpl.n	80012b6 <_fwalk_sglue+0x22>
 80012aa:	6824      	ldr	r4, [r4, #0]
 80012ac:	2c00      	cmp	r4, #0
 80012ae:	d1f7      	bne.n	80012a0 <_fwalk_sglue+0xc>
 80012b0:	4630      	mov	r0, r6
 80012b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012b6:	89ab      	ldrh	r3, [r5, #12]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d907      	bls.n	80012cc <_fwalk_sglue+0x38>
 80012bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012c0:	3301      	adds	r3, #1
 80012c2:	d003      	beq.n	80012cc <_fwalk_sglue+0x38>
 80012c4:	4629      	mov	r1, r5
 80012c6:	4638      	mov	r0, r7
 80012c8:	47c0      	blx	r8
 80012ca:	4306      	orrs	r6, r0
 80012cc:	3568      	adds	r5, #104	; 0x68
 80012ce:	e7e9      	b.n	80012a4 <_fwalk_sglue+0x10>

080012d0 <iprintf>:
 80012d0:	b40f      	push	{r0, r1, r2, r3}
 80012d2:	b507      	push	{r0, r1, r2, lr}
 80012d4:	4906      	ldr	r1, [pc, #24]	; (80012f0 <iprintf+0x20>)
 80012d6:	ab04      	add	r3, sp, #16
 80012d8:	6808      	ldr	r0, [r1, #0]
 80012da:	f853 2b04 	ldr.w	r2, [r3], #4
 80012de:	6881      	ldr	r1, [r0, #8]
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	f000 fad5 	bl	8001890 <_vfiprintf_r>
 80012e6:	b003      	add	sp, #12
 80012e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80012ec:	b004      	add	sp, #16
 80012ee:	4770      	bx	lr
 80012f0:	20000058 	.word	0x20000058

080012f4 <_puts_r>:
 80012f4:	6a03      	ldr	r3, [r0, #32]
 80012f6:	b570      	push	{r4, r5, r6, lr}
 80012f8:	6884      	ldr	r4, [r0, #8]
 80012fa:	4605      	mov	r5, r0
 80012fc:	460e      	mov	r6, r1
 80012fe:	b90b      	cbnz	r3, 8001304 <_puts_r+0x10>
 8001300:	f7ff ffb0 	bl	8001264 <__sinit>
 8001304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001306:	07db      	lsls	r3, r3, #31
 8001308:	d405      	bmi.n	8001316 <_puts_r+0x22>
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	0598      	lsls	r0, r3, #22
 800130e:	d402      	bmi.n	8001316 <_puts_r+0x22>
 8001310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001312:	f000 f99c 	bl	800164e <__retarget_lock_acquire_recursive>
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	0719      	lsls	r1, r3, #28
 800131a:	d513      	bpl.n	8001344 <_puts_r+0x50>
 800131c:	6923      	ldr	r3, [r4, #16]
 800131e:	b18b      	cbz	r3, 8001344 <_puts_r+0x50>
 8001320:	3e01      	subs	r6, #1
 8001322:	68a3      	ldr	r3, [r4, #8]
 8001324:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001328:	3b01      	subs	r3, #1
 800132a:	60a3      	str	r3, [r4, #8]
 800132c:	b9e9      	cbnz	r1, 800136a <_puts_r+0x76>
 800132e:	2b00      	cmp	r3, #0
 8001330:	da2e      	bge.n	8001390 <_puts_r+0x9c>
 8001332:	4622      	mov	r2, r4
 8001334:	210a      	movs	r1, #10
 8001336:	4628      	mov	r0, r5
 8001338:	f000 f87b 	bl	8001432 <__swbuf_r>
 800133c:	3001      	adds	r0, #1
 800133e:	d007      	beq.n	8001350 <_puts_r+0x5c>
 8001340:	250a      	movs	r5, #10
 8001342:	e007      	b.n	8001354 <_puts_r+0x60>
 8001344:	4621      	mov	r1, r4
 8001346:	4628      	mov	r0, r5
 8001348:	f000 f8b0 	bl	80014ac <__swsetup_r>
 800134c:	2800      	cmp	r0, #0
 800134e:	d0e7      	beq.n	8001320 <_puts_r+0x2c>
 8001350:	f04f 35ff 	mov.w	r5, #4294967295
 8001354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001356:	07da      	lsls	r2, r3, #31
 8001358:	d405      	bmi.n	8001366 <_puts_r+0x72>
 800135a:	89a3      	ldrh	r3, [r4, #12]
 800135c:	059b      	lsls	r3, r3, #22
 800135e:	d402      	bmi.n	8001366 <_puts_r+0x72>
 8001360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001362:	f000 f975 	bl	8001650 <__retarget_lock_release_recursive>
 8001366:	4628      	mov	r0, r5
 8001368:	bd70      	pop	{r4, r5, r6, pc}
 800136a:	2b00      	cmp	r3, #0
 800136c:	da04      	bge.n	8001378 <_puts_r+0x84>
 800136e:	69a2      	ldr	r2, [r4, #24]
 8001370:	429a      	cmp	r2, r3
 8001372:	dc06      	bgt.n	8001382 <_puts_r+0x8e>
 8001374:	290a      	cmp	r1, #10
 8001376:	d004      	beq.n	8001382 <_puts_r+0x8e>
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	6022      	str	r2, [r4, #0]
 800137e:	7019      	strb	r1, [r3, #0]
 8001380:	e7cf      	b.n	8001322 <_puts_r+0x2e>
 8001382:	4622      	mov	r2, r4
 8001384:	4628      	mov	r0, r5
 8001386:	f000 f854 	bl	8001432 <__swbuf_r>
 800138a:	3001      	adds	r0, #1
 800138c:	d1c9      	bne.n	8001322 <_puts_r+0x2e>
 800138e:	e7df      	b.n	8001350 <_puts_r+0x5c>
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	250a      	movs	r5, #10
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	6022      	str	r2, [r4, #0]
 8001398:	701d      	strb	r5, [r3, #0]
 800139a:	e7db      	b.n	8001354 <_puts_r+0x60>

0800139c <puts>:
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <puts+0xc>)
 800139e:	4601      	mov	r1, r0
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	f7ff bfa7 	b.w	80012f4 <_puts_r>
 80013a6:	bf00      	nop
 80013a8:	20000058 	.word	0x20000058

080013ac <__sread>:
 80013ac:	b510      	push	{r4, lr}
 80013ae:	460c      	mov	r4, r1
 80013b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013b4:	f000 f8fc 	bl	80015b0 <_read_r>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	bfab      	itete	ge
 80013bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80013be:	89a3      	ldrhlt	r3, [r4, #12]
 80013c0:	181b      	addge	r3, r3, r0
 80013c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80013c6:	bfac      	ite	ge
 80013c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80013ca:	81a3      	strhlt	r3, [r4, #12]
 80013cc:	bd10      	pop	{r4, pc}

080013ce <__swrite>:
 80013ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d2:	461f      	mov	r7, r3
 80013d4:	898b      	ldrh	r3, [r1, #12]
 80013d6:	05db      	lsls	r3, r3, #23
 80013d8:	4605      	mov	r5, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	4616      	mov	r6, r2
 80013de:	d505      	bpl.n	80013ec <__swrite+0x1e>
 80013e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013e4:	2302      	movs	r3, #2
 80013e6:	2200      	movs	r2, #0
 80013e8:	f000 f8d0 	bl	800158c <_lseek_r>
 80013ec:	89a3      	ldrh	r3, [r4, #12]
 80013ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013f6:	81a3      	strh	r3, [r4, #12]
 80013f8:	4632      	mov	r2, r6
 80013fa:	463b      	mov	r3, r7
 80013fc:	4628      	mov	r0, r5
 80013fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001402:	f000 b8e7 	b.w	80015d4 <_write_r>

08001406 <__sseek>:
 8001406:	b510      	push	{r4, lr}
 8001408:	460c      	mov	r4, r1
 800140a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800140e:	f000 f8bd 	bl	800158c <_lseek_r>
 8001412:	1c43      	adds	r3, r0, #1
 8001414:	89a3      	ldrh	r3, [r4, #12]
 8001416:	bf15      	itete	ne
 8001418:	6560      	strne	r0, [r4, #84]	; 0x54
 800141a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800141e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001422:	81a3      	strheq	r3, [r4, #12]
 8001424:	bf18      	it	ne
 8001426:	81a3      	strhne	r3, [r4, #12]
 8001428:	bd10      	pop	{r4, pc}

0800142a <__sclose>:
 800142a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800142e:	f000 b89d 	b.w	800156c <_close_r>

08001432 <__swbuf_r>:
 8001432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001434:	460e      	mov	r6, r1
 8001436:	4614      	mov	r4, r2
 8001438:	4605      	mov	r5, r0
 800143a:	b118      	cbz	r0, 8001444 <__swbuf_r+0x12>
 800143c:	6a03      	ldr	r3, [r0, #32]
 800143e:	b90b      	cbnz	r3, 8001444 <__swbuf_r+0x12>
 8001440:	f7ff ff10 	bl	8001264 <__sinit>
 8001444:	69a3      	ldr	r3, [r4, #24]
 8001446:	60a3      	str	r3, [r4, #8]
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	071a      	lsls	r2, r3, #28
 800144c:	d525      	bpl.n	800149a <__swbuf_r+0x68>
 800144e:	6923      	ldr	r3, [r4, #16]
 8001450:	b31b      	cbz	r3, 800149a <__swbuf_r+0x68>
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	6922      	ldr	r2, [r4, #16]
 8001456:	1a98      	subs	r0, r3, r2
 8001458:	6963      	ldr	r3, [r4, #20]
 800145a:	b2f6      	uxtb	r6, r6
 800145c:	4283      	cmp	r3, r0
 800145e:	4637      	mov	r7, r6
 8001460:	dc04      	bgt.n	800146c <__swbuf_r+0x3a>
 8001462:	4621      	mov	r1, r4
 8001464:	4628      	mov	r0, r5
 8001466:	f000 fd3f 	bl	8001ee8 <_fflush_r>
 800146a:	b9e0      	cbnz	r0, 80014a6 <__swbuf_r+0x74>
 800146c:	68a3      	ldr	r3, [r4, #8]
 800146e:	3b01      	subs	r3, #1
 8001470:	60a3      	str	r3, [r4, #8]
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	6022      	str	r2, [r4, #0]
 8001478:	701e      	strb	r6, [r3, #0]
 800147a:	6962      	ldr	r2, [r4, #20]
 800147c:	1c43      	adds	r3, r0, #1
 800147e:	429a      	cmp	r2, r3
 8001480:	d004      	beq.n	800148c <__swbuf_r+0x5a>
 8001482:	89a3      	ldrh	r3, [r4, #12]
 8001484:	07db      	lsls	r3, r3, #31
 8001486:	d506      	bpl.n	8001496 <__swbuf_r+0x64>
 8001488:	2e0a      	cmp	r6, #10
 800148a:	d104      	bne.n	8001496 <__swbuf_r+0x64>
 800148c:	4621      	mov	r1, r4
 800148e:	4628      	mov	r0, r5
 8001490:	f000 fd2a 	bl	8001ee8 <_fflush_r>
 8001494:	b938      	cbnz	r0, 80014a6 <__swbuf_r+0x74>
 8001496:	4638      	mov	r0, r7
 8001498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800149a:	4621      	mov	r1, r4
 800149c:	4628      	mov	r0, r5
 800149e:	f000 f805 	bl	80014ac <__swsetup_r>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d0d5      	beq.n	8001452 <__swbuf_r+0x20>
 80014a6:	f04f 37ff 	mov.w	r7, #4294967295
 80014aa:	e7f4      	b.n	8001496 <__swbuf_r+0x64>

080014ac <__swsetup_r>:
 80014ac:	b538      	push	{r3, r4, r5, lr}
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <__swsetup_r+0xac>)
 80014b0:	4605      	mov	r5, r0
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	460c      	mov	r4, r1
 80014b6:	b118      	cbz	r0, 80014c0 <__swsetup_r+0x14>
 80014b8:	6a03      	ldr	r3, [r0, #32]
 80014ba:	b90b      	cbnz	r3, 80014c0 <__swsetup_r+0x14>
 80014bc:	f7ff fed2 	bl	8001264 <__sinit>
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014c6:	0718      	lsls	r0, r3, #28
 80014c8:	d422      	bmi.n	8001510 <__swsetup_r+0x64>
 80014ca:	06d9      	lsls	r1, r3, #27
 80014cc:	d407      	bmi.n	80014de <__swsetup_r+0x32>
 80014ce:	2309      	movs	r3, #9
 80014d0:	602b      	str	r3, [r5, #0]
 80014d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014d6:	81a3      	strh	r3, [r4, #12]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	e034      	b.n	8001548 <__swsetup_r+0x9c>
 80014de:	0758      	lsls	r0, r3, #29
 80014e0:	d512      	bpl.n	8001508 <__swsetup_r+0x5c>
 80014e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014e4:	b141      	cbz	r1, 80014f8 <__swsetup_r+0x4c>
 80014e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014ea:	4299      	cmp	r1, r3
 80014ec:	d002      	beq.n	80014f4 <__swsetup_r+0x48>
 80014ee:	4628      	mov	r0, r5
 80014f0:	f000 f8b0 	bl	8001654 <_free_r>
 80014f4:	2300      	movs	r3, #0
 80014f6:	6363      	str	r3, [r4, #52]	; 0x34
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014fe:	81a3      	strh	r3, [r4, #12]
 8001500:	2300      	movs	r3, #0
 8001502:	6063      	str	r3, [r4, #4]
 8001504:	6923      	ldr	r3, [r4, #16]
 8001506:	6023      	str	r3, [r4, #0]
 8001508:	89a3      	ldrh	r3, [r4, #12]
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	81a3      	strh	r3, [r4, #12]
 8001510:	6923      	ldr	r3, [r4, #16]
 8001512:	b94b      	cbnz	r3, 8001528 <__swsetup_r+0x7c>
 8001514:	89a3      	ldrh	r3, [r4, #12]
 8001516:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800151a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151e:	d003      	beq.n	8001528 <__swsetup_r+0x7c>
 8001520:	4621      	mov	r1, r4
 8001522:	4628      	mov	r0, r5
 8001524:	f000 fd2e 	bl	8001f84 <__smakebuf_r>
 8001528:	89a0      	ldrh	r0, [r4, #12]
 800152a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800152e:	f010 0301 	ands.w	r3, r0, #1
 8001532:	d00a      	beq.n	800154a <__swsetup_r+0x9e>
 8001534:	2300      	movs	r3, #0
 8001536:	60a3      	str	r3, [r4, #8]
 8001538:	6963      	ldr	r3, [r4, #20]
 800153a:	425b      	negs	r3, r3
 800153c:	61a3      	str	r3, [r4, #24]
 800153e:	6923      	ldr	r3, [r4, #16]
 8001540:	b943      	cbnz	r3, 8001554 <__swsetup_r+0xa8>
 8001542:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001546:	d1c4      	bne.n	80014d2 <__swsetup_r+0x26>
 8001548:	bd38      	pop	{r3, r4, r5, pc}
 800154a:	0781      	lsls	r1, r0, #30
 800154c:	bf58      	it	pl
 800154e:	6963      	ldrpl	r3, [r4, #20]
 8001550:	60a3      	str	r3, [r4, #8]
 8001552:	e7f4      	b.n	800153e <__swsetup_r+0x92>
 8001554:	2000      	movs	r0, #0
 8001556:	e7f7      	b.n	8001548 <__swsetup_r+0x9c>
 8001558:	20000058 	.word	0x20000058

0800155c <memset>:
 800155c:	4402      	add	r2, r0
 800155e:	4603      	mov	r3, r0
 8001560:	4293      	cmp	r3, r2
 8001562:	d100      	bne.n	8001566 <memset+0xa>
 8001564:	4770      	bx	lr
 8001566:	f803 1b01 	strb.w	r1, [r3], #1
 800156a:	e7f9      	b.n	8001560 <memset+0x4>

0800156c <_close_r>:
 800156c:	b538      	push	{r3, r4, r5, lr}
 800156e:	4d06      	ldr	r5, [pc, #24]	; (8001588 <_close_r+0x1c>)
 8001570:	2300      	movs	r3, #0
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	602b      	str	r3, [r5, #0]
 8001578:	f7ff f98b 	bl	8000892 <_close>
 800157c:	1c43      	adds	r3, r0, #1
 800157e:	d102      	bne.n	8001586 <_close_r+0x1a>
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	b103      	cbz	r3, 8001586 <_close_r+0x1a>
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	bd38      	pop	{r3, r4, r5, pc}
 8001588:	200001b8 	.word	0x200001b8

0800158c <_lseek_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4d07      	ldr	r5, [pc, #28]	; (80015ac <_lseek_r+0x20>)
 8001590:	4604      	mov	r4, r0
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	2200      	movs	r2, #0
 8001598:	602a      	str	r2, [r5, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	f7ff f99d 	bl	80008da <_lseek>
 80015a0:	1c43      	adds	r3, r0, #1
 80015a2:	d102      	bne.n	80015aa <_lseek_r+0x1e>
 80015a4:	682b      	ldr	r3, [r5, #0]
 80015a6:	b103      	cbz	r3, 80015aa <_lseek_r+0x1e>
 80015a8:	6023      	str	r3, [r4, #0]
 80015aa:	bd38      	pop	{r3, r4, r5, pc}
 80015ac:	200001b8 	.word	0x200001b8

080015b0 <_read_r>:
 80015b0:	b538      	push	{r3, r4, r5, lr}
 80015b2:	4d07      	ldr	r5, [pc, #28]	; (80015d0 <_read_r+0x20>)
 80015b4:	4604      	mov	r4, r0
 80015b6:	4608      	mov	r0, r1
 80015b8:	4611      	mov	r1, r2
 80015ba:	2200      	movs	r2, #0
 80015bc:	602a      	str	r2, [r5, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	f7ff f92e 	bl	8000820 <_read>
 80015c4:	1c43      	adds	r3, r0, #1
 80015c6:	d102      	bne.n	80015ce <_read_r+0x1e>
 80015c8:	682b      	ldr	r3, [r5, #0]
 80015ca:	b103      	cbz	r3, 80015ce <_read_r+0x1e>
 80015cc:	6023      	str	r3, [r4, #0]
 80015ce:	bd38      	pop	{r3, r4, r5, pc}
 80015d0:	200001b8 	.word	0x200001b8

080015d4 <_write_r>:
 80015d4:	b538      	push	{r3, r4, r5, lr}
 80015d6:	4d07      	ldr	r5, [pc, #28]	; (80015f4 <_write_r+0x20>)
 80015d8:	4604      	mov	r4, r0
 80015da:	4608      	mov	r0, r1
 80015dc:	4611      	mov	r1, r2
 80015de:	2200      	movs	r2, #0
 80015e0:	602a      	str	r2, [r5, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	f7ff f939 	bl	800085a <_write>
 80015e8:	1c43      	adds	r3, r0, #1
 80015ea:	d102      	bne.n	80015f2 <_write_r+0x1e>
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	b103      	cbz	r3, 80015f2 <_write_r+0x1e>
 80015f0:	6023      	str	r3, [r4, #0]
 80015f2:	bd38      	pop	{r3, r4, r5, pc}
 80015f4:	200001b8 	.word	0x200001b8

080015f8 <__errno>:
 80015f8:	4b01      	ldr	r3, [pc, #4]	; (8001600 <__errno+0x8>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000058 	.word	0x20000058

08001604 <__libc_init_array>:
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	4d0d      	ldr	r5, [pc, #52]	; (800163c <__libc_init_array+0x38>)
 8001608:	4c0d      	ldr	r4, [pc, #52]	; (8001640 <__libc_init_array+0x3c>)
 800160a:	1b64      	subs	r4, r4, r5
 800160c:	10a4      	asrs	r4, r4, #2
 800160e:	2600      	movs	r6, #0
 8001610:	42a6      	cmp	r6, r4
 8001612:	d109      	bne.n	8001628 <__libc_init_array+0x24>
 8001614:	4d0b      	ldr	r5, [pc, #44]	; (8001644 <__libc_init_array+0x40>)
 8001616:	4c0c      	ldr	r4, [pc, #48]	; (8001648 <__libc_init_array+0x44>)
 8001618:	f000 fd22 	bl	8002060 <_init>
 800161c:	1b64      	subs	r4, r4, r5
 800161e:	10a4      	asrs	r4, r4, #2
 8001620:	2600      	movs	r6, #0
 8001622:	42a6      	cmp	r6, r4
 8001624:	d105      	bne.n	8001632 <__libc_init_array+0x2e>
 8001626:	bd70      	pop	{r4, r5, r6, pc}
 8001628:	f855 3b04 	ldr.w	r3, [r5], #4
 800162c:	4798      	blx	r3
 800162e:	3601      	adds	r6, #1
 8001630:	e7ee      	b.n	8001610 <__libc_init_array+0xc>
 8001632:	f855 3b04 	ldr.w	r3, [r5], #4
 8001636:	4798      	blx	r3
 8001638:	3601      	adds	r6, #1
 800163a:	e7f2      	b.n	8001622 <__libc_init_array+0x1e>
 800163c:	0800217c 	.word	0x0800217c
 8001640:	0800217c 	.word	0x0800217c
 8001644:	0800217c 	.word	0x0800217c
 8001648:	08002180 	.word	0x08002180

0800164c <__retarget_lock_init_recursive>:
 800164c:	4770      	bx	lr

0800164e <__retarget_lock_acquire_recursive>:
 800164e:	4770      	bx	lr

08001650 <__retarget_lock_release_recursive>:
 8001650:	4770      	bx	lr
	...

08001654 <_free_r>:
 8001654:	b538      	push	{r3, r4, r5, lr}
 8001656:	4605      	mov	r5, r0
 8001658:	2900      	cmp	r1, #0
 800165a:	d041      	beq.n	80016e0 <_free_r+0x8c>
 800165c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001660:	1f0c      	subs	r4, r1, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	bfb8      	it	lt
 8001666:	18e4      	addlt	r4, r4, r3
 8001668:	f000 f8de 	bl	8001828 <__malloc_lock>
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <_free_r+0x90>)
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	b933      	cbnz	r3, 8001680 <_free_r+0x2c>
 8001672:	6063      	str	r3, [r4, #4]
 8001674:	6014      	str	r4, [r2, #0]
 8001676:	4628      	mov	r0, r5
 8001678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800167c:	f000 b8da 	b.w	8001834 <__malloc_unlock>
 8001680:	42a3      	cmp	r3, r4
 8001682:	d908      	bls.n	8001696 <_free_r+0x42>
 8001684:	6820      	ldr	r0, [r4, #0]
 8001686:	1821      	adds	r1, r4, r0
 8001688:	428b      	cmp	r3, r1
 800168a:	bf01      	itttt	eq
 800168c:	6819      	ldreq	r1, [r3, #0]
 800168e:	685b      	ldreq	r3, [r3, #4]
 8001690:	1809      	addeq	r1, r1, r0
 8001692:	6021      	streq	r1, [r4, #0]
 8001694:	e7ed      	b.n	8001672 <_free_r+0x1e>
 8001696:	461a      	mov	r2, r3
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	b10b      	cbz	r3, 80016a0 <_free_r+0x4c>
 800169c:	42a3      	cmp	r3, r4
 800169e:	d9fa      	bls.n	8001696 <_free_r+0x42>
 80016a0:	6811      	ldr	r1, [r2, #0]
 80016a2:	1850      	adds	r0, r2, r1
 80016a4:	42a0      	cmp	r0, r4
 80016a6:	d10b      	bne.n	80016c0 <_free_r+0x6c>
 80016a8:	6820      	ldr	r0, [r4, #0]
 80016aa:	4401      	add	r1, r0
 80016ac:	1850      	adds	r0, r2, r1
 80016ae:	4283      	cmp	r3, r0
 80016b0:	6011      	str	r1, [r2, #0]
 80016b2:	d1e0      	bne.n	8001676 <_free_r+0x22>
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	6053      	str	r3, [r2, #4]
 80016ba:	4408      	add	r0, r1
 80016bc:	6010      	str	r0, [r2, #0]
 80016be:	e7da      	b.n	8001676 <_free_r+0x22>
 80016c0:	d902      	bls.n	80016c8 <_free_r+0x74>
 80016c2:	230c      	movs	r3, #12
 80016c4:	602b      	str	r3, [r5, #0]
 80016c6:	e7d6      	b.n	8001676 <_free_r+0x22>
 80016c8:	6820      	ldr	r0, [r4, #0]
 80016ca:	1821      	adds	r1, r4, r0
 80016cc:	428b      	cmp	r3, r1
 80016ce:	bf04      	itt	eq
 80016d0:	6819      	ldreq	r1, [r3, #0]
 80016d2:	685b      	ldreq	r3, [r3, #4]
 80016d4:	6063      	str	r3, [r4, #4]
 80016d6:	bf04      	itt	eq
 80016d8:	1809      	addeq	r1, r1, r0
 80016da:	6021      	streq	r1, [r4, #0]
 80016dc:	6054      	str	r4, [r2, #4]
 80016de:	e7ca      	b.n	8001676 <_free_r+0x22>
 80016e0:	bd38      	pop	{r3, r4, r5, pc}
 80016e2:	bf00      	nop
 80016e4:	200001c0 	.word	0x200001c0

080016e8 <sbrk_aligned>:
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	4e0e      	ldr	r6, [pc, #56]	; (8001724 <sbrk_aligned+0x3c>)
 80016ec:	460c      	mov	r4, r1
 80016ee:	6831      	ldr	r1, [r6, #0]
 80016f0:	4605      	mov	r5, r0
 80016f2:	b911      	cbnz	r1, 80016fa <sbrk_aligned+0x12>
 80016f4:	f000 fca4 	bl	8002040 <_sbrk_r>
 80016f8:	6030      	str	r0, [r6, #0]
 80016fa:	4621      	mov	r1, r4
 80016fc:	4628      	mov	r0, r5
 80016fe:	f000 fc9f 	bl	8002040 <_sbrk_r>
 8001702:	1c43      	adds	r3, r0, #1
 8001704:	d00a      	beq.n	800171c <sbrk_aligned+0x34>
 8001706:	1cc4      	adds	r4, r0, #3
 8001708:	f024 0403 	bic.w	r4, r4, #3
 800170c:	42a0      	cmp	r0, r4
 800170e:	d007      	beq.n	8001720 <sbrk_aligned+0x38>
 8001710:	1a21      	subs	r1, r4, r0
 8001712:	4628      	mov	r0, r5
 8001714:	f000 fc94 	bl	8002040 <_sbrk_r>
 8001718:	3001      	adds	r0, #1
 800171a:	d101      	bne.n	8001720 <sbrk_aligned+0x38>
 800171c:	f04f 34ff 	mov.w	r4, #4294967295
 8001720:	4620      	mov	r0, r4
 8001722:	bd70      	pop	{r4, r5, r6, pc}
 8001724:	200001c4 	.word	0x200001c4

08001728 <_malloc_r>:
 8001728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800172c:	1ccd      	adds	r5, r1, #3
 800172e:	f025 0503 	bic.w	r5, r5, #3
 8001732:	3508      	adds	r5, #8
 8001734:	2d0c      	cmp	r5, #12
 8001736:	bf38      	it	cc
 8001738:	250c      	movcc	r5, #12
 800173a:	2d00      	cmp	r5, #0
 800173c:	4607      	mov	r7, r0
 800173e:	db01      	blt.n	8001744 <_malloc_r+0x1c>
 8001740:	42a9      	cmp	r1, r5
 8001742:	d905      	bls.n	8001750 <_malloc_r+0x28>
 8001744:	230c      	movs	r3, #12
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	2600      	movs	r6, #0
 800174a:	4630      	mov	r0, r6
 800174c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001750:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001824 <_malloc_r+0xfc>
 8001754:	f000 f868 	bl	8001828 <__malloc_lock>
 8001758:	f8d8 3000 	ldr.w	r3, [r8]
 800175c:	461c      	mov	r4, r3
 800175e:	bb5c      	cbnz	r4, 80017b8 <_malloc_r+0x90>
 8001760:	4629      	mov	r1, r5
 8001762:	4638      	mov	r0, r7
 8001764:	f7ff ffc0 	bl	80016e8 <sbrk_aligned>
 8001768:	1c43      	adds	r3, r0, #1
 800176a:	4604      	mov	r4, r0
 800176c:	d155      	bne.n	800181a <_malloc_r+0xf2>
 800176e:	f8d8 4000 	ldr.w	r4, [r8]
 8001772:	4626      	mov	r6, r4
 8001774:	2e00      	cmp	r6, #0
 8001776:	d145      	bne.n	8001804 <_malloc_r+0xdc>
 8001778:	2c00      	cmp	r4, #0
 800177a:	d048      	beq.n	800180e <_malloc_r+0xe6>
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	4631      	mov	r1, r6
 8001780:	4638      	mov	r0, r7
 8001782:	eb04 0903 	add.w	r9, r4, r3
 8001786:	f000 fc5b 	bl	8002040 <_sbrk_r>
 800178a:	4581      	cmp	r9, r0
 800178c:	d13f      	bne.n	800180e <_malloc_r+0xe6>
 800178e:	6821      	ldr	r1, [r4, #0]
 8001790:	1a6d      	subs	r5, r5, r1
 8001792:	4629      	mov	r1, r5
 8001794:	4638      	mov	r0, r7
 8001796:	f7ff ffa7 	bl	80016e8 <sbrk_aligned>
 800179a:	3001      	adds	r0, #1
 800179c:	d037      	beq.n	800180e <_malloc_r+0xe6>
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	442b      	add	r3, r5
 80017a2:	6023      	str	r3, [r4, #0]
 80017a4:	f8d8 3000 	ldr.w	r3, [r8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d038      	beq.n	800181e <_malloc_r+0xf6>
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	42a2      	cmp	r2, r4
 80017b0:	d12b      	bne.n	800180a <_malloc_r+0xe2>
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	e00f      	b.n	80017d8 <_malloc_r+0xb0>
 80017b8:	6822      	ldr	r2, [r4, #0]
 80017ba:	1b52      	subs	r2, r2, r5
 80017bc:	d41f      	bmi.n	80017fe <_malloc_r+0xd6>
 80017be:	2a0b      	cmp	r2, #11
 80017c0:	d917      	bls.n	80017f2 <_malloc_r+0xca>
 80017c2:	1961      	adds	r1, r4, r5
 80017c4:	42a3      	cmp	r3, r4
 80017c6:	6025      	str	r5, [r4, #0]
 80017c8:	bf18      	it	ne
 80017ca:	6059      	strne	r1, [r3, #4]
 80017cc:	6863      	ldr	r3, [r4, #4]
 80017ce:	bf08      	it	eq
 80017d0:	f8c8 1000 	streq.w	r1, [r8]
 80017d4:	5162      	str	r2, [r4, r5]
 80017d6:	604b      	str	r3, [r1, #4]
 80017d8:	4638      	mov	r0, r7
 80017da:	f104 060b 	add.w	r6, r4, #11
 80017de:	f000 f829 	bl	8001834 <__malloc_unlock>
 80017e2:	f026 0607 	bic.w	r6, r6, #7
 80017e6:	1d23      	adds	r3, r4, #4
 80017e8:	1af2      	subs	r2, r6, r3
 80017ea:	d0ae      	beq.n	800174a <_malloc_r+0x22>
 80017ec:	1b9b      	subs	r3, r3, r6
 80017ee:	50a3      	str	r3, [r4, r2]
 80017f0:	e7ab      	b.n	800174a <_malloc_r+0x22>
 80017f2:	42a3      	cmp	r3, r4
 80017f4:	6862      	ldr	r2, [r4, #4]
 80017f6:	d1dd      	bne.n	80017b4 <_malloc_r+0x8c>
 80017f8:	f8c8 2000 	str.w	r2, [r8]
 80017fc:	e7ec      	b.n	80017d8 <_malloc_r+0xb0>
 80017fe:	4623      	mov	r3, r4
 8001800:	6864      	ldr	r4, [r4, #4]
 8001802:	e7ac      	b.n	800175e <_malloc_r+0x36>
 8001804:	4634      	mov	r4, r6
 8001806:	6876      	ldr	r6, [r6, #4]
 8001808:	e7b4      	b.n	8001774 <_malloc_r+0x4c>
 800180a:	4613      	mov	r3, r2
 800180c:	e7cc      	b.n	80017a8 <_malloc_r+0x80>
 800180e:	230c      	movs	r3, #12
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4638      	mov	r0, r7
 8001814:	f000 f80e 	bl	8001834 <__malloc_unlock>
 8001818:	e797      	b.n	800174a <_malloc_r+0x22>
 800181a:	6025      	str	r5, [r4, #0]
 800181c:	e7dc      	b.n	80017d8 <_malloc_r+0xb0>
 800181e:	605b      	str	r3, [r3, #4]
 8001820:	deff      	udf	#255	; 0xff
 8001822:	bf00      	nop
 8001824:	200001c0 	.word	0x200001c0

08001828 <__malloc_lock>:
 8001828:	4801      	ldr	r0, [pc, #4]	; (8001830 <__malloc_lock+0x8>)
 800182a:	f7ff bf10 	b.w	800164e <__retarget_lock_acquire_recursive>
 800182e:	bf00      	nop
 8001830:	200001bc 	.word	0x200001bc

08001834 <__malloc_unlock>:
 8001834:	4801      	ldr	r0, [pc, #4]	; (800183c <__malloc_unlock+0x8>)
 8001836:	f7ff bf0b 	b.w	8001650 <__retarget_lock_release_recursive>
 800183a:	bf00      	nop
 800183c:	200001bc 	.word	0x200001bc

08001840 <__sfputc_r>:
 8001840:	6893      	ldr	r3, [r2, #8]
 8001842:	3b01      	subs	r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	b410      	push	{r4}
 8001848:	6093      	str	r3, [r2, #8]
 800184a:	da07      	bge.n	800185c <__sfputc_r+0x1c>
 800184c:	6994      	ldr	r4, [r2, #24]
 800184e:	42a3      	cmp	r3, r4
 8001850:	db01      	blt.n	8001856 <__sfputc_r+0x16>
 8001852:	290a      	cmp	r1, #10
 8001854:	d102      	bne.n	800185c <__sfputc_r+0x1c>
 8001856:	bc10      	pop	{r4}
 8001858:	f7ff bdeb 	b.w	8001432 <__swbuf_r>
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	1c58      	adds	r0, r3, #1
 8001860:	6010      	str	r0, [r2, #0]
 8001862:	7019      	strb	r1, [r3, #0]
 8001864:	4608      	mov	r0, r1
 8001866:	bc10      	pop	{r4}
 8001868:	4770      	bx	lr

0800186a <__sfputs_r>:
 800186a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186c:	4606      	mov	r6, r0
 800186e:	460f      	mov	r7, r1
 8001870:	4614      	mov	r4, r2
 8001872:	18d5      	adds	r5, r2, r3
 8001874:	42ac      	cmp	r4, r5
 8001876:	d101      	bne.n	800187c <__sfputs_r+0x12>
 8001878:	2000      	movs	r0, #0
 800187a:	e007      	b.n	800188c <__sfputs_r+0x22>
 800187c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001880:	463a      	mov	r2, r7
 8001882:	4630      	mov	r0, r6
 8001884:	f7ff ffdc 	bl	8001840 <__sfputc_r>
 8001888:	1c43      	adds	r3, r0, #1
 800188a:	d1f3      	bne.n	8001874 <__sfputs_r+0xa>
 800188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001890 <_vfiprintf_r>:
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001894:	460d      	mov	r5, r1
 8001896:	b09d      	sub	sp, #116	; 0x74
 8001898:	4614      	mov	r4, r2
 800189a:	4698      	mov	r8, r3
 800189c:	4606      	mov	r6, r0
 800189e:	b118      	cbz	r0, 80018a8 <_vfiprintf_r+0x18>
 80018a0:	6a03      	ldr	r3, [r0, #32]
 80018a2:	b90b      	cbnz	r3, 80018a8 <_vfiprintf_r+0x18>
 80018a4:	f7ff fcde 	bl	8001264 <__sinit>
 80018a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018aa:	07d9      	lsls	r1, r3, #31
 80018ac:	d405      	bmi.n	80018ba <_vfiprintf_r+0x2a>
 80018ae:	89ab      	ldrh	r3, [r5, #12]
 80018b0:	059a      	lsls	r2, r3, #22
 80018b2:	d402      	bmi.n	80018ba <_vfiprintf_r+0x2a>
 80018b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018b6:	f7ff feca 	bl	800164e <__retarget_lock_acquire_recursive>
 80018ba:	89ab      	ldrh	r3, [r5, #12]
 80018bc:	071b      	lsls	r3, r3, #28
 80018be:	d501      	bpl.n	80018c4 <_vfiprintf_r+0x34>
 80018c0:	692b      	ldr	r3, [r5, #16]
 80018c2:	b99b      	cbnz	r3, 80018ec <_vfiprintf_r+0x5c>
 80018c4:	4629      	mov	r1, r5
 80018c6:	4630      	mov	r0, r6
 80018c8:	f7ff fdf0 	bl	80014ac <__swsetup_r>
 80018cc:	b170      	cbz	r0, 80018ec <_vfiprintf_r+0x5c>
 80018ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018d0:	07dc      	lsls	r4, r3, #31
 80018d2:	d504      	bpl.n	80018de <_vfiprintf_r+0x4e>
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	b01d      	add	sp, #116	; 0x74
 80018da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018de:	89ab      	ldrh	r3, [r5, #12]
 80018e0:	0598      	lsls	r0, r3, #22
 80018e2:	d4f7      	bmi.n	80018d4 <_vfiprintf_r+0x44>
 80018e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018e6:	f7ff feb3 	bl	8001650 <__retarget_lock_release_recursive>
 80018ea:	e7f3      	b.n	80018d4 <_vfiprintf_r+0x44>
 80018ec:	2300      	movs	r3, #0
 80018ee:	9309      	str	r3, [sp, #36]	; 0x24
 80018f0:	2320      	movs	r3, #32
 80018f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80018fa:	2330      	movs	r3, #48	; 0x30
 80018fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001ab0 <_vfiprintf_r+0x220>
 8001900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001904:	f04f 0901 	mov.w	r9, #1
 8001908:	4623      	mov	r3, r4
 800190a:	469a      	mov	sl, r3
 800190c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001910:	b10a      	cbz	r2, 8001916 <_vfiprintf_r+0x86>
 8001912:	2a25      	cmp	r2, #37	; 0x25
 8001914:	d1f9      	bne.n	800190a <_vfiprintf_r+0x7a>
 8001916:	ebba 0b04 	subs.w	fp, sl, r4
 800191a:	d00b      	beq.n	8001934 <_vfiprintf_r+0xa4>
 800191c:	465b      	mov	r3, fp
 800191e:	4622      	mov	r2, r4
 8001920:	4629      	mov	r1, r5
 8001922:	4630      	mov	r0, r6
 8001924:	f7ff ffa1 	bl	800186a <__sfputs_r>
 8001928:	3001      	adds	r0, #1
 800192a:	f000 80a9 	beq.w	8001a80 <_vfiprintf_r+0x1f0>
 800192e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001930:	445a      	add	r2, fp
 8001932:	9209      	str	r2, [sp, #36]	; 0x24
 8001934:	f89a 3000 	ldrb.w	r3, [sl]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80a1 	beq.w	8001a80 <_vfiprintf_r+0x1f0>
 800193e:	2300      	movs	r3, #0
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001948:	f10a 0a01 	add.w	sl, sl, #1
 800194c:	9304      	str	r3, [sp, #16]
 800194e:	9307      	str	r3, [sp, #28]
 8001950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001954:	931a      	str	r3, [sp, #104]	; 0x68
 8001956:	4654      	mov	r4, sl
 8001958:	2205      	movs	r2, #5
 800195a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800195e:	4854      	ldr	r0, [pc, #336]	; (8001ab0 <_vfiprintf_r+0x220>)
 8001960:	f7fe fc4e 	bl	8000200 <memchr>
 8001964:	9a04      	ldr	r2, [sp, #16]
 8001966:	b9d8      	cbnz	r0, 80019a0 <_vfiprintf_r+0x110>
 8001968:	06d1      	lsls	r1, r2, #27
 800196a:	bf44      	itt	mi
 800196c:	2320      	movmi	r3, #32
 800196e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001972:	0713      	lsls	r3, r2, #28
 8001974:	bf44      	itt	mi
 8001976:	232b      	movmi	r3, #43	; 0x2b
 8001978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800197c:	f89a 3000 	ldrb.w	r3, [sl]
 8001980:	2b2a      	cmp	r3, #42	; 0x2a
 8001982:	d015      	beq.n	80019b0 <_vfiprintf_r+0x120>
 8001984:	9a07      	ldr	r2, [sp, #28]
 8001986:	4654      	mov	r4, sl
 8001988:	2000      	movs	r0, #0
 800198a:	f04f 0c0a 	mov.w	ip, #10
 800198e:	4621      	mov	r1, r4
 8001990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001994:	3b30      	subs	r3, #48	; 0x30
 8001996:	2b09      	cmp	r3, #9
 8001998:	d94d      	bls.n	8001a36 <_vfiprintf_r+0x1a6>
 800199a:	b1b0      	cbz	r0, 80019ca <_vfiprintf_r+0x13a>
 800199c:	9207      	str	r2, [sp, #28]
 800199e:	e014      	b.n	80019ca <_vfiprintf_r+0x13a>
 80019a0:	eba0 0308 	sub.w	r3, r0, r8
 80019a4:	fa09 f303 	lsl.w	r3, r9, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	9304      	str	r3, [sp, #16]
 80019ac:	46a2      	mov	sl, r4
 80019ae:	e7d2      	b.n	8001956 <_vfiprintf_r+0xc6>
 80019b0:	9b03      	ldr	r3, [sp, #12]
 80019b2:	1d19      	adds	r1, r3, #4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	9103      	str	r1, [sp, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bfbb      	ittet	lt
 80019bc:	425b      	neglt	r3, r3
 80019be:	f042 0202 	orrlt.w	r2, r2, #2
 80019c2:	9307      	strge	r3, [sp, #28]
 80019c4:	9307      	strlt	r3, [sp, #28]
 80019c6:	bfb8      	it	lt
 80019c8:	9204      	strlt	r2, [sp, #16]
 80019ca:	7823      	ldrb	r3, [r4, #0]
 80019cc:	2b2e      	cmp	r3, #46	; 0x2e
 80019ce:	d10c      	bne.n	80019ea <_vfiprintf_r+0x15a>
 80019d0:	7863      	ldrb	r3, [r4, #1]
 80019d2:	2b2a      	cmp	r3, #42	; 0x2a
 80019d4:	d134      	bne.n	8001a40 <_vfiprintf_r+0x1b0>
 80019d6:	9b03      	ldr	r3, [sp, #12]
 80019d8:	1d1a      	adds	r2, r3, #4
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	9203      	str	r2, [sp, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bfb8      	it	lt
 80019e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80019e6:	3402      	adds	r4, #2
 80019e8:	9305      	str	r3, [sp, #20]
 80019ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001ab4 <_vfiprintf_r+0x224>
 80019ee:	7821      	ldrb	r1, [r4, #0]
 80019f0:	2203      	movs	r2, #3
 80019f2:	4650      	mov	r0, sl
 80019f4:	f7fe fc04 	bl	8000200 <memchr>
 80019f8:	b138      	cbz	r0, 8001a0a <_vfiprintf_r+0x17a>
 80019fa:	9b04      	ldr	r3, [sp, #16]
 80019fc:	eba0 000a 	sub.w	r0, r0, sl
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	4082      	lsls	r2, r0
 8001a04:	4313      	orrs	r3, r2
 8001a06:	3401      	adds	r4, #1
 8001a08:	9304      	str	r3, [sp, #16]
 8001a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a0e:	482a      	ldr	r0, [pc, #168]	; (8001ab8 <_vfiprintf_r+0x228>)
 8001a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a14:	2206      	movs	r2, #6
 8001a16:	f7fe fbf3 	bl	8000200 <memchr>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d03f      	beq.n	8001a9e <_vfiprintf_r+0x20e>
 8001a1e:	4b27      	ldr	r3, [pc, #156]	; (8001abc <_vfiprintf_r+0x22c>)
 8001a20:	bb1b      	cbnz	r3, 8001a6a <_vfiprintf_r+0x1da>
 8001a22:	9b03      	ldr	r3, [sp, #12]
 8001a24:	3307      	adds	r3, #7
 8001a26:	f023 0307 	bic.w	r3, r3, #7
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	9303      	str	r3, [sp, #12]
 8001a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a30:	443b      	add	r3, r7
 8001a32:	9309      	str	r3, [sp, #36]	; 0x24
 8001a34:	e768      	b.n	8001908 <_vfiprintf_r+0x78>
 8001a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	e7a6      	b.n	800198e <_vfiprintf_r+0xfe>
 8001a40:	2300      	movs	r3, #0
 8001a42:	3401      	adds	r4, #1
 8001a44:	9305      	str	r3, [sp, #20]
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 0c0a 	mov.w	ip, #10
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a52:	3a30      	subs	r2, #48	; 0x30
 8001a54:	2a09      	cmp	r2, #9
 8001a56:	d903      	bls.n	8001a60 <_vfiprintf_r+0x1d0>
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0c6      	beq.n	80019ea <_vfiprintf_r+0x15a>
 8001a5c:	9105      	str	r1, [sp, #20]
 8001a5e:	e7c4      	b.n	80019ea <_vfiprintf_r+0x15a>
 8001a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a64:	4604      	mov	r4, r0
 8001a66:	2301      	movs	r3, #1
 8001a68:	e7f0      	b.n	8001a4c <_vfiprintf_r+0x1bc>
 8001a6a:	ab03      	add	r3, sp, #12
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	462a      	mov	r2, r5
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_vfiprintf_r+0x230>)
 8001a72:	a904      	add	r1, sp, #16
 8001a74:	4630      	mov	r0, r6
 8001a76:	f3af 8000 	nop.w
 8001a7a:	4607      	mov	r7, r0
 8001a7c:	1c78      	adds	r0, r7, #1
 8001a7e:	d1d6      	bne.n	8001a2e <_vfiprintf_r+0x19e>
 8001a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a82:	07d9      	lsls	r1, r3, #31
 8001a84:	d405      	bmi.n	8001a92 <_vfiprintf_r+0x202>
 8001a86:	89ab      	ldrh	r3, [r5, #12]
 8001a88:	059a      	lsls	r2, r3, #22
 8001a8a:	d402      	bmi.n	8001a92 <_vfiprintf_r+0x202>
 8001a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a8e:	f7ff fddf 	bl	8001650 <__retarget_lock_release_recursive>
 8001a92:	89ab      	ldrh	r3, [r5, #12]
 8001a94:	065b      	lsls	r3, r3, #25
 8001a96:	f53f af1d 	bmi.w	80018d4 <_vfiprintf_r+0x44>
 8001a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a9c:	e71c      	b.n	80018d8 <_vfiprintf_r+0x48>
 8001a9e:	ab03      	add	r3, sp, #12
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	462a      	mov	r2, r5
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <_vfiprintf_r+0x230>)
 8001aa6:	a904      	add	r1, sp, #16
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f000 f879 	bl	8001ba0 <_printf_i>
 8001aae:	e7e4      	b.n	8001a7a <_vfiprintf_r+0x1ea>
 8001ab0:	08002147 	.word	0x08002147
 8001ab4:	0800214d 	.word	0x0800214d
 8001ab8:	08002151 	.word	0x08002151
 8001abc:	00000000 	.word	0x00000000
 8001ac0:	0800186b 	.word	0x0800186b

08001ac4 <_printf_common>:
 8001ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ac8:	4616      	mov	r6, r2
 8001aca:	4699      	mov	r9, r3
 8001acc:	688a      	ldr	r2, [r1, #8]
 8001ace:	690b      	ldr	r3, [r1, #16]
 8001ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	bfb8      	it	lt
 8001ad8:	4613      	movlt	r3, r2
 8001ada:	6033      	str	r3, [r6, #0]
 8001adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ae0:	4607      	mov	r7, r0
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	b10a      	cbz	r2, 8001aea <_printf_common+0x26>
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	6033      	str	r3, [r6, #0]
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	0699      	lsls	r1, r3, #26
 8001aee:	bf42      	ittt	mi
 8001af0:	6833      	ldrmi	r3, [r6, #0]
 8001af2:	3302      	addmi	r3, #2
 8001af4:	6033      	strmi	r3, [r6, #0]
 8001af6:	6825      	ldr	r5, [r4, #0]
 8001af8:	f015 0506 	ands.w	r5, r5, #6
 8001afc:	d106      	bne.n	8001b0c <_printf_common+0x48>
 8001afe:	f104 0a19 	add.w	sl, r4, #25
 8001b02:	68e3      	ldr	r3, [r4, #12]
 8001b04:	6832      	ldr	r2, [r6, #0]
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	42ab      	cmp	r3, r5
 8001b0a:	dc26      	bgt.n	8001b5a <_printf_common+0x96>
 8001b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b10:	1e13      	subs	r3, r2, #0
 8001b12:	6822      	ldr	r2, [r4, #0]
 8001b14:	bf18      	it	ne
 8001b16:	2301      	movne	r3, #1
 8001b18:	0692      	lsls	r2, r2, #26
 8001b1a:	d42b      	bmi.n	8001b74 <_printf_common+0xb0>
 8001b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b20:	4649      	mov	r1, r9
 8001b22:	4638      	mov	r0, r7
 8001b24:	47c0      	blx	r8
 8001b26:	3001      	adds	r0, #1
 8001b28:	d01e      	beq.n	8001b68 <_printf_common+0xa4>
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	6922      	ldr	r2, [r4, #16]
 8001b2e:	f003 0306 	and.w	r3, r3, #6
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf02      	ittt	eq
 8001b36:	68e5      	ldreq	r5, [r4, #12]
 8001b38:	6833      	ldreq	r3, [r6, #0]
 8001b3a:	1aed      	subeq	r5, r5, r3
 8001b3c:	68a3      	ldr	r3, [r4, #8]
 8001b3e:	bf0c      	ite	eq
 8001b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b44:	2500      	movne	r5, #0
 8001b46:	4293      	cmp	r3, r2
 8001b48:	bfc4      	itt	gt
 8001b4a:	1a9b      	subgt	r3, r3, r2
 8001b4c:	18ed      	addgt	r5, r5, r3
 8001b4e:	2600      	movs	r6, #0
 8001b50:	341a      	adds	r4, #26
 8001b52:	42b5      	cmp	r5, r6
 8001b54:	d11a      	bne.n	8001b8c <_printf_common+0xc8>
 8001b56:	2000      	movs	r0, #0
 8001b58:	e008      	b.n	8001b6c <_printf_common+0xa8>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4652      	mov	r2, sl
 8001b5e:	4649      	mov	r1, r9
 8001b60:	4638      	mov	r0, r7
 8001b62:	47c0      	blx	r8
 8001b64:	3001      	adds	r0, #1
 8001b66:	d103      	bne.n	8001b70 <_printf_common+0xac>
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b70:	3501      	adds	r5, #1
 8001b72:	e7c6      	b.n	8001b02 <_printf_common+0x3e>
 8001b74:	18e1      	adds	r1, r4, r3
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	2030      	movs	r0, #48	; 0x30
 8001b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b7e:	4422      	add	r2, r4
 8001b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b88:	3302      	adds	r3, #2
 8001b8a:	e7c7      	b.n	8001b1c <_printf_common+0x58>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	4622      	mov	r2, r4
 8001b90:	4649      	mov	r1, r9
 8001b92:	4638      	mov	r0, r7
 8001b94:	47c0      	blx	r8
 8001b96:	3001      	adds	r0, #1
 8001b98:	d0e6      	beq.n	8001b68 <_printf_common+0xa4>
 8001b9a:	3601      	adds	r6, #1
 8001b9c:	e7d9      	b.n	8001b52 <_printf_common+0x8e>
	...

08001ba0 <_printf_i>:
 8001ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ba4:	7e0f      	ldrb	r7, [r1, #24]
 8001ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ba8:	2f78      	cmp	r7, #120	; 0x78
 8001baa:	4691      	mov	r9, r2
 8001bac:	4680      	mov	r8, r0
 8001bae:	460c      	mov	r4, r1
 8001bb0:	469a      	mov	sl, r3
 8001bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001bb6:	d807      	bhi.n	8001bc8 <_printf_i+0x28>
 8001bb8:	2f62      	cmp	r7, #98	; 0x62
 8001bba:	d80a      	bhi.n	8001bd2 <_printf_i+0x32>
 8001bbc:	2f00      	cmp	r7, #0
 8001bbe:	f000 80d4 	beq.w	8001d6a <_printf_i+0x1ca>
 8001bc2:	2f58      	cmp	r7, #88	; 0x58
 8001bc4:	f000 80c0 	beq.w	8001d48 <_printf_i+0x1a8>
 8001bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001bd0:	e03a      	b.n	8001c48 <_printf_i+0xa8>
 8001bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001bd6:	2b15      	cmp	r3, #21
 8001bd8:	d8f6      	bhi.n	8001bc8 <_printf_i+0x28>
 8001bda:	a101      	add	r1, pc, #4	; (adr r1, 8001be0 <_printf_i+0x40>)
 8001bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001be0:	08001c39 	.word	0x08001c39
 8001be4:	08001c4d 	.word	0x08001c4d
 8001be8:	08001bc9 	.word	0x08001bc9
 8001bec:	08001bc9 	.word	0x08001bc9
 8001bf0:	08001bc9 	.word	0x08001bc9
 8001bf4:	08001bc9 	.word	0x08001bc9
 8001bf8:	08001c4d 	.word	0x08001c4d
 8001bfc:	08001bc9 	.word	0x08001bc9
 8001c00:	08001bc9 	.word	0x08001bc9
 8001c04:	08001bc9 	.word	0x08001bc9
 8001c08:	08001bc9 	.word	0x08001bc9
 8001c0c:	08001d51 	.word	0x08001d51
 8001c10:	08001c79 	.word	0x08001c79
 8001c14:	08001d0b 	.word	0x08001d0b
 8001c18:	08001bc9 	.word	0x08001bc9
 8001c1c:	08001bc9 	.word	0x08001bc9
 8001c20:	08001d73 	.word	0x08001d73
 8001c24:	08001bc9 	.word	0x08001bc9
 8001c28:	08001c79 	.word	0x08001c79
 8001c2c:	08001bc9 	.word	0x08001bc9
 8001c30:	08001bc9 	.word	0x08001bc9
 8001c34:	08001d13 	.word	0x08001d13
 8001c38:	682b      	ldr	r3, [r5, #0]
 8001c3a:	1d1a      	adds	r2, r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	602a      	str	r2, [r5, #0]
 8001c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e09f      	b.n	8001d8c <_printf_i+0x1ec>
 8001c4c:	6820      	ldr	r0, [r4, #0]
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	0607      	lsls	r7, r0, #24
 8001c52:	f103 0104 	add.w	r1, r3, #4
 8001c56:	6029      	str	r1, [r5, #0]
 8001c58:	d501      	bpl.n	8001c5e <_printf_i+0xbe>
 8001c5a:	681e      	ldr	r6, [r3, #0]
 8001c5c:	e003      	b.n	8001c66 <_printf_i+0xc6>
 8001c5e:	0646      	lsls	r6, r0, #25
 8001c60:	d5fb      	bpl.n	8001c5a <_printf_i+0xba>
 8001c62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001c66:	2e00      	cmp	r6, #0
 8001c68:	da03      	bge.n	8001c72 <_printf_i+0xd2>
 8001c6a:	232d      	movs	r3, #45	; 0x2d
 8001c6c:	4276      	negs	r6, r6
 8001c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c72:	485a      	ldr	r0, [pc, #360]	; (8001ddc <_printf_i+0x23c>)
 8001c74:	230a      	movs	r3, #10
 8001c76:	e012      	b.n	8001c9e <_printf_i+0xfe>
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	6820      	ldr	r0, [r4, #0]
 8001c7c:	1d19      	adds	r1, r3, #4
 8001c7e:	6029      	str	r1, [r5, #0]
 8001c80:	0605      	lsls	r5, r0, #24
 8001c82:	d501      	bpl.n	8001c88 <_printf_i+0xe8>
 8001c84:	681e      	ldr	r6, [r3, #0]
 8001c86:	e002      	b.n	8001c8e <_printf_i+0xee>
 8001c88:	0641      	lsls	r1, r0, #25
 8001c8a:	d5fb      	bpl.n	8001c84 <_printf_i+0xe4>
 8001c8c:	881e      	ldrh	r6, [r3, #0]
 8001c8e:	4853      	ldr	r0, [pc, #332]	; (8001ddc <_printf_i+0x23c>)
 8001c90:	2f6f      	cmp	r7, #111	; 0x6f
 8001c92:	bf0c      	ite	eq
 8001c94:	2308      	moveq	r3, #8
 8001c96:	230a      	movne	r3, #10
 8001c98:	2100      	movs	r1, #0
 8001c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c9e:	6865      	ldr	r5, [r4, #4]
 8001ca0:	60a5      	str	r5, [r4, #8]
 8001ca2:	2d00      	cmp	r5, #0
 8001ca4:	bfa2      	ittt	ge
 8001ca6:	6821      	ldrge	r1, [r4, #0]
 8001ca8:	f021 0104 	bicge.w	r1, r1, #4
 8001cac:	6021      	strge	r1, [r4, #0]
 8001cae:	b90e      	cbnz	r6, 8001cb4 <_printf_i+0x114>
 8001cb0:	2d00      	cmp	r5, #0
 8001cb2:	d04b      	beq.n	8001d4c <_printf_i+0x1ac>
 8001cb4:	4615      	mov	r5, r2
 8001cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8001cba:	fb03 6711 	mls	r7, r3, r1, r6
 8001cbe:	5dc7      	ldrb	r7, [r0, r7]
 8001cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001cc4:	4637      	mov	r7, r6
 8001cc6:	42bb      	cmp	r3, r7
 8001cc8:	460e      	mov	r6, r1
 8001cca:	d9f4      	bls.n	8001cb6 <_printf_i+0x116>
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d10b      	bne.n	8001ce8 <_printf_i+0x148>
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	07de      	lsls	r6, r3, #31
 8001cd4:	d508      	bpl.n	8001ce8 <_printf_i+0x148>
 8001cd6:	6923      	ldr	r3, [r4, #16]
 8001cd8:	6861      	ldr	r1, [r4, #4]
 8001cda:	4299      	cmp	r1, r3
 8001cdc:	bfde      	ittt	le
 8001cde:	2330      	movle	r3, #48	; 0x30
 8001ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ce8:	1b52      	subs	r2, r2, r5
 8001cea:	6122      	str	r2, [r4, #16]
 8001cec:	f8cd a000 	str.w	sl, [sp]
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	aa03      	add	r2, sp, #12
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	f7ff fee4 	bl	8001ac4 <_printf_common>
 8001cfc:	3001      	adds	r0, #1
 8001cfe:	d14a      	bne.n	8001d96 <_printf_i+0x1f6>
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	b004      	add	sp, #16
 8001d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	6023      	str	r3, [r4, #0]
 8001d12:	4833      	ldr	r0, [pc, #204]	; (8001de0 <_printf_i+0x240>)
 8001d14:	2778      	movs	r7, #120	; 0x78
 8001d16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	6829      	ldr	r1, [r5, #0]
 8001d1e:	061f      	lsls	r7, r3, #24
 8001d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8001d24:	d402      	bmi.n	8001d2c <_printf_i+0x18c>
 8001d26:	065f      	lsls	r7, r3, #25
 8001d28:	bf48      	it	mi
 8001d2a:	b2b6      	uxthmi	r6, r6
 8001d2c:	07df      	lsls	r7, r3, #31
 8001d2e:	bf48      	it	mi
 8001d30:	f043 0320 	orrmi.w	r3, r3, #32
 8001d34:	6029      	str	r1, [r5, #0]
 8001d36:	bf48      	it	mi
 8001d38:	6023      	strmi	r3, [r4, #0]
 8001d3a:	b91e      	cbnz	r6, 8001d44 <_printf_i+0x1a4>
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	f023 0320 	bic.w	r3, r3, #32
 8001d42:	6023      	str	r3, [r4, #0]
 8001d44:	2310      	movs	r3, #16
 8001d46:	e7a7      	b.n	8001c98 <_printf_i+0xf8>
 8001d48:	4824      	ldr	r0, [pc, #144]	; (8001ddc <_printf_i+0x23c>)
 8001d4a:	e7e4      	b.n	8001d16 <_printf_i+0x176>
 8001d4c:	4615      	mov	r5, r2
 8001d4e:	e7bd      	b.n	8001ccc <_printf_i+0x12c>
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	6826      	ldr	r6, [r4, #0]
 8001d54:	6961      	ldr	r1, [r4, #20]
 8001d56:	1d18      	adds	r0, r3, #4
 8001d58:	6028      	str	r0, [r5, #0]
 8001d5a:	0635      	lsls	r5, r6, #24
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	d501      	bpl.n	8001d64 <_printf_i+0x1c4>
 8001d60:	6019      	str	r1, [r3, #0]
 8001d62:	e002      	b.n	8001d6a <_printf_i+0x1ca>
 8001d64:	0670      	lsls	r0, r6, #25
 8001d66:	d5fb      	bpl.n	8001d60 <_printf_i+0x1c0>
 8001d68:	8019      	strh	r1, [r3, #0]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	6123      	str	r3, [r4, #16]
 8001d6e:	4615      	mov	r5, r2
 8001d70:	e7bc      	b.n	8001cec <_printf_i+0x14c>
 8001d72:	682b      	ldr	r3, [r5, #0]
 8001d74:	1d1a      	adds	r2, r3, #4
 8001d76:	602a      	str	r2, [r5, #0]
 8001d78:	681d      	ldr	r5, [r3, #0]
 8001d7a:	6862      	ldr	r2, [r4, #4]
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f7fe fa3e 	bl	8000200 <memchr>
 8001d84:	b108      	cbz	r0, 8001d8a <_printf_i+0x1ea>
 8001d86:	1b40      	subs	r0, r0, r5
 8001d88:	6060      	str	r0, [r4, #4]
 8001d8a:	6863      	ldr	r3, [r4, #4]
 8001d8c:	6123      	str	r3, [r4, #16]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d94:	e7aa      	b.n	8001cec <_printf_i+0x14c>
 8001d96:	6923      	ldr	r3, [r4, #16]
 8001d98:	462a      	mov	r2, r5
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	4640      	mov	r0, r8
 8001d9e:	47d0      	blx	sl
 8001da0:	3001      	adds	r0, #1
 8001da2:	d0ad      	beq.n	8001d00 <_printf_i+0x160>
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	079b      	lsls	r3, r3, #30
 8001da8:	d413      	bmi.n	8001dd2 <_printf_i+0x232>
 8001daa:	68e0      	ldr	r0, [r4, #12]
 8001dac:	9b03      	ldr	r3, [sp, #12]
 8001dae:	4298      	cmp	r0, r3
 8001db0:	bfb8      	it	lt
 8001db2:	4618      	movlt	r0, r3
 8001db4:	e7a6      	b.n	8001d04 <_printf_i+0x164>
 8001db6:	2301      	movs	r3, #1
 8001db8:	4632      	mov	r2, r6
 8001dba:	4649      	mov	r1, r9
 8001dbc:	4640      	mov	r0, r8
 8001dbe:	47d0      	blx	sl
 8001dc0:	3001      	adds	r0, #1
 8001dc2:	d09d      	beq.n	8001d00 <_printf_i+0x160>
 8001dc4:	3501      	adds	r5, #1
 8001dc6:	68e3      	ldr	r3, [r4, #12]
 8001dc8:	9903      	ldr	r1, [sp, #12]
 8001dca:	1a5b      	subs	r3, r3, r1
 8001dcc:	42ab      	cmp	r3, r5
 8001dce:	dcf2      	bgt.n	8001db6 <_printf_i+0x216>
 8001dd0:	e7eb      	b.n	8001daa <_printf_i+0x20a>
 8001dd2:	2500      	movs	r5, #0
 8001dd4:	f104 0619 	add.w	r6, r4, #25
 8001dd8:	e7f5      	b.n	8001dc6 <_printf_i+0x226>
 8001dda:	bf00      	nop
 8001ddc:	08002158 	.word	0x08002158
 8001de0:	08002169 	.word	0x08002169

08001de4 <__sflush_r>:
 8001de4:	898a      	ldrh	r2, [r1, #12]
 8001de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de8:	4605      	mov	r5, r0
 8001dea:	0710      	lsls	r0, r2, #28
 8001dec:	460c      	mov	r4, r1
 8001dee:	d457      	bmi.n	8001ea0 <__sflush_r+0xbc>
 8001df0:	684b      	ldr	r3, [r1, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dc04      	bgt.n	8001e00 <__sflush_r+0x1c>
 8001df6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	dc01      	bgt.n	8001e00 <__sflush_r+0x1c>
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e02:	2e00      	cmp	r6, #0
 8001e04:	d0fa      	beq.n	8001dfc <__sflush_r+0x18>
 8001e06:	2300      	movs	r3, #0
 8001e08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e0c:	682f      	ldr	r7, [r5, #0]
 8001e0e:	6a21      	ldr	r1, [r4, #32]
 8001e10:	602b      	str	r3, [r5, #0]
 8001e12:	d032      	beq.n	8001e7a <__sflush_r+0x96>
 8001e14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	075a      	lsls	r2, r3, #29
 8001e1a:	d505      	bpl.n	8001e28 <__sflush_r+0x44>
 8001e1c:	6863      	ldr	r3, [r4, #4]
 8001e1e:	1ac0      	subs	r0, r0, r3
 8001e20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e22:	b10b      	cbz	r3, 8001e28 <__sflush_r+0x44>
 8001e24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e26:	1ac0      	subs	r0, r0, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e2e:	6a21      	ldr	r1, [r4, #32]
 8001e30:	4628      	mov	r0, r5
 8001e32:	47b0      	blx	r6
 8001e34:	1c43      	adds	r3, r0, #1
 8001e36:	89a3      	ldrh	r3, [r4, #12]
 8001e38:	d106      	bne.n	8001e48 <__sflush_r+0x64>
 8001e3a:	6829      	ldr	r1, [r5, #0]
 8001e3c:	291d      	cmp	r1, #29
 8001e3e:	d82b      	bhi.n	8001e98 <__sflush_r+0xb4>
 8001e40:	4a28      	ldr	r2, [pc, #160]	; (8001ee4 <__sflush_r+0x100>)
 8001e42:	410a      	asrs	r2, r1
 8001e44:	07d6      	lsls	r6, r2, #31
 8001e46:	d427      	bmi.n	8001e98 <__sflush_r+0xb4>
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6062      	str	r2, [r4, #4]
 8001e4c:	04d9      	lsls	r1, r3, #19
 8001e4e:	6922      	ldr	r2, [r4, #16]
 8001e50:	6022      	str	r2, [r4, #0]
 8001e52:	d504      	bpl.n	8001e5e <__sflush_r+0x7a>
 8001e54:	1c42      	adds	r2, r0, #1
 8001e56:	d101      	bne.n	8001e5c <__sflush_r+0x78>
 8001e58:	682b      	ldr	r3, [r5, #0]
 8001e5a:	b903      	cbnz	r3, 8001e5e <__sflush_r+0x7a>
 8001e5c:	6560      	str	r0, [r4, #84]	; 0x54
 8001e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e60:	602f      	str	r7, [r5, #0]
 8001e62:	2900      	cmp	r1, #0
 8001e64:	d0ca      	beq.n	8001dfc <__sflush_r+0x18>
 8001e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e6a:	4299      	cmp	r1, r3
 8001e6c:	d002      	beq.n	8001e74 <__sflush_r+0x90>
 8001e6e:	4628      	mov	r0, r5
 8001e70:	f7ff fbf0 	bl	8001654 <_free_r>
 8001e74:	2000      	movs	r0, #0
 8001e76:	6360      	str	r0, [r4, #52]	; 0x34
 8001e78:	e7c1      	b.n	8001dfe <__sflush_r+0x1a>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	47b0      	blx	r6
 8001e80:	1c41      	adds	r1, r0, #1
 8001e82:	d1c8      	bne.n	8001e16 <__sflush_r+0x32>
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0c5      	beq.n	8001e16 <__sflush_r+0x32>
 8001e8a:	2b1d      	cmp	r3, #29
 8001e8c:	d001      	beq.n	8001e92 <__sflush_r+0xae>
 8001e8e:	2b16      	cmp	r3, #22
 8001e90:	d101      	bne.n	8001e96 <__sflush_r+0xb2>
 8001e92:	602f      	str	r7, [r5, #0]
 8001e94:	e7b2      	b.n	8001dfc <__sflush_r+0x18>
 8001e96:	89a3      	ldrh	r3, [r4, #12]
 8001e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9c:	81a3      	strh	r3, [r4, #12]
 8001e9e:	e7ae      	b.n	8001dfe <__sflush_r+0x1a>
 8001ea0:	690f      	ldr	r7, [r1, #16]
 8001ea2:	2f00      	cmp	r7, #0
 8001ea4:	d0aa      	beq.n	8001dfc <__sflush_r+0x18>
 8001ea6:	0793      	lsls	r3, r2, #30
 8001ea8:	680e      	ldr	r6, [r1, #0]
 8001eaa:	bf08      	it	eq
 8001eac:	694b      	ldreq	r3, [r1, #20]
 8001eae:	600f      	str	r7, [r1, #0]
 8001eb0:	bf18      	it	ne
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	1bf6      	subs	r6, r6, r7
 8001eb6:	608b      	str	r3, [r1, #8]
 8001eb8:	2e00      	cmp	r6, #0
 8001eba:	dd9f      	ble.n	8001dfc <__sflush_r+0x18>
 8001ebc:	6a21      	ldr	r1, [r4, #32]
 8001ebe:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001ec2:	4633      	mov	r3, r6
 8001ec4:	463a      	mov	r2, r7
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	47e0      	blx	ip
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	dc06      	bgt.n	8001edc <__sflush_r+0xf8>
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed4:	81a3      	strh	r3, [r4, #12]
 8001ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eda:	e790      	b.n	8001dfe <__sflush_r+0x1a>
 8001edc:	4407      	add	r7, r0
 8001ede:	1a36      	subs	r6, r6, r0
 8001ee0:	e7ea      	b.n	8001eb8 <__sflush_r+0xd4>
 8001ee2:	bf00      	nop
 8001ee4:	dfbffffe 	.word	0xdfbffffe

08001ee8 <_fflush_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	690b      	ldr	r3, [r1, #16]
 8001eec:	4605      	mov	r5, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	b913      	cbnz	r3, 8001ef8 <_fflush_r+0x10>
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
 8001ef8:	b118      	cbz	r0, 8001f02 <_fflush_r+0x1a>
 8001efa:	6a03      	ldr	r3, [r0, #32]
 8001efc:	b90b      	cbnz	r3, 8001f02 <_fflush_r+0x1a>
 8001efe:	f7ff f9b1 	bl	8001264 <__sinit>
 8001f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f3      	beq.n	8001ef2 <_fflush_r+0xa>
 8001f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f0c:	07d0      	lsls	r0, r2, #31
 8001f0e:	d404      	bmi.n	8001f1a <_fflush_r+0x32>
 8001f10:	0599      	lsls	r1, r3, #22
 8001f12:	d402      	bmi.n	8001f1a <_fflush_r+0x32>
 8001f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f16:	f7ff fb9a 	bl	800164e <__retarget_lock_acquire_recursive>
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	f7ff ff61 	bl	8001de4 <__sflush_r>
 8001f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f24:	07da      	lsls	r2, r3, #31
 8001f26:	4605      	mov	r5, r0
 8001f28:	d4e4      	bmi.n	8001ef4 <_fflush_r+0xc>
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	059b      	lsls	r3, r3, #22
 8001f2e:	d4e1      	bmi.n	8001ef4 <_fflush_r+0xc>
 8001f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f32:	f7ff fb8d 	bl	8001650 <__retarget_lock_release_recursive>
 8001f36:	e7dd      	b.n	8001ef4 <_fflush_r+0xc>

08001f38 <__swhatbuf_r>:
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f40:	2900      	cmp	r1, #0
 8001f42:	b096      	sub	sp, #88	; 0x58
 8001f44:	4615      	mov	r5, r2
 8001f46:	461e      	mov	r6, r3
 8001f48:	da0d      	bge.n	8001f66 <__swhatbuf_r+0x2e>
 8001f4a:	89a3      	ldrh	r3, [r4, #12]
 8001f4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	bf0c      	ite	eq
 8001f56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001f5a:	2340      	movne	r3, #64	; 0x40
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	6031      	str	r1, [r6, #0]
 8001f60:	602b      	str	r3, [r5, #0]
 8001f62:	b016      	add	sp, #88	; 0x58
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
 8001f66:	466a      	mov	r2, sp
 8001f68:	f000 f848 	bl	8001ffc <_fstat_r>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	dbec      	blt.n	8001f4a <__swhatbuf_r+0x12>
 8001f70:	9901      	ldr	r1, [sp, #4]
 8001f72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001f76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001f7a:	4259      	negs	r1, r3
 8001f7c:	4159      	adcs	r1, r3
 8001f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f82:	e7eb      	b.n	8001f5c <__swhatbuf_r+0x24>

08001f84 <__smakebuf_r>:
 8001f84:	898b      	ldrh	r3, [r1, #12]
 8001f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f88:	079d      	lsls	r5, r3, #30
 8001f8a:	4606      	mov	r6, r0
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	d507      	bpl.n	8001fa0 <__smakebuf_r+0x1c>
 8001f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	6123      	str	r3, [r4, #16]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	6163      	str	r3, [r4, #20]
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
 8001fa0:	ab01      	add	r3, sp, #4
 8001fa2:	466a      	mov	r2, sp
 8001fa4:	f7ff ffc8 	bl	8001f38 <__swhatbuf_r>
 8001fa8:	9900      	ldr	r1, [sp, #0]
 8001faa:	4605      	mov	r5, r0
 8001fac:	4630      	mov	r0, r6
 8001fae:	f7ff fbbb 	bl	8001728 <_malloc_r>
 8001fb2:	b948      	cbnz	r0, 8001fc8 <__smakebuf_r+0x44>
 8001fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fb8:	059a      	lsls	r2, r3, #22
 8001fba:	d4ef      	bmi.n	8001f9c <__smakebuf_r+0x18>
 8001fbc:	f023 0303 	bic.w	r3, r3, #3
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	81a3      	strh	r3, [r4, #12]
 8001fc6:	e7e3      	b.n	8001f90 <__smakebuf_r+0xc>
 8001fc8:	89a3      	ldrh	r3, [r4, #12]
 8001fca:	6020      	str	r0, [r4, #0]
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	81a3      	strh	r3, [r4, #12]
 8001fd2:	9b00      	ldr	r3, [sp, #0]
 8001fd4:	6163      	str	r3, [r4, #20]
 8001fd6:	9b01      	ldr	r3, [sp, #4]
 8001fd8:	6120      	str	r0, [r4, #16]
 8001fda:	b15b      	cbz	r3, 8001ff4 <__smakebuf_r+0x70>
 8001fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	f000 f81d 	bl	8002020 <_isatty_r>
 8001fe6:	b128      	cbz	r0, 8001ff4 <__smakebuf_r+0x70>
 8001fe8:	89a3      	ldrh	r3, [r4, #12]
 8001fea:	f023 0303 	bic.w	r3, r3, #3
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	81a3      	strh	r3, [r4, #12]
 8001ff4:	89a3      	ldrh	r3, [r4, #12]
 8001ff6:	431d      	orrs	r5, r3
 8001ff8:	81a5      	strh	r5, [r4, #12]
 8001ffa:	e7cf      	b.n	8001f9c <__smakebuf_r+0x18>

08001ffc <_fstat_r>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4d07      	ldr	r5, [pc, #28]	; (800201c <_fstat_r+0x20>)
 8002000:	2300      	movs	r3, #0
 8002002:	4604      	mov	r4, r0
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	602b      	str	r3, [r5, #0]
 800200a:	f7fe fc4d 	bl	80008a8 <_fstat>
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	d102      	bne.n	8002018 <_fstat_r+0x1c>
 8002012:	682b      	ldr	r3, [r5, #0]
 8002014:	b103      	cbz	r3, 8002018 <_fstat_r+0x1c>
 8002016:	6023      	str	r3, [r4, #0]
 8002018:	bd38      	pop	{r3, r4, r5, pc}
 800201a:	bf00      	nop
 800201c:	200001b8 	.word	0x200001b8

08002020 <_isatty_r>:
 8002020:	b538      	push	{r3, r4, r5, lr}
 8002022:	4d06      	ldr	r5, [pc, #24]	; (800203c <_isatty_r+0x1c>)
 8002024:	2300      	movs	r3, #0
 8002026:	4604      	mov	r4, r0
 8002028:	4608      	mov	r0, r1
 800202a:	602b      	str	r3, [r5, #0]
 800202c:	f7fe fc4b 	bl	80008c6 <_isatty>
 8002030:	1c43      	adds	r3, r0, #1
 8002032:	d102      	bne.n	800203a <_isatty_r+0x1a>
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	b103      	cbz	r3, 800203a <_isatty_r+0x1a>
 8002038:	6023      	str	r3, [r4, #0]
 800203a:	bd38      	pop	{r3, r4, r5, pc}
 800203c:	200001b8 	.word	0x200001b8

08002040 <_sbrk_r>:
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4d06      	ldr	r5, [pc, #24]	; (800205c <_sbrk_r+0x1c>)
 8002044:	2300      	movs	r3, #0
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	602b      	str	r3, [r5, #0]
 800204c:	f7fe fc52 	bl	80008f4 <_sbrk>
 8002050:	1c43      	adds	r3, r0, #1
 8002052:	d102      	bne.n	800205a <_sbrk_r+0x1a>
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	b103      	cbz	r3, 800205a <_sbrk_r+0x1a>
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	bd38      	pop	{r3, r4, r5, pc}
 800205c:	200001b8 	.word	0x200001b8

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	bf00      	nop
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr
