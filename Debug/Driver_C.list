
Driver_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cd0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001e80  08001e80  00011e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ef8  08001ef8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001ef8  08001ef8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ef8  08001ef8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001efc  08001efc  00011efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001b8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  00020070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001fd0  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000083d  00000000  00000000  000220ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002a0  00000000  00000000  000228f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001eb  00000000  00000000  00022b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003a4f  00000000  00000000  00022d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002e4f  00000000  00000000  000267ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000cba1  00000000  00000000  00029619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001188  00000000  00000000  000361bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00037344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001e68 	.word	0x08001e68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08001e68 	.word	0x08001e68

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:
/*SPI
 * PB6 -> SCL
 * PB7 -> SDA
 */
void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
   for(uint32_t i = 0; i < 500000 / 2; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C_GPIOInits>:

void I2C_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
   GPIO_Handle_t I2CPins;
   I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
   I2CPins.GPIO_PinCfg.GPIO_PinMode = GPIO_MODE_ALFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
   I2CPins.GPIO_PinCfg.GPIO_PinAltFunMode = 4;
 80002ca:	2304      	movs	r3, #4
 80002cc:	737b      	strb	r3, [r7, #13]
   I2CPins.GPIO_PinCfg.GPIO_PinOutputType = GPIO_OP_OD;
 80002ce:	2301      	movs	r3, #1
 80002d0:	733b      	strb	r3, [r7, #12]
   I2CPins.GPIO_PinCfg.GPIO_PinPuPdControl = GPIO_PU;
 80002d2:	2301      	movs	r3, #1
 80002d4:	72fb      	strb	r3, [r7, #11]
   I2CPins.GPIO_PinCfg.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

   // SCL
   I2CPins.GPIO_PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
   GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fa8f 	bl	8000804 <GPIO_Init>

   // SDA
   I2CPins.GPIO_PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
   GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fa89 	bl	8000804 <GPIO_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
   I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
   I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	725a      	strb	r2, [r3, #9]
   I2C1Handle.I2C_Config.I2C_DeviceAddr = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	721a      	strb	r2, [r3, #8]
   I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	815a      	strh	r2, [r3, #10]
   I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

   I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 fc9a 	bl	8000c5c <I2C_Init>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000090 	.word	0x20000090
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
   GPIO_Handle_t gBTN;
   gBTN.pGPIOx = GPIOA;
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <GPIO_ButtonInit+0x2c>)
 8000340:	607b      	str	r3, [r7, #4]
   gBTN.GPIO_PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000342:	2300      	movs	r3, #0
 8000344:	723b      	strb	r3, [r7, #8]
   gBTN.GPIO_PinCfg.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	727b      	strb	r3, [r7, #9]
   gBTN.GPIO_PinCfg.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	72bb      	strb	r3, [r7, #10]
   gBTN.GPIO_PinCfg.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	72fb      	strb	r3, [r7, #11]

   GPIO_Init(&gBTN);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fa55 	bl	8000804 <GPIO_Init>

}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40020000 	.word	0x40020000

08000368 <main>:

int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af02      	add	r7, sp, #8
   I2C_GPIOInits();
 800036e:	f7ff ffa5 	bl	80002bc <I2C_GPIOInits>
   // I2C peripheral config

   GPIO_ButtonInit();
 8000372:	f7ff ffe1 	bl	8000338 <GPIO_ButtonInit>

   I2C1_Inits();
 8000376:	f7ff ffc3 	bl	8000300 <I2C1_Inits>

   // I2C IRQ Config
   I2C_IRQInterruptConfig(IRQ_NUM_I2C1_EV, ENABLE);
 800037a:	2101      	movs	r1, #1
 800037c:	201f      	movs	r0, #31
 800037e:	f000 fd01 	bl	8000d84 <I2C_IRQInterruptConfig>
   I2C_IRQInterruptConfig(IRQ_NUM_I2C1_ER, ENABLE);
 8000382:	2101      	movs	r1, #1
 8000384:	2020      	movs	r0, #32
 8000386:	f000 fcfd 	bl	8000d84 <I2C_IRQInterruptConfig>

   // EN I2C peripheral
   I2C_PeriControl(I2C1, ENABLE);
 800038a:	2101      	movs	r1, #1
 800038c:	482b      	ldr	r0, [pc, #172]	; (800043c <main+0xd4>)
 800038e:	f000 fd7b 	bl	8000e88 <I2C_PeriControl>

   I2C_MangageACKing(I2C1, I2C_ACK_ENABLE); // ACK =1 after PE =1
 8000392:	2101      	movs	r1, #1
 8000394:	4829      	ldr	r0, [pc, #164]	; (800043c <main+0xd4>)
 8000396:	f000 fd92 	bl	8000ebe <I2C_MangageACKing>

   uint8_t commandcode, len;

   while(1)
   {
      while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); //button pressed
 800039a:	bf00      	nop
 800039c:	2100      	movs	r1, #0
 800039e:	4828      	ldr	r0, [pc, #160]	; (8000440 <main+0xd8>)
 80003a0:	f000 fb7c 	bl	8000a9c <GPIO_ReadFromInputPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f8      	beq.n	800039c <main+0x34>
      delay();
 80003aa:	f7ff ff71 	bl	8000290 <delay>

      // read 1 byte len info from slave
      commandcode = 0x51;
 80003ae:	2351      	movs	r3, #81	; 0x51
 80003b0:	71fb      	strb	r3, [r7, #7]
      // write data, master send command to slave
      while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80003b2:	bf00      	nop
 80003b4:	1df9      	adds	r1, r7, #7
 80003b6:	2301      	movs	r3, #1
 80003b8:	9300      	str	r3, [sp, #0]
 80003ba:	2368      	movs	r3, #104	; 0x68
 80003bc:	2201      	movs	r2, #1
 80003be:	4821      	ldr	r0, [pc, #132]	; (8000444 <main+0xdc>)
 80003c0:	f000 fd98 	bl	8000ef4 <I2C_MasterSendDataIT>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1f4      	bne.n	80003b4 <main+0x4c>
      // read data, master read response from slave
      while(I2C_MasterReceiveDataIT(&I2C1Handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR)!= I2C_READY);
 80003ca:	bf00      	nop
 80003cc:	1db9      	adds	r1, r7, #6
 80003ce:	2301      	movs	r3, #1
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2368      	movs	r3, #104	; 0x68
 80003d4:	2201      	movs	r2, #1
 80003d6:	481b      	ldr	r0, [pc, #108]	; (8000444 <main+0xdc>)
 80003d8:	f000 fdce 	bl	8000f78 <I2C_MasterReceiveDataIT>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f4      	bne.n	80003cc <main+0x64>

      // read "length" byte data from slave
      commandcode = 0x52;
 80003e2:	2352      	movs	r3, #82	; 0x52
 80003e4:	71fb      	strb	r3, [r7, #7]
      while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80003e6:	bf00      	nop
 80003e8:	1df9      	adds	r1, r7, #7
 80003ea:	2301      	movs	r3, #1
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2368      	movs	r3, #104	; 0x68
 80003f0:	2201      	movs	r2, #1
 80003f2:	4814      	ldr	r0, [pc, #80]	; (8000444 <main+0xdc>)
 80003f4:	f000 fd7e 	bl	8000ef4 <I2C_MasterSendDataIT>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d1f4      	bne.n	80003e8 <main+0x80>

      while(I2C_MasterReceiveDataIT(&I2C1Handle, rx_buffer, len, SLAVE_ADDR, I2C_DISABLE_SR) != I2C_READY);
 80003fe:	bf00      	nop
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	2300      	movs	r3, #0
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	2368      	movs	r3, #104	; 0x68
 8000408:	490f      	ldr	r1, [pc, #60]	; (8000448 <main+0xe0>)
 800040a:	480e      	ldr	r0, [pc, #56]	; (8000444 <main+0xdc>)
 800040c:	f000 fdb4 	bl	8000f78 <I2C_MasterReceiveDataIT>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1f4      	bne.n	8000400 <main+0x98>

      // wai till rx complete
      while(rxComplt != SET)
 8000416:	bf00      	nop
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <main+0xe4>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d1fb      	bne.n	8000418 <main+0xb0>
      {
         ;
      }

      rx_buffer[len + 1] = '\0'; // gan null vào sau vị trí cuối cùng của data
 8000420:	79bb      	ldrb	r3, [r7, #6]
 8000422:	3301      	adds	r3, #1
 8000424:	4a08      	ldr	r2, [pc, #32]	; (8000448 <main+0xe0>)
 8000426:	2100      	movs	r1, #0
 8000428:	54d1      	strb	r1, [r2, r3]

      printf("Data: %s", rx_buffer);
 800042a:	4907      	ldr	r1, [pc, #28]	; (8000448 <main+0xe0>)
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <main+0xe8>)
 800042e:	f000 feaf 	bl	8001190 <iprintf>

      rxComplt = RESET;
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <main+0xe4>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
      while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); //button pressed
 8000438:	e7af      	b.n	800039a <main+0x32>
 800043a:	bf00      	nop
 800043c:	40005400 	.word	0x40005400
 8000440:	40020000 	.word	0x40020000
 8000444:	20000090 	.word	0x20000090
 8000448:	200000b8 	.word	0x200000b8
 800044c:	2000008c 	.word	0x2000008c
 8000450:	08001e80 	.word	0x08001e80

08000454 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <ITM_SendChar+0x44>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <ITM_SendChar+0x44>)
 8000464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000468:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <ITM_SendChar+0x48>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <ITM_SendChar+0x48>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000476:	bf00      	nop
 8000478:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0f8      	beq.n	8000478 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000486:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	6013      	str	r3, [r2, #0]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	e000edfc 	.word	0xe000edfc
 800049c:	e0000e00 	.word	0xe0000e00

080004a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	e00a      	b.n	80004c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004b2:	f3af 8000 	nop.w
 80004b6:	4601      	mov	r1, r0
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	60ba      	str	r2, [r7, #8]
 80004be:	b2ca      	uxtb	r2, r1
 80004c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	dbf0      	blt.n	80004b2 <_read+0x12>
  }

  return len;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b086      	sub	sp, #24
 80004de:	af00      	add	r7, sp, #0
 80004e0:	60f8      	str	r0, [r7, #12]
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e009      	b.n	8000500 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	60ba      	str	r2, [r7, #8]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ffad 	bl	8000454 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbf1      	blt.n	80004ec <_write+0x12>
  }
  return len;
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <_close>:

int _close(int file)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000538:	605a      	str	r2, [r3, #4]
  return 0;
 800053a:	2300      	movs	r3, #0
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <_isatty>:

int _isatty(int file)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
	...

08000574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <_sbrk+0x5c>)
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <_sbrk+0x60>)
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d102      	bne.n	8000596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <_sbrk+0x64>)
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <_sbrk+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d207      	bcs.n	80005b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a4:	f000 ff2c 	bl	8001400 <__errno>
 80005a8:	4603      	mov	r3, r0
 80005aa:	220c      	movs	r2, #12
 80005ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	e009      	b.n	80005c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <_sbrk+0x64>)
 80005c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c6:	68fb      	ldr	r3, [r7, #12]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20020000 	.word	0x20020000
 80005d4:	00000400 	.word	0x00000400
 80005d8:	200000d8 	.word	0x200000d8
 80005dc:	20000228 	.word	0x20000228

080005e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


  ldr   r0, =_estack
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060e:	f000 fefd 	bl	800140c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff fea9 	bl	8000368 <main>

08000616 <LoopForever>:

LoopForever:
  b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   r0, =_estack
 8000618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000624:	08001f00 	.word	0x08001f00
  ldr r2, =_sbss
 8000628:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800062c:	20000228 	.word	0x20000228

08000630 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC_IRQHandler>
	...

08000634 <GPIO_PeriClockCtrl>:
 *
 * @note			- none
 *
 */
void GPIO_PeriClockCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d162      	bne.n	800070c <GPIO_PeriClockCtrl+0xd8>
	{
		if(pGPIOx == GPIOA)				GPIOA_PCLK_EN();
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a64      	ldr	r2, [pc, #400]	; (80007dc <GPIO_PeriClockCtrl+0x1a8>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d106      	bne.n	800065c <GPIO_PeriClockCtrl+0x28>
 800064e:	4b64      	ldr	r3, [pc, #400]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a63      	ldr	r2, [pc, #396]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOF)	 	GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) 		GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH)	 	GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI) 		GPIOI_PCLK_DI();
		}
	}
 800065a:	e0b9      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOB)	 	GPIOB_PCLK_EN();
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a61      	ldr	r2, [pc, #388]	; (80007e4 <GPIO_PeriClockCtrl+0x1b0>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d106      	bne.n	8000672 <GPIO_PeriClockCtrl+0x3e>
 8000664:	4b5e      	ldr	r3, [pc, #376]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a5d      	ldr	r2, [pc, #372]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000670:	e0ae      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOC) 		GPIOC_PCLK_EN();
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a5c      	ldr	r2, [pc, #368]	; (80007e8 <GPIO_PeriClockCtrl+0x1b4>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d106      	bne.n	8000688 <GPIO_PeriClockCtrl+0x54>
 800067a:	4b59      	ldr	r3, [pc, #356]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a58      	ldr	r2, [pc, #352]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000686:	e0a3      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOD)	 	GPIOD_PCLK_EN();
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a58      	ldr	r2, [pc, #352]	; (80007ec <GPIO_PeriClockCtrl+0x1b8>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d106      	bne.n	800069e <GPIO_PeriClockCtrl+0x6a>
 8000690:	4b53      	ldr	r3, [pc, #332]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	4a52      	ldr	r2, [pc, #328]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000696:	f043 0308 	orr.w	r3, r3, #8
 800069a:	6313      	str	r3, [r2, #48]	; 0x30
	}
 800069c:	e098      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOE) 		GPIOE_PCLK_EN();
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a53      	ldr	r2, [pc, #332]	; (80007f0 <GPIO_PeriClockCtrl+0x1bc>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <GPIO_PeriClockCtrl+0x80>
 80006a6:	4b4e      	ldr	r3, [pc, #312]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a4d      	ldr	r2, [pc, #308]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
	}
 80006b2:	e08d      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOF)	 	GPIOF_PCLK_EN();
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a4f      	ldr	r2, [pc, #316]	; (80007f4 <GPIO_PeriClockCtrl+0x1c0>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d106      	bne.n	80006ca <GPIO_PeriClockCtrl+0x96>
 80006bc:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a47      	ldr	r2, [pc, #284]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80006c2:	f043 0320 	orr.w	r3, r3, #32
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
	}
 80006c8:	e082      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOG) 		GPIOG_PCLK_EN();
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a4a      	ldr	r2, [pc, #296]	; (80007f8 <GPIO_PeriClockCtrl+0x1c4>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d106      	bne.n	80006e0 <GPIO_PeriClockCtrl+0xac>
 80006d2:	4b43      	ldr	r3, [pc, #268]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a42      	ldr	r2, [pc, #264]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
	}
 80006de:	e077      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOH)	 	GPIOH_PCLK_EN();
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a46      	ldr	r2, [pc, #280]	; (80007fc <GPIO_PeriClockCtrl+0x1c8>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d106      	bne.n	80006f6 <GPIO_PeriClockCtrl+0xc2>
 80006e8:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	4a3c      	ldr	r2, [pc, #240]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80006ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f2:	6313      	str	r3, [r2, #48]	; 0x30
	}
 80006f4:	e06c      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOI) 		GPIOI_PCLK_EN();
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a41      	ldr	r2, [pc, #260]	; (8000800 <GPIO_PeriClockCtrl+0x1cc>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d168      	bne.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
 80006fe:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a37      	ldr	r2, [pc, #220]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
	}
 800070a:	e061      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		if(pGPIOx == GPIOA)				GPIOA_PCLK_DI();
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a33      	ldr	r2, [pc, #204]	; (80007dc <GPIO_PeriClockCtrl+0x1a8>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d106      	bne.n	8000722 <GPIO_PeriClockCtrl+0xee>
 8000714:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 800071a:	f023 0301 	bic.w	r3, r3, #1
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000720:	e056      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOB)	 	GPIOB_PCLK_DI();
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <GPIO_PeriClockCtrl+0x1b0>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d106      	bne.n	8000738 <GPIO_PeriClockCtrl+0x104>
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000730:	f023 0302 	bic.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000736:	e04b      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOC) 		GPIOC_PCLK_DI();
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a2b      	ldr	r2, [pc, #172]	; (80007e8 <GPIO_PeriClockCtrl+0x1b4>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d106      	bne.n	800074e <GPIO_PeriClockCtrl+0x11a>
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000746:	f023 0304 	bic.w	r3, r3, #4
 800074a:	6313      	str	r3, [r2, #48]	; 0x30
	}
 800074c:	e040      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOD)	 	GPIOD_PCLK_DI();
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a26      	ldr	r2, [pc, #152]	; (80007ec <GPIO_PeriClockCtrl+0x1b8>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d106      	bne.n	8000764 <GPIO_PeriClockCtrl+0x130>
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 800075c:	f023 0308 	bic.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000762:	e035      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOE) 		GPIOE_PCLK_DI();
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <GPIO_PeriClockCtrl+0x1bc>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d106      	bne.n	800077a <GPIO_PeriClockCtrl+0x146>
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000772:	f023 0310 	bic.w	r3, r3, #16
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000778:	e02a      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOF)	 	GPIOF_PCLK_DI();
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <GPIO_PeriClockCtrl+0x1c0>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d106      	bne.n	8000790 <GPIO_PeriClockCtrl+0x15c>
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 8000788:	f023 0320 	bic.w	r3, r3, #32
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
	}
 800078e:	e01f      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOG) 		GPIOG_PCLK_DI();
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <GPIO_PeriClockCtrl+0x1c4>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d106      	bne.n	80007a6 <GPIO_PeriClockCtrl+0x172>
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 800079e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007a2:	6313      	str	r3, [r2, #48]	; 0x30
	}
 80007a4:	e014      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOH)	 	GPIOH_PCLK_DI();
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <GPIO_PeriClockCtrl+0x1c8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d106      	bne.n	80007bc <GPIO_PeriClockCtrl+0x188>
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80007b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
	}
 80007ba:	e009      	b.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
		else if (pGPIOx == GPIOI) 		GPIOI_PCLK_DI();
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <GPIO_PeriClockCtrl+0x1cc>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d105      	bne.n	80007d0 <GPIO_PeriClockCtrl+0x19c>
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <GPIO_PeriClockCtrl+0x1ac>)
 80007ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ce:	6313      	str	r3, [r2, #48]	; 0x30
	}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40021400 	.word	0x40021400
 80007f8:	40021800 	.word	0x40021800
 80007fc:	40021c00 	.word	0x40021c00
 8000800:	40022000 	.word	0x40022000

08000804 <GPIO_Init>:

/*
 * Init and de-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	// Enable the peripheral clock
	GPIO_PeriClockCtrl(pGPIOHandle->pGPIOx, ENABLE);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff0e 	bl	8000634 <GPIO_PeriClockCtrl>

	uint32_t temp = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
	/*
	 * cfg the mode of gpio pin
	 */
	if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	2b03      	cmp	r3, #3
 8000822:	d821      	bhi.n	8000868 <GPIO_Init+0x64>
		temp = (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	795b      	ldrb	r3, [r3, #5]
 8000828:	461a      	mov	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
		//clear bit pin_num
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber); // clr 2 bit
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	4619      	mov	r1, r3
 8000842:	2303      	movs	r3, #3
 8000844:	408b      	lsls	r3, r1
 8000846:	43db      	mvns	r3, r3
 8000848:	4619      	mov	r1, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	400a      	ands	r2, r1
 8000850:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=  temp; // -> MODER : physical register
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6819      	ldr	r1, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	430a      	orrs	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e07a      	b.n	800095e <GPIO_Init+0x15a>
	}
	else {
	// interrupt
		if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	795b      	ldrb	r3, [r3, #5]
 800086c:	2b04      	cmp	r3, #4
 800086e:	d117      	bne.n	80008a0 <GPIO_Init+0x9c>
			// 1. config the FT selection register
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 8000870:	4b86      	ldr	r3, [pc, #536]	; (8000a8c <GPIO_Init+0x288>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	7912      	ldrb	r2, [r2, #4]
 8000878:	4611      	mov	r1, r2
 800087a:	2201      	movs	r2, #1
 800087c:	408a      	lsls	r2, r1
 800087e:	4611      	mov	r1, r2
 8000880:	4a82      	ldr	r2, [pc, #520]	; (8000a8c <GPIO_Init+0x288>)
 8000882:	430b      	orrs	r3, r1
 8000884:	60d3      	str	r3, [r2, #12]
			//clear the corresponding FTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 8000886:	4b81      	ldr	r3, [pc, #516]	; (8000a8c <GPIO_Init+0x288>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	7912      	ldrb	r2, [r2, #4]
 800088e:	4611      	mov	r1, r2
 8000890:	2201      	movs	r2, #1
 8000892:	408a      	lsls	r2, r1
 8000894:	43d2      	mvns	r2, r2
 8000896:	4611      	mov	r1, r2
 8000898:	4a7c      	ldr	r2, [pc, #496]	; (8000a8c <GPIO_Init+0x288>)
 800089a:	400b      	ands	r3, r1
 800089c:	6093      	str	r3, [r2, #8]
 800089e:	e035      	b.n	800090c <GPIO_Init+0x108>

		}else if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode == GPIO_MODE_IT_RT) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	2b05      	cmp	r3, #5
 80008a6:	d117      	bne.n	80008d8 <GPIO_Init+0xd4>

			// 2. config the RTSR
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 80008a8:	4b78      	ldr	r3, [pc, #480]	; (8000a8c <GPIO_Init+0x288>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	7912      	ldrb	r2, [r2, #4]
 80008b0:	4611      	mov	r1, r2
 80008b2:	2201      	movs	r2, #1
 80008b4:	408a      	lsls	r2, r1
 80008b6:	4611      	mov	r1, r2
 80008b8:	4a74      	ldr	r2, [pc, #464]	; (8000a8c <GPIO_Init+0x288>)
 80008ba:	430b      	orrs	r3, r1
 80008bc:	6093      	str	r3, [r2, #8]
			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 80008be:	4b73      	ldr	r3, [pc, #460]	; (8000a8c <GPIO_Init+0x288>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	7912      	ldrb	r2, [r2, #4]
 80008c6:	4611      	mov	r1, r2
 80008c8:	2201      	movs	r2, #1
 80008ca:	408a      	lsls	r2, r1
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	4611      	mov	r1, r2
 80008d0:	4a6e      	ldr	r2, [pc, #440]	; (8000a8c <GPIO_Init+0x288>)
 80008d2:	400b      	ands	r3, r1
 80008d4:	60d3      	str	r3, [r2, #12]
 80008d6:	e019      	b.n	800090c <GPIO_Init+0x108>

		}else if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode == GPIO_MODE_IT_FRT) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	795b      	ldrb	r3, [r3, #5]
 80008dc:	2b06      	cmp	r3, #6
 80008de:	d115      	bne.n	800090c <GPIO_Init+0x108>

			// config both FTSR and RTSR
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 80008e0:	4b6a      	ldr	r3, [pc, #424]	; (8000a8c <GPIO_Init+0x288>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	7912      	ldrb	r2, [r2, #4]
 80008e8:	4611      	mov	r1, r2
 80008ea:	2201      	movs	r2, #1
 80008ec:	408a      	lsls	r2, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	4a66      	ldr	r2, [pc, #408]	; (8000a8c <GPIO_Init+0x288>)
 80008f2:	430b      	orrs	r3, r1
 80008f4:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 80008f6:	4b65      	ldr	r3, [pc, #404]	; (8000a8c <GPIO_Init+0x288>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	7912      	ldrb	r2, [r2, #4]
 80008fe:	4611      	mov	r1, r2
 8000900:	2201      	movs	r2, #1
 8000902:	408a      	lsls	r2, r1
 8000904:	4611      	mov	r1, r2
 8000906:	4a61      	ldr	r2, [pc, #388]	; (8000a8c <GPIO_Init+0x288>)
 8000908:	430b      	orrs	r3, r1
 800090a:	6093      	str	r3, [r2, #8]
		}
		// 2. config the GPIO port selection in SYSCFG_EXTI control register

		uint8_t temp1 = pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber / 4;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	089b      	lsrs	r3, r3, #2
 8000912:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber % 4;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	f003 0303 	and.w	r3, r3, #3
 800091c:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a5b      	ldr	r2, [pc, #364]	; (8000a90 <GPIO_Init+0x28c>)
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	747b      	strb	r3, [r7, #17]

		//  before config SYSCFG, enable SYSCFG clock
		SYSCFG_PCLK_EN();
 8000928:	4b5a      	ldr	r3, [pc, #360]	; (8000a94 <GPIO_Init+0x290>)
 800092a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092c:	4a59      	ldr	r2, [pc, #356]	; (8000a94 <GPIO_Init+0x290>)
 800092e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000932:	6453      	str	r3, [r2, #68]	; 0x44

		SYSCFG->EXTICR[temp1] = portcode << (4 * temp2);
 8000934:	7c7a      	ldrb	r2, [r7, #17]
 8000936:	7cbb      	ldrb	r3, [r7, #18]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	fa02 f103 	lsl.w	r1, r2, r3
 800093e:	4a56      	ldr	r2, [pc, #344]	; (8000a98 <GPIO_Init+0x294>)
 8000940:	7cfb      	ldrb	r3, [r7, #19]
 8000942:	3302      	adds	r3, #2
 8000944:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI delivery using interrupt mask reg (IMR)
			EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber;
 8000948:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <GPIO_Init+0x288>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	7912      	ldrb	r2, [r2, #4]
 8000950:	4611      	mov	r1, r2
 8000952:	2201      	movs	r2, #1
 8000954:	408a      	lsls	r2, r1
 8000956:	4611      	mov	r1, r2
 8000958:	4a4c      	ldr	r2, [pc, #304]	; (8000a8c <GPIO_Init+0x288>)
 800095a:	430b      	orrs	r3, r1
 800095c:	6013      	str	r3, [r2, #0]


	/*
	 * cfg the speed
	 */
	temp = (pGPIOHandle->GPIO_PinCfg.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber));
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	799b      	ldrb	r3, [r3, #6]
 8000962:	461a      	mov	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	791b      	ldrb	r3, [r3, #4]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
	//clear bit pin_num
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	791b      	ldrb	r3, [r3, #4]
 800097a:	4619      	mov	r1, r3
 800097c:	2303      	movs	r3, #3
 800097e:	408b      	lsls	r3, r1
 8000980:	43db      	mvns	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	400a      	ands	r2, r1
 800098a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6899      	ldr	r1, [r3, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	430a      	orrs	r2, r1
 800099a:	609a      	str	r2, [r3, #8]


	/*
	 * cfg the pupd settings
	 */
	temp = (pGPIOHandle->GPIO_PinCfg.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	79db      	ldrb	r3, [r3, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	617b      	str	r3, [r7, #20]
	//clear bit pin_num
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2303      	movs	r3, #3
 80009bc:	408b      	lsls	r3, r1
 80009be:	43db      	mvns	r3, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	400a      	ands	r2, r1
 80009c8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68d9      	ldr	r1, [r3, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	430a      	orrs	r2, r1
 80009d8:	60da      	str	r2, [r3, #12]


	/*
	 * cfg the optype
	 */
	temp = (pGPIOHandle->GPIO_PinCfg.GPIO_PinOutputType << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7a1b      	ldrb	r3, [r3, #8]
 80009de:	461a      	mov	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	617b      	str	r3, [r7, #20]
	//clear bit pin_num
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2301      	movs	r3, #1
 80009f8:	408b      	lsls	r3, r1
 80009fa:	43db      	mvns	r3, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	400a      	ands	r2, r1
 8000a04:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6859      	ldr	r1, [r3, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	430a      	orrs	r2, r1
 8000a14:	605a      	str	r2, [r3, #4]


	/*
	 * cfg alt func
	 */
	if (pGPIOHandle->GPIO_PinCfg.GPIO_PinMode == GPIO_MODE_ALFN) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	795b      	ldrb	r3, [r3, #5]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d131      	bne.n	8000a82 <GPIO_Init+0x27e>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber / 8;		//integer
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	791b      	ldrb	r3, [r3, #4]
 8000a22:	08db      	lsrs	r3, r3, #3
 8000a24:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinCfg.GPIO_PinNumber % 8;	//remainder or balance
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	791b      	ldrb	r3, [r3, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	73fb      	strb	r3, [r7, #15]
		// clear bit
		pGPIOHandle->pGPIOx->AFR[temp1]	&= ~(0xF << (4 * temp2));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	7c3a      	ldrb	r2, [r7, #16]
 8000a36:	3208      	adds	r2, #8
 8000a38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	220f      	movs	r2, #15
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	7c3a      	ldrb	r2, [r7, #16]
 8000a50:	4001      	ands	r1, r0
 8000a52:	3208      	adds	r2, #8
 8000a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfg.GPIO_PinAltFunMode << (4 * temp2));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7c3a      	ldrb	r2, [r7, #16]
 8000a5e:	3208      	adds	r2, #8
 8000a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7a5b      	ldrb	r3, [r3, #9]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	7c3a      	ldrb	r2, [r7, #16]
 8000a7a:	4301      	orrs	r1, r0
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40013c00 	.word	0x40013c00
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40013800 	.word	0x40013800

08000a9c <GPIO_ReadFromInputPin>:

/*
 *Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber ) & 0x0000001);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	691a      	ldr	r2, [r3, #16]
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	return value;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNE_IT(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXE_IT(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
   pI2Cx->CR1 |= 1 << I2C_CR1_START;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <I2C_PeriClockCtrl>:
/*
 *  Peripheral Clock setup
 */

void I2C_PeriClockCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
   if(EnOrDi == ENABLE)
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d120      	bne.n	8000b38 <I2C_PeriClockCtrl+0x54>
   {
      if(pI2Cx == I2C1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <I2C_PeriClockCtrl+0xa0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d106      	bne.n	8000b0c <I2C_PeriClockCtrl+0x28>
         I2C1_PCLK_EN();
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
      else if(pI2Cx == I2C2)
         I2C2_PCLK_DI();
      else if(pI2Cx == I2C3)
         I2C3_PCLK_DI();
   }
}
 8000b0a:	e035      	b.n	8000b78 <I2C_PeriClockCtrl+0x94>
      else if(pI2Cx == I2C2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <I2C_PeriClockCtrl+0xa8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d106      	bne.n	8000b22 <I2C_PeriClockCtrl+0x3e>
         I2C2_PCLK_EN();
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b20:	e02a      	b.n	8000b78 <I2C_PeriClockCtrl+0x94>
      else if(pI2Cx == I2C3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <I2C_PeriClockCtrl+0xac>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d126      	bne.n	8000b78 <I2C_PeriClockCtrl+0x94>
         I2C3_PCLK_EN();
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b36:	e01f      	b.n	8000b78 <I2C_PeriClockCtrl+0x94>
      if(pI2Cx == I2C1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <I2C_PeriClockCtrl+0xa0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d106      	bne.n	8000b4e <I2C_PeriClockCtrl+0x6a>
         I2C1_PCLK_DI();
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b4c:	e014      	b.n	8000b78 <I2C_PeriClockCtrl+0x94>
      else if(pI2Cx == I2C2)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <I2C_PeriClockCtrl+0xa8>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d106      	bne.n	8000b64 <I2C_PeriClockCtrl+0x80>
         I2C2_PCLK_DI();
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b62:	e009      	b.n	8000b78 <I2C_PeriClockCtrl+0x94>
      else if(pI2Cx == I2C3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <I2C_PeriClockCtrl+0xac>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d105      	bne.n	8000b78 <I2C_PeriClockCtrl+0x94>
         I2C3_PCLK_DI();
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <I2C_PeriClockCtrl+0xa4>)
 8000b72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40005800 	.word	0x40005800
 8000b90:	40005c00 	.word	0x40005c00

08000b94 <I2C_GetPLLOutputClk>:

/*
 * Init and De-init
 */
uint32_t I2C_GetPLLOutputClk()
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
   uint32_t pllclk = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
   return pllclk;
 8000b9e:	687b      	ldr	r3, [r7, #4]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
	...

08000bac <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value()	// I2C on APB1-> PCLK1 -> f MCU
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
   uint32_t pclk1, SystemClk;
   uint8_t clksrc; // System clock switch status(bit 2,3) in RCC_CFGR
   uint8_t temp, ahb_pre, abp1_pre;

   clksrc = (RCC->CFGR >> 2) & 0X3;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <RCC_GetPCLK1Value+0x9c>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	727b      	strb	r3, [r7, #9]
   if(clksrc == 0)
 8000bc0:	7a7b      	ldrb	r3, [r7, #9]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <RCC_GetPCLK1Value+0x20>
   {
      SystemClk = 16000000;	// HSI = 16Mhz
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <RCC_GetPCLK1Value+0xa0>)
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e00b      	b.n	8000be4 <RCC_GetPCLK1Value+0x38>
   }
   else if(clksrc == 1)
 8000bcc:	7a7b      	ldrb	r3, [r7, #9]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d102      	bne.n	8000bd8 <RCC_GetPCLK1Value+0x2c>
   {
      SystemClk = 8000000; // HSE = 8Mhz;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <RCC_GetPCLK1Value+0xa4>)
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	e005      	b.n	8000be4 <RCC_GetPCLK1Value+0x38>
   }
   else if(clksrc == 2)
 8000bd8:	7a7b      	ldrb	r3, [r7, #9]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d102      	bne.n	8000be4 <RCC_GetPCLK1Value+0x38>
   {
      SystemClk = I2C_GetPLLOutputClk();
 8000bde:	f7ff ffd9 	bl	8000b94 <I2C_GetPLLOutputClk>
 8000be2:	60f8      	str	r0, [r7, #12]
   }

   temp = (RCC->CFGR >> 4) & 0xF;			// HPRE bit 4:7
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <RCC_GetPCLK1Value+0x9c>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	723b      	strb	r3, [r7, #8]
   if(temp < 8)
 8000bf2:	7a3b      	ldrb	r3, [r7, #8]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d802      	bhi.n	8000bfe <RCC_GetPCLK1Value+0x52>
   {		// 0xxx: system clock not divided -> 0 to 7
      ahb_pre = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	72fb      	strb	r3, [r7, #11]
 8000bfc:	e005      	b.n	8000c0a <RCC_GetPCLK1Value+0x5e>
   }
   else
   {
      ahb_pre = AHB_Prescaler[temp - 8];	// 1xxx more than or equal 8
 8000bfe:	7a3b      	ldrb	r3, [r7, #8]
 8000c00:	3b08      	subs	r3, #8
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <RCC_GetPCLK1Value+0xa8>)
 8000c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c08:	72fb      	strb	r3, [r7, #11]
   }

   temp = (RCC->CFGR >> 10) & 0x7;			// PPRE1 bit 12:10
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <RCC_GetPCLK1Value+0x9c>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	0a9b      	lsrs	r3, r3, #10
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	723b      	strb	r3, [r7, #8]
   if(temp < 4)
 8000c18:	7a3b      	ldrb	r3, [r7, #8]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d802      	bhi.n	8000c24 <RCC_GetPCLK1Value+0x78>
   {
      abp1_pre = 1;		// 0xxx not divided -> 0 to 3
 8000c1e:	2301      	movs	r3, #1
 8000c20:	72bb      	strb	r3, [r7, #10]
 8000c22:	e004      	b.n	8000c2e <RCC_GetPCLK1Value+0x82>
   }
   else
   {
      abp1_pre = APB1_Prescaler[temp - 4];
 8000c24:	7a3b      	ldrb	r3, [r7, #8]
 8000c26:	3b04      	subs	r3, #4
 8000c28:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <RCC_GetPCLK1Value+0xac>)
 8000c2a:	5cd3      	ldrb	r3, [r2, r3]
 8000c2c:	72bb      	strb	r3, [r7, #10]
   }
   pclk1 = (SystemClk / ahb_pre) / abp1_pre;
 8000c2e:	7afb      	ldrb	r3, [r7, #11]
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c36:	7abb      	ldrb	r3, [r7, #10]
 8000c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3c:	607b      	str	r3, [r7, #4]
   return pclk1;
 8000c3e:	687b      	ldr	r3, [r7, #4]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	00f42400 	.word	0x00f42400
 8000c50:	007a1200 	.word	0x007a1200
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000010 	.word	0x20000010

08000c5c <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    uint32_t I2C_SCLSpeed;
    uint8_t  I2C_DeviceAddr;	// 7 bit wide -> uint8_t
    uint8_t  I2C_ACKControl;
    uint16_t I2C_FMDutyCycle;
    */
   uint32_t temp = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]

   //enable the clock for the i2cx peripheral
   I2C_PeriClockCtrl(pI2CHandle->pI2Cx, ENABLE);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff38 	bl	8000ae4 <I2C_PeriClockCtrl>

   // 1. set ACK in CR1
   temp |= pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7a5b      	ldrb	r3, [r3, #9]
 8000c78:	029b      	lsls	r3, r3, #10
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
   pI2CHandle->pI2Cx->CR1 = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	601a      	str	r2, [r3, #0]

   // 2. Config the FREQ of CR2 (I2C_SCLSpeed)
   temp = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
   temp |= RCC_GetPCLK1Value() / 1000000U; 	// return 16 (Mhz)
 8000c8e:	f7ff ff8d 	bl	8000bac <RCC_GetPCLK1Value>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a38      	ldr	r2, [pc, #224]	; (8000d78 <I2C_Init+0x11c>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	0c9b      	lsrs	r3, r3, #18
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
   pI2CHandle->pI2Cx->CR2 = temp & 0x3F;		// freg 6 bit
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cac:	605a      	str	r2, [r3, #4]

   // 3. Device own address
   temp |= pI2CHandle->I2C_Config.I2C_DeviceAddr << 1;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7a1b      	ldrb	r3, [r3, #8]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
   temp |= 1 << 14;				// bit 14 always be kept at 1
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc2:	60fb      	str	r3, [r7, #12]
   pI2CHandle->pI2Cx->OAR1 = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	609a      	str	r2, [r3, #8]

   //************************
   // 4. Config Clock Control (CCR) -> using CCR 0:11 bit
   uint16_t ccr_value = 0;		// CCR is 12 bit
 8000ccc:	2300      	movs	r3, #0
 8000cce:	817b      	strh	r3, [r7, #10]
   temp = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
   if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <I2C_Init+0x120>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d80f      	bhi.n	8000cfe <I2C_Init+0xa2>
   {
      /*
       *  Standard mode: T_high = T_low= ccr_value*T_pclk, T_Scl = T_h + T_l, T= 1/f
       * -> ccr_value = f_pclk / (2 * f_Scl)
       */
      ccr_value = (RCC_GetPCLK1Value()) / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000cde:	f7ff ff65 	bl	8000bac <RCC_GetPCLK1Value>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	817b      	strh	r3, [r7, #10]
      temp |= ccr_value & (0xFFF);	// 12 bit CCR
 8000cf0:	897b      	ldrh	r3, [r7, #10]
 8000cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e012      	b.n	8000d24 <I2C_Init+0xc8>
      {
         /*
          * T_h = 16 ccr_value*T_pclk , T_l = 9 ccr_value*T_pclk
          * -> ccr_value = f / (25 f_Scl)
          */
         ccr_value = (RCC_GetPCLK1Value()) / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000cfe:	f7ff ff55 	bl	8000bac <RCC_GetPCLK1Value>
 8000d02:	4601      	mov	r1, r0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009a      	lsls	r2, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d16:	817b      	strh	r3, [r7, #10]
      }
      temp |= ccr_value & 0xFFF; 	// 12 bit CCR
 8000d18:	897b      	ldrh	r3, [r7, #10]
 8000d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
   }
   pI2CHandle->pI2Cx->CCR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	61da      	str	r2, [r3, #28]
   /*  trise = T_Scl/ T_PCLK1 +1 = f_pclk1 * T_Scl +1
    * 		= f_pclk1/ f_scl +1
    *   SM, T_SCL = 1000 nS= 1 uS -> f = 1 Mhz= 1000000
    *   FM, T_SCL = 300  nS = 300 / 10^9
    */
   if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <I2C_Init+0x120>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d809      	bhi.n	8000d4a <I2C_Init+0xee>
   {
      // Standard mode
      temp = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000d36:	f7ff ff39 	bl	8000bac <RCC_GetPCLK1Value>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <I2C_Init+0x11c>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	0c9b      	lsrs	r3, r3, #18
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e00c      	b.n	8000d64 <I2C_Init+0x108>
   }
   else
   {
      // Fast mode
      temp = ((RCC_GetPCLK1Value() * 300) / (10 ^ 9U)) + 1;
 8000d4a:	f7ff ff2f 	bl	8000bac <RCC_GetPCLK1Value>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <I2C_Init+0x124>)
 8000d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5e:	085b      	lsrs	r3, r3, #1
 8000d60:	3301      	adds	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
   }
   pI2CHandle->pI2Cx->TRISE = (temp & 0x3F); // 6 bit
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d6e:	621a      	str	r2, [r3, #32]

}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	431bde83 	.word	0x431bde83
 8000d7c:	000186a0 	.word	0x000186a0
 8000d80:	aaaaaaab 	.word	0xaaaaaaab

08000d84 <I2C_IRQInterruptConfig>:
/*
 * IRQ Config and ISR handling
 */

void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
   if(EnOrDi == ENABLE)
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d133      	bne.n	8000e02 <I2C_IRQInterruptConfig+0x7e>
   {
      if(IRQNumber < 32)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b1f      	cmp	r3, #31
 8000d9e:	d80a      	bhi.n	8000db6 <I2C_IRQInterruptConfig+0x32>
      {
         *NVIC_ICER0 |= 1 << IRQNumber;
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <I2C_IRQInterruptConfig+0xf8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	2101      	movs	r1, #1
 8000da8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dac:	4611      	mov	r1, r2
 8000dae:	4a33      	ldr	r2, [pc, #204]	; (8000e7c <I2C_IRQInterruptConfig+0xf8>)
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6013      	str	r3, [r2, #0]
      else if(IRQNumber >= 64 && IRQNumber < 96)
      {
         *NVIC_ICER2 &= ~(1 << (IRQNumber % 64));
      }
   }
}
 8000db4:	e05c      	b.n	8000e70 <I2C_IRQInterruptConfig+0xec>
      else if(IRQNumber >= 32 && IRQNumber < 64)
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b1f      	cmp	r3, #31
 8000dba:	d90f      	bls.n	8000ddc <I2C_IRQInterruptConfig+0x58>
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000dc0:	d80c      	bhi.n	8000ddc <I2C_IRQInterruptConfig+0x58>
         *NVIC_ICER1 |= 1 << (IRQNumber % 32);
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <I2C_IRQInterruptConfig+0xfc>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	f002 021f 	and.w	r2, r2, #31
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4a2a      	ldr	r2, [pc, #168]	; (8000e80 <I2C_IRQInterruptConfig+0xfc>)
 8000dd6:	430b      	orrs	r3, r1
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e049      	b.n	8000e70 <I2C_IRQInterruptConfig+0xec>
      else if(IRQNumber >= 64 && IRQNumber < 96)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b3f      	cmp	r3, #63	; 0x3f
 8000de0:	d946      	bls.n	8000e70 <I2C_IRQInterruptConfig+0xec>
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b5f      	cmp	r3, #95	; 0x5f
 8000de6:	d843      	bhi.n	8000e70 <I2C_IRQInterruptConfig+0xec>
         *NVIC_ICER2 |= 1 << (IRQNumber % 64);
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <I2C_IRQInterruptConfig+0x100>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	79fa      	ldrb	r2, [r7, #7]
 8000dee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <I2C_IRQInterruptConfig+0x100>)
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	e036      	b.n	8000e70 <I2C_IRQInterruptConfig+0xec>
      if(IRQNumber < 32)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b1f      	cmp	r3, #31
 8000e06:	d80b      	bhi.n	8000e20 <I2C_IRQInterruptConfig+0x9c>
         *NVIC_ICER0 &= ~(1 << IRQNumber);
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <I2C_IRQInterruptConfig+0xf8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fa01 f202 	lsl.w	r2, r1, r2
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	4611      	mov	r1, r2
 8000e18:	4a18      	ldr	r2, [pc, #96]	; (8000e7c <I2C_IRQInterruptConfig+0xf8>)
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	e027      	b.n	8000e70 <I2C_IRQInterruptConfig+0xec>
      else if(IRQNumber >= 32 && IRQNumber < 64)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b1f      	cmp	r3, #31
 8000e24:	d910      	bls.n	8000e48 <I2C_IRQInterruptConfig+0xc4>
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b3f      	cmp	r3, #63	; 0x3f
 8000e2a:	d80d      	bhi.n	8000e48 <I2C_IRQInterruptConfig+0xc4>
         *NVIC_ICER1 &= ~(1 << (IRQNumber % 32));
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <I2C_IRQInterruptConfig+0xfc>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	f002 021f 	and.w	r2, r2, #31
 8000e36:	2101      	movs	r1, #1
 8000e38:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <I2C_IRQInterruptConfig+0xfc>)
 8000e42:	400b      	ands	r3, r1
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e013      	b.n	8000e70 <I2C_IRQInterruptConfig+0xec>
      else if(IRQNumber >= 64 && IRQNumber < 96)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e4c:	d910      	bls.n	8000e70 <I2C_IRQInterruptConfig+0xec>
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b5f      	cmp	r3, #95	; 0x5f
 8000e52:	d80d      	bhi.n	8000e70 <I2C_IRQInterruptConfig+0xec>
         *NVIC_ICER2 &= ~(1 << (IRQNumber % 64));
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <I2C_IRQInterruptConfig+0x100>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <I2C_IRQInterruptConfig+0x100>)
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	e7ff      	b.n	8000e70 <I2C_IRQInterruptConfig+0xec>
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e180 	.word	0xe000e180
 8000e80:	e000e184 	.word	0xe000e184
 8000e84:	e000e188 	.word	0xe000e188

08000e88 <I2C_PeriControl>:
   }
   return FLAG_RESET;
}

void I2C_PeriControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi) // PE En or Di
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
   if(EnOrDi == ENABLE) // bit 0 CR1 -> i2c peripheral enable(PE)
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d106      	bne.n	8000ea8 <I2C_PeriControl+0x20>
   {
      pI2Cx->CR1 |= 1 << I2C_CR1_PE;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f043 0201 	orr.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
   }
   else
   {
      pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
   }
}
 8000ea6:	e005      	b.n	8000eb4 <I2C_PeriControl+0x2c>
      pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 0201 	bic.w	r2, r3, #1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <I2C_MangageACKing>:

void I2C_MangageACKing(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	70fb      	strb	r3, [r7, #3]
   if(EnOrDi == I2C_ACK_ENABLE)
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d106      	bne.n	8000ede <I2C_MangageACKing+0x20>
   {
      pI2Cx->CR1 |= 1 << I2C_CR1_ACK;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
   }
   else
   {
      pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
   }
}
 8000edc:	e005      	b.n	8000eea <I2C_MangageACKing+0x2c>
      pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <I2C_MasterSendDataIT>:

uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTXBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	70fb      	strb	r3, [r7, #3]
   uint8_t busystate = pI2CHandle->TxRxState;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	7f1b      	ldrb	r3, [r3, #28]
 8000f06:	75fb      	strb	r3, [r7, #23]

   if(busystate != I2C_BUSY_TX && busystate != I2C_BUSY_RX)
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d02f      	beq.n	8000f6e <I2C_MasterSendDataIT+0x7a>
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d02c      	beq.n	8000f6e <I2C_MasterSendDataIT+0x7a>
   {
      pI2CHandle->pTXBuffer = pTXBuffer;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	60da      	str	r2, [r3, #12]
      pI2CHandle->TxLen = Len;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	615a      	str	r2, [r3, #20]
      pI2CHandle->TxRxState = I2C_BUSY_TX;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2201      	movs	r2, #1
 8000f24:	771a      	strb	r2, [r3, #28]
      pI2CHandle->DevAddr = SlaveAddr;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	78fa      	ldrb	r2, [r7, #3]
 8000f2a:	775a      	strb	r2, [r3, #29]
      pI2CHandle->Sr = Sr;
 8000f2c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24

      // Gen START Condition
      I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fdc4 	bl	8000ac6 <I2C_GenerateStartCondition>

      // Enable ITBUFEN Control bit (Buffer interrupt enable)
      pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITBUFEN;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f4c:	605a      	str	r2, [r3, #4]

      //Implement the code to enable ITEVFEN Control Bit
      pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITEVTEN;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f5c:	605a      	str	r2, [r3, #4]

      //Implement the code to enable ITERREN Control Bit
      pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITERREN;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f6c:	605a      	str	r2, [r3, #4]
   }
   return busystate;
 8000f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <I2C_MasterReceiveDataIT>:

uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer,uint8_t Len,uint8_t SlaveAddr, uint8_t Sr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4611      	mov	r1, r2
 8000f84:	461a      	mov	r2, r3
 8000f86:	460b      	mov	r3, r1
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	71bb      	strb	r3, [r7, #6]
   uint8_t busystate = pI2CHandle->TxRxState;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	7f1b      	ldrb	r3, [r3, #28]
 8000f92:	75fb      	strb	r3, [r7, #23]
   if((busystate != I2C_BUSY_TX) && (busystate != I2C_BUSY_RX))
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d032      	beq.n	8001000 <I2C_MasterReceiveDataIT+0x88>
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d02f      	beq.n	8001000 <I2C_MasterReceiveDataIT+0x88>
   {
      pI2CHandle->pRXBuffer = pRxBuffer;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	611a      	str	r2, [r3, #16]
      pI2CHandle->RxLen = Len;
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	619a      	str	r2, [r3, #24]
      pI2CHandle->TxRxState = I2C_BUSY_RX;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	771a      	strb	r2, [r3, #28]
      pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	621a      	str	r2, [r3, #32]
      pI2CHandle->DevAddr = SlaveAddr;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	79ba      	ldrb	r2, [r7, #6]
 8000fbc:	775a      	strb	r2, [r3, #29]
      pI2CHandle->Sr = Sr;
 8000fbe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24

      //Implement code to Generate START Condition
      I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fd7b 	bl	8000ac6 <I2C_GenerateStartCondition>

      //Implement the code to enable ITBUFEN Control Bit
      pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITBUFEN;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fde:	605a      	str	r2, [r3, #4]

      //Implement the code to enable ITEVFEN Control Bit
      pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITEVTEN;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fee:	605a      	str	r2, [r3, #4]

      //Implement the code to enable ITERREN Control Bit
      pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_ITERREN;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ffe:	605a      	str	r2, [r3, #4]
   }
   return busystate;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <std>:
 800100c:	2300      	movs	r3, #0
 800100e:	b510      	push	{r4, lr}
 8001010:	4604      	mov	r4, r0
 8001012:	e9c0 3300 	strd	r3, r3, [r0]
 8001016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800101a:	6083      	str	r3, [r0, #8]
 800101c:	8181      	strh	r1, [r0, #12]
 800101e:	6643      	str	r3, [r0, #100]	; 0x64
 8001020:	81c2      	strh	r2, [r0, #14]
 8001022:	6183      	str	r3, [r0, #24]
 8001024:	4619      	mov	r1, r3
 8001026:	2208      	movs	r2, #8
 8001028:	305c      	adds	r0, #92	; 0x5c
 800102a:	f000 f99b 	bl	8001364 <memset>
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <std+0x58>)
 8001030:	6263      	str	r3, [r4, #36]	; 0x24
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <std+0x5c>)
 8001034:	62a3      	str	r3, [r4, #40]	; 0x28
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <std+0x60>)
 8001038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <std+0x64>)
 800103c:	6323      	str	r3, [r4, #48]	; 0x30
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <std+0x68>)
 8001040:	6224      	str	r4, [r4, #32]
 8001042:	429c      	cmp	r4, r3
 8001044:	d006      	beq.n	8001054 <std+0x48>
 8001046:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800104a:	4294      	cmp	r4, r2
 800104c:	d002      	beq.n	8001054 <std+0x48>
 800104e:	33d0      	adds	r3, #208	; 0xd0
 8001050:	429c      	cmp	r4, r3
 8001052:	d105      	bne.n	8001060 <std+0x54>
 8001054:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800105c:	f000 b9fa 	b.w	8001454 <__retarget_lock_init_recursive>
 8001060:	bd10      	pop	{r4, pc}
 8001062:	bf00      	nop
 8001064:	080011b5 	.word	0x080011b5
 8001068:	080011d7 	.word	0x080011d7
 800106c:	0800120f 	.word	0x0800120f
 8001070:	08001233 	.word	0x08001233
 8001074:	200000dc 	.word	0x200000dc

08001078 <stdio_exit_handler>:
 8001078:	4a02      	ldr	r2, [pc, #8]	; (8001084 <stdio_exit_handler+0xc>)
 800107a:	4903      	ldr	r1, [pc, #12]	; (8001088 <stdio_exit_handler+0x10>)
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <stdio_exit_handler+0x14>)
 800107e:	f000 b869 	b.w	8001154 <_fwalk_sglue>
 8001082:	bf00      	nop
 8001084:	20000014 	.word	0x20000014
 8001088:	08001cf1 	.word	0x08001cf1
 800108c:	20000020 	.word	0x20000020

08001090 <cleanup_stdio>:
 8001090:	6841      	ldr	r1, [r0, #4]
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <cleanup_stdio+0x34>)
 8001094:	4299      	cmp	r1, r3
 8001096:	b510      	push	{r4, lr}
 8001098:	4604      	mov	r4, r0
 800109a:	d001      	beq.n	80010a0 <cleanup_stdio+0x10>
 800109c:	f000 fe28 	bl	8001cf0 <_fflush_r>
 80010a0:	68a1      	ldr	r1, [r4, #8]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <cleanup_stdio+0x38>)
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d002      	beq.n	80010ae <cleanup_stdio+0x1e>
 80010a8:	4620      	mov	r0, r4
 80010aa:	f000 fe21 	bl	8001cf0 <_fflush_r>
 80010ae:	68e1      	ldr	r1, [r4, #12]
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <cleanup_stdio+0x3c>)
 80010b2:	4299      	cmp	r1, r3
 80010b4:	d004      	beq.n	80010c0 <cleanup_stdio+0x30>
 80010b6:	4620      	mov	r0, r4
 80010b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010bc:	f000 be18 	b.w	8001cf0 <_fflush_r>
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	bf00      	nop
 80010c4:	200000dc 	.word	0x200000dc
 80010c8:	20000144 	.word	0x20000144
 80010cc:	200001ac 	.word	0x200001ac

080010d0 <global_stdio_init.part.0>:
 80010d0:	b510      	push	{r4, lr}
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <global_stdio_init.part.0+0x30>)
 80010d4:	4c0b      	ldr	r4, [pc, #44]	; (8001104 <global_stdio_init.part.0+0x34>)
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <global_stdio_init.part.0+0x38>)
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	4620      	mov	r0, r4
 80010dc:	2200      	movs	r2, #0
 80010de:	2104      	movs	r1, #4
 80010e0:	f7ff ff94 	bl	800100c <std>
 80010e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80010e8:	2201      	movs	r2, #1
 80010ea:	2109      	movs	r1, #9
 80010ec:	f7ff ff8e 	bl	800100c <std>
 80010f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80010f4:	2202      	movs	r2, #2
 80010f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010fa:	2112      	movs	r1, #18
 80010fc:	f7ff bf86 	b.w	800100c <std>
 8001100:	20000214 	.word	0x20000214
 8001104:	200000dc 	.word	0x200000dc
 8001108:	08001079 	.word	0x08001079

0800110c <__sfp_lock_acquire>:
 800110c:	4801      	ldr	r0, [pc, #4]	; (8001114 <__sfp_lock_acquire+0x8>)
 800110e:	f000 b9a2 	b.w	8001456 <__retarget_lock_acquire_recursive>
 8001112:	bf00      	nop
 8001114:	2000021d 	.word	0x2000021d

08001118 <__sfp_lock_release>:
 8001118:	4801      	ldr	r0, [pc, #4]	; (8001120 <__sfp_lock_release+0x8>)
 800111a:	f000 b99d 	b.w	8001458 <__retarget_lock_release_recursive>
 800111e:	bf00      	nop
 8001120:	2000021d 	.word	0x2000021d

08001124 <__sinit>:
 8001124:	b510      	push	{r4, lr}
 8001126:	4604      	mov	r4, r0
 8001128:	f7ff fff0 	bl	800110c <__sfp_lock_acquire>
 800112c:	6a23      	ldr	r3, [r4, #32]
 800112e:	b11b      	cbz	r3, 8001138 <__sinit+0x14>
 8001130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001134:	f7ff bff0 	b.w	8001118 <__sfp_lock_release>
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__sinit+0x28>)
 800113a:	6223      	str	r3, [r4, #32]
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__sinit+0x2c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f5      	bne.n	8001130 <__sinit+0xc>
 8001144:	f7ff ffc4 	bl	80010d0 <global_stdio_init.part.0>
 8001148:	e7f2      	b.n	8001130 <__sinit+0xc>
 800114a:	bf00      	nop
 800114c:	08001091 	.word	0x08001091
 8001150:	20000214 	.word	0x20000214

08001154 <_fwalk_sglue>:
 8001154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001158:	4607      	mov	r7, r0
 800115a:	4688      	mov	r8, r1
 800115c:	4614      	mov	r4, r2
 800115e:	2600      	movs	r6, #0
 8001160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001164:	f1b9 0901 	subs.w	r9, r9, #1
 8001168:	d505      	bpl.n	8001176 <_fwalk_sglue+0x22>
 800116a:	6824      	ldr	r4, [r4, #0]
 800116c:	2c00      	cmp	r4, #0
 800116e:	d1f7      	bne.n	8001160 <_fwalk_sglue+0xc>
 8001170:	4630      	mov	r0, r6
 8001172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001176:	89ab      	ldrh	r3, [r5, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d907      	bls.n	800118c <_fwalk_sglue+0x38>
 800117c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001180:	3301      	adds	r3, #1
 8001182:	d003      	beq.n	800118c <_fwalk_sglue+0x38>
 8001184:	4629      	mov	r1, r5
 8001186:	4638      	mov	r0, r7
 8001188:	47c0      	blx	r8
 800118a:	4306      	orrs	r6, r0
 800118c:	3568      	adds	r5, #104	; 0x68
 800118e:	e7e9      	b.n	8001164 <_fwalk_sglue+0x10>

08001190 <iprintf>:
 8001190:	b40f      	push	{r0, r1, r2, r3}
 8001192:	b507      	push	{r0, r1, r2, lr}
 8001194:	4906      	ldr	r1, [pc, #24]	; (80011b0 <iprintf+0x20>)
 8001196:	ab04      	add	r3, sp, #16
 8001198:	6808      	ldr	r0, [r1, #0]
 800119a:	f853 2b04 	ldr.w	r2, [r3], #4
 800119e:	6881      	ldr	r1, [r0, #8]
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	f000 fa79 	bl	8001698 <_vfiprintf_r>
 80011a6:	b003      	add	sp, #12
 80011a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80011ac:	b004      	add	sp, #16
 80011ae:	4770      	bx	lr
 80011b0:	2000006c 	.word	0x2000006c

080011b4 <__sread>:
 80011b4:	b510      	push	{r4, lr}
 80011b6:	460c      	mov	r4, r1
 80011b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011bc:	f000 f8fc 	bl	80013b8 <_read_r>
 80011c0:	2800      	cmp	r0, #0
 80011c2:	bfab      	itete	ge
 80011c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011c6:	89a3      	ldrhlt	r3, [r4, #12]
 80011c8:	181b      	addge	r3, r3, r0
 80011ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011ce:	bfac      	ite	ge
 80011d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80011d2:	81a3      	strhlt	r3, [r4, #12]
 80011d4:	bd10      	pop	{r4, pc}

080011d6 <__swrite>:
 80011d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011da:	461f      	mov	r7, r3
 80011dc:	898b      	ldrh	r3, [r1, #12]
 80011de:	05db      	lsls	r3, r3, #23
 80011e0:	4605      	mov	r5, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4616      	mov	r6, r2
 80011e6:	d505      	bpl.n	80011f4 <__swrite+0x1e>
 80011e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ec:	2302      	movs	r3, #2
 80011ee:	2200      	movs	r2, #0
 80011f0:	f000 f8d0 	bl	8001394 <_lseek_r>
 80011f4:	89a3      	ldrh	r3, [r4, #12]
 80011f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011fe:	81a3      	strh	r3, [r4, #12]
 8001200:	4632      	mov	r2, r6
 8001202:	463b      	mov	r3, r7
 8001204:	4628      	mov	r0, r5
 8001206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800120a:	f000 b8e7 	b.w	80013dc <_write_r>

0800120e <__sseek>:
 800120e:	b510      	push	{r4, lr}
 8001210:	460c      	mov	r4, r1
 8001212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001216:	f000 f8bd 	bl	8001394 <_lseek_r>
 800121a:	1c43      	adds	r3, r0, #1
 800121c:	89a3      	ldrh	r3, [r4, #12]
 800121e:	bf15      	itete	ne
 8001220:	6560      	strne	r0, [r4, #84]	; 0x54
 8001222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800122a:	81a3      	strheq	r3, [r4, #12]
 800122c:	bf18      	it	ne
 800122e:	81a3      	strhne	r3, [r4, #12]
 8001230:	bd10      	pop	{r4, pc}

08001232 <__sclose>:
 8001232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001236:	f000 b89d 	b.w	8001374 <_close_r>

0800123a <__swbuf_r>:
 800123a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123c:	460e      	mov	r6, r1
 800123e:	4614      	mov	r4, r2
 8001240:	4605      	mov	r5, r0
 8001242:	b118      	cbz	r0, 800124c <__swbuf_r+0x12>
 8001244:	6a03      	ldr	r3, [r0, #32]
 8001246:	b90b      	cbnz	r3, 800124c <__swbuf_r+0x12>
 8001248:	f7ff ff6c 	bl	8001124 <__sinit>
 800124c:	69a3      	ldr	r3, [r4, #24]
 800124e:	60a3      	str	r3, [r4, #8]
 8001250:	89a3      	ldrh	r3, [r4, #12]
 8001252:	071a      	lsls	r2, r3, #28
 8001254:	d525      	bpl.n	80012a2 <__swbuf_r+0x68>
 8001256:	6923      	ldr	r3, [r4, #16]
 8001258:	b31b      	cbz	r3, 80012a2 <__swbuf_r+0x68>
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	6922      	ldr	r2, [r4, #16]
 800125e:	1a98      	subs	r0, r3, r2
 8001260:	6963      	ldr	r3, [r4, #20]
 8001262:	b2f6      	uxtb	r6, r6
 8001264:	4283      	cmp	r3, r0
 8001266:	4637      	mov	r7, r6
 8001268:	dc04      	bgt.n	8001274 <__swbuf_r+0x3a>
 800126a:	4621      	mov	r1, r4
 800126c:	4628      	mov	r0, r5
 800126e:	f000 fd3f 	bl	8001cf0 <_fflush_r>
 8001272:	b9e0      	cbnz	r0, 80012ae <__swbuf_r+0x74>
 8001274:	68a3      	ldr	r3, [r4, #8]
 8001276:	3b01      	subs	r3, #1
 8001278:	60a3      	str	r3, [r4, #8]
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	6022      	str	r2, [r4, #0]
 8001280:	701e      	strb	r6, [r3, #0]
 8001282:	6962      	ldr	r2, [r4, #20]
 8001284:	1c43      	adds	r3, r0, #1
 8001286:	429a      	cmp	r2, r3
 8001288:	d004      	beq.n	8001294 <__swbuf_r+0x5a>
 800128a:	89a3      	ldrh	r3, [r4, #12]
 800128c:	07db      	lsls	r3, r3, #31
 800128e:	d506      	bpl.n	800129e <__swbuf_r+0x64>
 8001290:	2e0a      	cmp	r6, #10
 8001292:	d104      	bne.n	800129e <__swbuf_r+0x64>
 8001294:	4621      	mov	r1, r4
 8001296:	4628      	mov	r0, r5
 8001298:	f000 fd2a 	bl	8001cf0 <_fflush_r>
 800129c:	b938      	cbnz	r0, 80012ae <__swbuf_r+0x74>
 800129e:	4638      	mov	r0, r7
 80012a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a2:	4621      	mov	r1, r4
 80012a4:	4628      	mov	r0, r5
 80012a6:	f000 f805 	bl	80012b4 <__swsetup_r>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d0d5      	beq.n	800125a <__swbuf_r+0x20>
 80012ae:	f04f 37ff 	mov.w	r7, #4294967295
 80012b2:	e7f4      	b.n	800129e <__swbuf_r+0x64>

080012b4 <__swsetup_r>:
 80012b4:	b538      	push	{r3, r4, r5, lr}
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <__swsetup_r+0xac>)
 80012b8:	4605      	mov	r5, r0
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	460c      	mov	r4, r1
 80012be:	b118      	cbz	r0, 80012c8 <__swsetup_r+0x14>
 80012c0:	6a03      	ldr	r3, [r0, #32]
 80012c2:	b90b      	cbnz	r3, 80012c8 <__swsetup_r+0x14>
 80012c4:	f7ff ff2e 	bl	8001124 <__sinit>
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012ce:	0718      	lsls	r0, r3, #28
 80012d0:	d422      	bmi.n	8001318 <__swsetup_r+0x64>
 80012d2:	06d9      	lsls	r1, r3, #27
 80012d4:	d407      	bmi.n	80012e6 <__swsetup_r+0x32>
 80012d6:	2309      	movs	r3, #9
 80012d8:	602b      	str	r3, [r5, #0]
 80012da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012de:	81a3      	strh	r3, [r4, #12]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	e034      	b.n	8001350 <__swsetup_r+0x9c>
 80012e6:	0758      	lsls	r0, r3, #29
 80012e8:	d512      	bpl.n	8001310 <__swsetup_r+0x5c>
 80012ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012ec:	b141      	cbz	r1, 8001300 <__swsetup_r+0x4c>
 80012ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012f2:	4299      	cmp	r1, r3
 80012f4:	d002      	beq.n	80012fc <__swsetup_r+0x48>
 80012f6:	4628      	mov	r0, r5
 80012f8:	f000 f8b0 	bl	800145c <_free_r>
 80012fc:	2300      	movs	r3, #0
 80012fe:	6363      	str	r3, [r4, #52]	; 0x34
 8001300:	89a3      	ldrh	r3, [r4, #12]
 8001302:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001306:	81a3      	strh	r3, [r4, #12]
 8001308:	2300      	movs	r3, #0
 800130a:	6063      	str	r3, [r4, #4]
 800130c:	6923      	ldr	r3, [r4, #16]
 800130e:	6023      	str	r3, [r4, #0]
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	81a3      	strh	r3, [r4, #12]
 8001318:	6923      	ldr	r3, [r4, #16]
 800131a:	b94b      	cbnz	r3, 8001330 <__swsetup_r+0x7c>
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001326:	d003      	beq.n	8001330 <__swsetup_r+0x7c>
 8001328:	4621      	mov	r1, r4
 800132a:	4628      	mov	r0, r5
 800132c:	f000 fd2e 	bl	8001d8c <__smakebuf_r>
 8001330:	89a0      	ldrh	r0, [r4, #12]
 8001332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001336:	f010 0301 	ands.w	r3, r0, #1
 800133a:	d00a      	beq.n	8001352 <__swsetup_r+0x9e>
 800133c:	2300      	movs	r3, #0
 800133e:	60a3      	str	r3, [r4, #8]
 8001340:	6963      	ldr	r3, [r4, #20]
 8001342:	425b      	negs	r3, r3
 8001344:	61a3      	str	r3, [r4, #24]
 8001346:	6923      	ldr	r3, [r4, #16]
 8001348:	b943      	cbnz	r3, 800135c <__swsetup_r+0xa8>
 800134a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800134e:	d1c4      	bne.n	80012da <__swsetup_r+0x26>
 8001350:	bd38      	pop	{r3, r4, r5, pc}
 8001352:	0781      	lsls	r1, r0, #30
 8001354:	bf58      	it	pl
 8001356:	6963      	ldrpl	r3, [r4, #20]
 8001358:	60a3      	str	r3, [r4, #8]
 800135a:	e7f4      	b.n	8001346 <__swsetup_r+0x92>
 800135c:	2000      	movs	r0, #0
 800135e:	e7f7      	b.n	8001350 <__swsetup_r+0x9c>
 8001360:	2000006c 	.word	0x2000006c

08001364 <memset>:
 8001364:	4402      	add	r2, r0
 8001366:	4603      	mov	r3, r0
 8001368:	4293      	cmp	r3, r2
 800136a:	d100      	bne.n	800136e <memset+0xa>
 800136c:	4770      	bx	lr
 800136e:	f803 1b01 	strb.w	r1, [r3], #1
 8001372:	e7f9      	b.n	8001368 <memset+0x4>

08001374 <_close_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4d06      	ldr	r5, [pc, #24]	; (8001390 <_close_r+0x1c>)
 8001378:	2300      	movs	r3, #0
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	602b      	str	r3, [r5, #0]
 8001380:	f7ff f8c7 	bl	8000512 <_close>
 8001384:	1c43      	adds	r3, r0, #1
 8001386:	d102      	bne.n	800138e <_close_r+0x1a>
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	b103      	cbz	r3, 800138e <_close_r+0x1a>
 800138c:	6023      	str	r3, [r4, #0]
 800138e:	bd38      	pop	{r3, r4, r5, pc}
 8001390:	20000218 	.word	0x20000218

08001394 <_lseek_r>:
 8001394:	b538      	push	{r3, r4, r5, lr}
 8001396:	4d07      	ldr	r5, [pc, #28]	; (80013b4 <_lseek_r+0x20>)
 8001398:	4604      	mov	r4, r0
 800139a:	4608      	mov	r0, r1
 800139c:	4611      	mov	r1, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	602a      	str	r2, [r5, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	f7ff f8d9 	bl	800055a <_lseek>
 80013a8:	1c43      	adds	r3, r0, #1
 80013aa:	d102      	bne.n	80013b2 <_lseek_r+0x1e>
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	b103      	cbz	r3, 80013b2 <_lseek_r+0x1e>
 80013b0:	6023      	str	r3, [r4, #0]
 80013b2:	bd38      	pop	{r3, r4, r5, pc}
 80013b4:	20000218 	.word	0x20000218

080013b8 <_read_r>:
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	4d07      	ldr	r5, [pc, #28]	; (80013d8 <_read_r+0x20>)
 80013bc:	4604      	mov	r4, r0
 80013be:	4608      	mov	r0, r1
 80013c0:	4611      	mov	r1, r2
 80013c2:	2200      	movs	r2, #0
 80013c4:	602a      	str	r2, [r5, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	f7ff f86a 	bl	80004a0 <_read>
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d102      	bne.n	80013d6 <_read_r+0x1e>
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	b103      	cbz	r3, 80013d6 <_read_r+0x1e>
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
 80013d8:	20000218 	.word	0x20000218

080013dc <_write_r>:
 80013dc:	b538      	push	{r3, r4, r5, lr}
 80013de:	4d07      	ldr	r5, [pc, #28]	; (80013fc <_write_r+0x20>)
 80013e0:	4604      	mov	r4, r0
 80013e2:	4608      	mov	r0, r1
 80013e4:	4611      	mov	r1, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	602a      	str	r2, [r5, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	f7ff f875 	bl	80004da <_write>
 80013f0:	1c43      	adds	r3, r0, #1
 80013f2:	d102      	bne.n	80013fa <_write_r+0x1e>
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	b103      	cbz	r3, 80013fa <_write_r+0x1e>
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	bd38      	pop	{r3, r4, r5, pc}
 80013fc:	20000218 	.word	0x20000218

08001400 <__errno>:
 8001400:	4b01      	ldr	r3, [pc, #4]	; (8001408 <__errno+0x8>)
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2000006c 	.word	0x2000006c

0800140c <__libc_init_array>:
 800140c:	b570      	push	{r4, r5, r6, lr}
 800140e:	4d0d      	ldr	r5, [pc, #52]	; (8001444 <__libc_init_array+0x38>)
 8001410:	4c0d      	ldr	r4, [pc, #52]	; (8001448 <__libc_init_array+0x3c>)
 8001412:	1b64      	subs	r4, r4, r5
 8001414:	10a4      	asrs	r4, r4, #2
 8001416:	2600      	movs	r6, #0
 8001418:	42a6      	cmp	r6, r4
 800141a:	d109      	bne.n	8001430 <__libc_init_array+0x24>
 800141c:	4d0b      	ldr	r5, [pc, #44]	; (800144c <__libc_init_array+0x40>)
 800141e:	4c0c      	ldr	r4, [pc, #48]	; (8001450 <__libc_init_array+0x44>)
 8001420:	f000 fd22 	bl	8001e68 <_init>
 8001424:	1b64      	subs	r4, r4, r5
 8001426:	10a4      	asrs	r4, r4, #2
 8001428:	2600      	movs	r6, #0
 800142a:	42a6      	cmp	r6, r4
 800142c:	d105      	bne.n	800143a <__libc_init_array+0x2e>
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	f855 3b04 	ldr.w	r3, [r5], #4
 8001434:	4798      	blx	r3
 8001436:	3601      	adds	r6, #1
 8001438:	e7ee      	b.n	8001418 <__libc_init_array+0xc>
 800143a:	f855 3b04 	ldr.w	r3, [r5], #4
 800143e:	4798      	blx	r3
 8001440:	3601      	adds	r6, #1
 8001442:	e7f2      	b.n	800142a <__libc_init_array+0x1e>
 8001444:	08001ef8 	.word	0x08001ef8
 8001448:	08001ef8 	.word	0x08001ef8
 800144c:	08001ef8 	.word	0x08001ef8
 8001450:	08001efc 	.word	0x08001efc

08001454 <__retarget_lock_init_recursive>:
 8001454:	4770      	bx	lr

08001456 <__retarget_lock_acquire_recursive>:
 8001456:	4770      	bx	lr

08001458 <__retarget_lock_release_recursive>:
 8001458:	4770      	bx	lr
	...

0800145c <_free_r>:
 800145c:	b538      	push	{r3, r4, r5, lr}
 800145e:	4605      	mov	r5, r0
 8001460:	2900      	cmp	r1, #0
 8001462:	d041      	beq.n	80014e8 <_free_r+0x8c>
 8001464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001468:	1f0c      	subs	r4, r1, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	bfb8      	it	lt
 800146e:	18e4      	addlt	r4, r4, r3
 8001470:	f000 f8de 	bl	8001630 <__malloc_lock>
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <_free_r+0x90>)
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	b933      	cbnz	r3, 8001488 <_free_r+0x2c>
 800147a:	6063      	str	r3, [r4, #4]
 800147c:	6014      	str	r4, [r2, #0]
 800147e:	4628      	mov	r0, r5
 8001480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001484:	f000 b8da 	b.w	800163c <__malloc_unlock>
 8001488:	42a3      	cmp	r3, r4
 800148a:	d908      	bls.n	800149e <_free_r+0x42>
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	1821      	adds	r1, r4, r0
 8001490:	428b      	cmp	r3, r1
 8001492:	bf01      	itttt	eq
 8001494:	6819      	ldreq	r1, [r3, #0]
 8001496:	685b      	ldreq	r3, [r3, #4]
 8001498:	1809      	addeq	r1, r1, r0
 800149a:	6021      	streq	r1, [r4, #0]
 800149c:	e7ed      	b.n	800147a <_free_r+0x1e>
 800149e:	461a      	mov	r2, r3
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	b10b      	cbz	r3, 80014a8 <_free_r+0x4c>
 80014a4:	42a3      	cmp	r3, r4
 80014a6:	d9fa      	bls.n	800149e <_free_r+0x42>
 80014a8:	6811      	ldr	r1, [r2, #0]
 80014aa:	1850      	adds	r0, r2, r1
 80014ac:	42a0      	cmp	r0, r4
 80014ae:	d10b      	bne.n	80014c8 <_free_r+0x6c>
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	4401      	add	r1, r0
 80014b4:	1850      	adds	r0, r2, r1
 80014b6:	4283      	cmp	r3, r0
 80014b8:	6011      	str	r1, [r2, #0]
 80014ba:	d1e0      	bne.n	800147e <_free_r+0x22>
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	6053      	str	r3, [r2, #4]
 80014c2:	4408      	add	r0, r1
 80014c4:	6010      	str	r0, [r2, #0]
 80014c6:	e7da      	b.n	800147e <_free_r+0x22>
 80014c8:	d902      	bls.n	80014d0 <_free_r+0x74>
 80014ca:	230c      	movs	r3, #12
 80014cc:	602b      	str	r3, [r5, #0]
 80014ce:	e7d6      	b.n	800147e <_free_r+0x22>
 80014d0:	6820      	ldr	r0, [r4, #0]
 80014d2:	1821      	adds	r1, r4, r0
 80014d4:	428b      	cmp	r3, r1
 80014d6:	bf04      	itt	eq
 80014d8:	6819      	ldreq	r1, [r3, #0]
 80014da:	685b      	ldreq	r3, [r3, #4]
 80014dc:	6063      	str	r3, [r4, #4]
 80014de:	bf04      	itt	eq
 80014e0:	1809      	addeq	r1, r1, r0
 80014e2:	6021      	streq	r1, [r4, #0]
 80014e4:	6054      	str	r4, [r2, #4]
 80014e6:	e7ca      	b.n	800147e <_free_r+0x22>
 80014e8:	bd38      	pop	{r3, r4, r5, pc}
 80014ea:	bf00      	nop
 80014ec:	20000220 	.word	0x20000220

080014f0 <sbrk_aligned>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	4e0e      	ldr	r6, [pc, #56]	; (800152c <sbrk_aligned+0x3c>)
 80014f4:	460c      	mov	r4, r1
 80014f6:	6831      	ldr	r1, [r6, #0]
 80014f8:	4605      	mov	r5, r0
 80014fa:	b911      	cbnz	r1, 8001502 <sbrk_aligned+0x12>
 80014fc:	f000 fca4 	bl	8001e48 <_sbrk_r>
 8001500:	6030      	str	r0, [r6, #0]
 8001502:	4621      	mov	r1, r4
 8001504:	4628      	mov	r0, r5
 8001506:	f000 fc9f 	bl	8001e48 <_sbrk_r>
 800150a:	1c43      	adds	r3, r0, #1
 800150c:	d00a      	beq.n	8001524 <sbrk_aligned+0x34>
 800150e:	1cc4      	adds	r4, r0, #3
 8001510:	f024 0403 	bic.w	r4, r4, #3
 8001514:	42a0      	cmp	r0, r4
 8001516:	d007      	beq.n	8001528 <sbrk_aligned+0x38>
 8001518:	1a21      	subs	r1, r4, r0
 800151a:	4628      	mov	r0, r5
 800151c:	f000 fc94 	bl	8001e48 <_sbrk_r>
 8001520:	3001      	adds	r0, #1
 8001522:	d101      	bne.n	8001528 <sbrk_aligned+0x38>
 8001524:	f04f 34ff 	mov.w	r4, #4294967295
 8001528:	4620      	mov	r0, r4
 800152a:	bd70      	pop	{r4, r5, r6, pc}
 800152c:	20000224 	.word	0x20000224

08001530 <_malloc_r>:
 8001530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001534:	1ccd      	adds	r5, r1, #3
 8001536:	f025 0503 	bic.w	r5, r5, #3
 800153a:	3508      	adds	r5, #8
 800153c:	2d0c      	cmp	r5, #12
 800153e:	bf38      	it	cc
 8001540:	250c      	movcc	r5, #12
 8001542:	2d00      	cmp	r5, #0
 8001544:	4607      	mov	r7, r0
 8001546:	db01      	blt.n	800154c <_malloc_r+0x1c>
 8001548:	42a9      	cmp	r1, r5
 800154a:	d905      	bls.n	8001558 <_malloc_r+0x28>
 800154c:	230c      	movs	r3, #12
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	2600      	movs	r6, #0
 8001552:	4630      	mov	r0, r6
 8001554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001558:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800162c <_malloc_r+0xfc>
 800155c:	f000 f868 	bl	8001630 <__malloc_lock>
 8001560:	f8d8 3000 	ldr.w	r3, [r8]
 8001564:	461c      	mov	r4, r3
 8001566:	bb5c      	cbnz	r4, 80015c0 <_malloc_r+0x90>
 8001568:	4629      	mov	r1, r5
 800156a:	4638      	mov	r0, r7
 800156c:	f7ff ffc0 	bl	80014f0 <sbrk_aligned>
 8001570:	1c43      	adds	r3, r0, #1
 8001572:	4604      	mov	r4, r0
 8001574:	d155      	bne.n	8001622 <_malloc_r+0xf2>
 8001576:	f8d8 4000 	ldr.w	r4, [r8]
 800157a:	4626      	mov	r6, r4
 800157c:	2e00      	cmp	r6, #0
 800157e:	d145      	bne.n	800160c <_malloc_r+0xdc>
 8001580:	2c00      	cmp	r4, #0
 8001582:	d048      	beq.n	8001616 <_malloc_r+0xe6>
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	4631      	mov	r1, r6
 8001588:	4638      	mov	r0, r7
 800158a:	eb04 0903 	add.w	r9, r4, r3
 800158e:	f000 fc5b 	bl	8001e48 <_sbrk_r>
 8001592:	4581      	cmp	r9, r0
 8001594:	d13f      	bne.n	8001616 <_malloc_r+0xe6>
 8001596:	6821      	ldr	r1, [r4, #0]
 8001598:	1a6d      	subs	r5, r5, r1
 800159a:	4629      	mov	r1, r5
 800159c:	4638      	mov	r0, r7
 800159e:	f7ff ffa7 	bl	80014f0 <sbrk_aligned>
 80015a2:	3001      	adds	r0, #1
 80015a4:	d037      	beq.n	8001616 <_malloc_r+0xe6>
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	442b      	add	r3, r5
 80015aa:	6023      	str	r3, [r4, #0]
 80015ac:	f8d8 3000 	ldr.w	r3, [r8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d038      	beq.n	8001626 <_malloc_r+0xf6>
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	42a2      	cmp	r2, r4
 80015b8:	d12b      	bne.n	8001612 <_malloc_r+0xe2>
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	e00f      	b.n	80015e0 <_malloc_r+0xb0>
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	1b52      	subs	r2, r2, r5
 80015c4:	d41f      	bmi.n	8001606 <_malloc_r+0xd6>
 80015c6:	2a0b      	cmp	r2, #11
 80015c8:	d917      	bls.n	80015fa <_malloc_r+0xca>
 80015ca:	1961      	adds	r1, r4, r5
 80015cc:	42a3      	cmp	r3, r4
 80015ce:	6025      	str	r5, [r4, #0]
 80015d0:	bf18      	it	ne
 80015d2:	6059      	strne	r1, [r3, #4]
 80015d4:	6863      	ldr	r3, [r4, #4]
 80015d6:	bf08      	it	eq
 80015d8:	f8c8 1000 	streq.w	r1, [r8]
 80015dc:	5162      	str	r2, [r4, r5]
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	4638      	mov	r0, r7
 80015e2:	f104 060b 	add.w	r6, r4, #11
 80015e6:	f000 f829 	bl	800163c <__malloc_unlock>
 80015ea:	f026 0607 	bic.w	r6, r6, #7
 80015ee:	1d23      	adds	r3, r4, #4
 80015f0:	1af2      	subs	r2, r6, r3
 80015f2:	d0ae      	beq.n	8001552 <_malloc_r+0x22>
 80015f4:	1b9b      	subs	r3, r3, r6
 80015f6:	50a3      	str	r3, [r4, r2]
 80015f8:	e7ab      	b.n	8001552 <_malloc_r+0x22>
 80015fa:	42a3      	cmp	r3, r4
 80015fc:	6862      	ldr	r2, [r4, #4]
 80015fe:	d1dd      	bne.n	80015bc <_malloc_r+0x8c>
 8001600:	f8c8 2000 	str.w	r2, [r8]
 8001604:	e7ec      	b.n	80015e0 <_malloc_r+0xb0>
 8001606:	4623      	mov	r3, r4
 8001608:	6864      	ldr	r4, [r4, #4]
 800160a:	e7ac      	b.n	8001566 <_malloc_r+0x36>
 800160c:	4634      	mov	r4, r6
 800160e:	6876      	ldr	r6, [r6, #4]
 8001610:	e7b4      	b.n	800157c <_malloc_r+0x4c>
 8001612:	4613      	mov	r3, r2
 8001614:	e7cc      	b.n	80015b0 <_malloc_r+0x80>
 8001616:	230c      	movs	r3, #12
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4638      	mov	r0, r7
 800161c:	f000 f80e 	bl	800163c <__malloc_unlock>
 8001620:	e797      	b.n	8001552 <_malloc_r+0x22>
 8001622:	6025      	str	r5, [r4, #0]
 8001624:	e7dc      	b.n	80015e0 <_malloc_r+0xb0>
 8001626:	605b      	str	r3, [r3, #4]
 8001628:	deff      	udf	#255	; 0xff
 800162a:	bf00      	nop
 800162c:	20000220 	.word	0x20000220

08001630 <__malloc_lock>:
 8001630:	4801      	ldr	r0, [pc, #4]	; (8001638 <__malloc_lock+0x8>)
 8001632:	f7ff bf10 	b.w	8001456 <__retarget_lock_acquire_recursive>
 8001636:	bf00      	nop
 8001638:	2000021c 	.word	0x2000021c

0800163c <__malloc_unlock>:
 800163c:	4801      	ldr	r0, [pc, #4]	; (8001644 <__malloc_unlock+0x8>)
 800163e:	f7ff bf0b 	b.w	8001458 <__retarget_lock_release_recursive>
 8001642:	bf00      	nop
 8001644:	2000021c 	.word	0x2000021c

08001648 <__sfputc_r>:
 8001648:	6893      	ldr	r3, [r2, #8]
 800164a:	3b01      	subs	r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	b410      	push	{r4}
 8001650:	6093      	str	r3, [r2, #8]
 8001652:	da07      	bge.n	8001664 <__sfputc_r+0x1c>
 8001654:	6994      	ldr	r4, [r2, #24]
 8001656:	42a3      	cmp	r3, r4
 8001658:	db01      	blt.n	800165e <__sfputc_r+0x16>
 800165a:	290a      	cmp	r1, #10
 800165c:	d102      	bne.n	8001664 <__sfputc_r+0x1c>
 800165e:	bc10      	pop	{r4}
 8001660:	f7ff bdeb 	b.w	800123a <__swbuf_r>
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	1c58      	adds	r0, r3, #1
 8001668:	6010      	str	r0, [r2, #0]
 800166a:	7019      	strb	r1, [r3, #0]
 800166c:	4608      	mov	r0, r1
 800166e:	bc10      	pop	{r4}
 8001670:	4770      	bx	lr

08001672 <__sfputs_r>:
 8001672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001674:	4606      	mov	r6, r0
 8001676:	460f      	mov	r7, r1
 8001678:	4614      	mov	r4, r2
 800167a:	18d5      	adds	r5, r2, r3
 800167c:	42ac      	cmp	r4, r5
 800167e:	d101      	bne.n	8001684 <__sfputs_r+0x12>
 8001680:	2000      	movs	r0, #0
 8001682:	e007      	b.n	8001694 <__sfputs_r+0x22>
 8001684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001688:	463a      	mov	r2, r7
 800168a:	4630      	mov	r0, r6
 800168c:	f7ff ffdc 	bl	8001648 <__sfputc_r>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d1f3      	bne.n	800167c <__sfputs_r+0xa>
 8001694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001698 <_vfiprintf_r>:
 8001698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800169c:	460d      	mov	r5, r1
 800169e:	b09d      	sub	sp, #116	; 0x74
 80016a0:	4614      	mov	r4, r2
 80016a2:	4698      	mov	r8, r3
 80016a4:	4606      	mov	r6, r0
 80016a6:	b118      	cbz	r0, 80016b0 <_vfiprintf_r+0x18>
 80016a8:	6a03      	ldr	r3, [r0, #32]
 80016aa:	b90b      	cbnz	r3, 80016b0 <_vfiprintf_r+0x18>
 80016ac:	f7ff fd3a 	bl	8001124 <__sinit>
 80016b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016b2:	07d9      	lsls	r1, r3, #31
 80016b4:	d405      	bmi.n	80016c2 <_vfiprintf_r+0x2a>
 80016b6:	89ab      	ldrh	r3, [r5, #12]
 80016b8:	059a      	lsls	r2, r3, #22
 80016ba:	d402      	bmi.n	80016c2 <_vfiprintf_r+0x2a>
 80016bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016be:	f7ff feca 	bl	8001456 <__retarget_lock_acquire_recursive>
 80016c2:	89ab      	ldrh	r3, [r5, #12]
 80016c4:	071b      	lsls	r3, r3, #28
 80016c6:	d501      	bpl.n	80016cc <_vfiprintf_r+0x34>
 80016c8:	692b      	ldr	r3, [r5, #16]
 80016ca:	b99b      	cbnz	r3, 80016f4 <_vfiprintf_r+0x5c>
 80016cc:	4629      	mov	r1, r5
 80016ce:	4630      	mov	r0, r6
 80016d0:	f7ff fdf0 	bl	80012b4 <__swsetup_r>
 80016d4:	b170      	cbz	r0, 80016f4 <_vfiprintf_r+0x5c>
 80016d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016d8:	07dc      	lsls	r4, r3, #31
 80016da:	d504      	bpl.n	80016e6 <_vfiprintf_r+0x4e>
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	b01d      	add	sp, #116	; 0x74
 80016e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016e6:	89ab      	ldrh	r3, [r5, #12]
 80016e8:	0598      	lsls	r0, r3, #22
 80016ea:	d4f7      	bmi.n	80016dc <_vfiprintf_r+0x44>
 80016ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016ee:	f7ff feb3 	bl	8001458 <__retarget_lock_release_recursive>
 80016f2:	e7f3      	b.n	80016dc <_vfiprintf_r+0x44>
 80016f4:	2300      	movs	r3, #0
 80016f6:	9309      	str	r3, [sp, #36]	; 0x24
 80016f8:	2320      	movs	r3, #32
 80016fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80016fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8001702:	2330      	movs	r3, #48	; 0x30
 8001704:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80018b8 <_vfiprintf_r+0x220>
 8001708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800170c:	f04f 0901 	mov.w	r9, #1
 8001710:	4623      	mov	r3, r4
 8001712:	469a      	mov	sl, r3
 8001714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001718:	b10a      	cbz	r2, 800171e <_vfiprintf_r+0x86>
 800171a:	2a25      	cmp	r2, #37	; 0x25
 800171c:	d1f9      	bne.n	8001712 <_vfiprintf_r+0x7a>
 800171e:	ebba 0b04 	subs.w	fp, sl, r4
 8001722:	d00b      	beq.n	800173c <_vfiprintf_r+0xa4>
 8001724:	465b      	mov	r3, fp
 8001726:	4622      	mov	r2, r4
 8001728:	4629      	mov	r1, r5
 800172a:	4630      	mov	r0, r6
 800172c:	f7ff ffa1 	bl	8001672 <__sfputs_r>
 8001730:	3001      	adds	r0, #1
 8001732:	f000 80a9 	beq.w	8001888 <_vfiprintf_r+0x1f0>
 8001736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001738:	445a      	add	r2, fp
 800173a:	9209      	str	r2, [sp, #36]	; 0x24
 800173c:	f89a 3000 	ldrb.w	r3, [sl]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a1 	beq.w	8001888 <_vfiprintf_r+0x1f0>
 8001746:	2300      	movs	r3, #0
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001750:	f10a 0a01 	add.w	sl, sl, #1
 8001754:	9304      	str	r3, [sp, #16]
 8001756:	9307      	str	r3, [sp, #28]
 8001758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800175c:	931a      	str	r3, [sp, #104]	; 0x68
 800175e:	4654      	mov	r4, sl
 8001760:	2205      	movs	r2, #5
 8001762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001766:	4854      	ldr	r0, [pc, #336]	; (80018b8 <_vfiprintf_r+0x220>)
 8001768:	f7fe fd42 	bl	80001f0 <memchr>
 800176c:	9a04      	ldr	r2, [sp, #16]
 800176e:	b9d8      	cbnz	r0, 80017a8 <_vfiprintf_r+0x110>
 8001770:	06d1      	lsls	r1, r2, #27
 8001772:	bf44      	itt	mi
 8001774:	2320      	movmi	r3, #32
 8001776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800177a:	0713      	lsls	r3, r2, #28
 800177c:	bf44      	itt	mi
 800177e:	232b      	movmi	r3, #43	; 0x2b
 8001780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001784:	f89a 3000 	ldrb.w	r3, [sl]
 8001788:	2b2a      	cmp	r3, #42	; 0x2a
 800178a:	d015      	beq.n	80017b8 <_vfiprintf_r+0x120>
 800178c:	9a07      	ldr	r2, [sp, #28]
 800178e:	4654      	mov	r4, sl
 8001790:	2000      	movs	r0, #0
 8001792:	f04f 0c0a 	mov.w	ip, #10
 8001796:	4621      	mov	r1, r4
 8001798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800179c:	3b30      	subs	r3, #48	; 0x30
 800179e:	2b09      	cmp	r3, #9
 80017a0:	d94d      	bls.n	800183e <_vfiprintf_r+0x1a6>
 80017a2:	b1b0      	cbz	r0, 80017d2 <_vfiprintf_r+0x13a>
 80017a4:	9207      	str	r2, [sp, #28]
 80017a6:	e014      	b.n	80017d2 <_vfiprintf_r+0x13a>
 80017a8:	eba0 0308 	sub.w	r3, r0, r8
 80017ac:	fa09 f303 	lsl.w	r3, r9, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	9304      	str	r3, [sp, #16]
 80017b4:	46a2      	mov	sl, r4
 80017b6:	e7d2      	b.n	800175e <_vfiprintf_r+0xc6>
 80017b8:	9b03      	ldr	r3, [sp, #12]
 80017ba:	1d19      	adds	r1, r3, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	9103      	str	r1, [sp, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bfbb      	ittet	lt
 80017c4:	425b      	neglt	r3, r3
 80017c6:	f042 0202 	orrlt.w	r2, r2, #2
 80017ca:	9307      	strge	r3, [sp, #28]
 80017cc:	9307      	strlt	r3, [sp, #28]
 80017ce:	bfb8      	it	lt
 80017d0:	9204      	strlt	r2, [sp, #16]
 80017d2:	7823      	ldrb	r3, [r4, #0]
 80017d4:	2b2e      	cmp	r3, #46	; 0x2e
 80017d6:	d10c      	bne.n	80017f2 <_vfiprintf_r+0x15a>
 80017d8:	7863      	ldrb	r3, [r4, #1]
 80017da:	2b2a      	cmp	r3, #42	; 0x2a
 80017dc:	d134      	bne.n	8001848 <_vfiprintf_r+0x1b0>
 80017de:	9b03      	ldr	r3, [sp, #12]
 80017e0:	1d1a      	adds	r2, r3, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	9203      	str	r2, [sp, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bfb8      	it	lt
 80017ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80017ee:	3402      	adds	r4, #2
 80017f0:	9305      	str	r3, [sp, #20]
 80017f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80018bc <_vfiprintf_r+0x224>
 80017f6:	7821      	ldrb	r1, [r4, #0]
 80017f8:	2203      	movs	r2, #3
 80017fa:	4650      	mov	r0, sl
 80017fc:	f7fe fcf8 	bl	80001f0 <memchr>
 8001800:	b138      	cbz	r0, 8001812 <_vfiprintf_r+0x17a>
 8001802:	9b04      	ldr	r3, [sp, #16]
 8001804:	eba0 000a 	sub.w	r0, r0, sl
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	4082      	lsls	r2, r0
 800180c:	4313      	orrs	r3, r2
 800180e:	3401      	adds	r4, #1
 8001810:	9304      	str	r3, [sp, #16]
 8001812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001816:	482a      	ldr	r0, [pc, #168]	; (80018c0 <_vfiprintf_r+0x228>)
 8001818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800181c:	2206      	movs	r2, #6
 800181e:	f7fe fce7 	bl	80001f0 <memchr>
 8001822:	2800      	cmp	r0, #0
 8001824:	d03f      	beq.n	80018a6 <_vfiprintf_r+0x20e>
 8001826:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <_vfiprintf_r+0x22c>)
 8001828:	bb1b      	cbnz	r3, 8001872 <_vfiprintf_r+0x1da>
 800182a:	9b03      	ldr	r3, [sp, #12]
 800182c:	3307      	adds	r3, #7
 800182e:	f023 0307 	bic.w	r3, r3, #7
 8001832:	3308      	adds	r3, #8
 8001834:	9303      	str	r3, [sp, #12]
 8001836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001838:	443b      	add	r3, r7
 800183a:	9309      	str	r3, [sp, #36]	; 0x24
 800183c:	e768      	b.n	8001710 <_vfiprintf_r+0x78>
 800183e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001842:	460c      	mov	r4, r1
 8001844:	2001      	movs	r0, #1
 8001846:	e7a6      	b.n	8001796 <_vfiprintf_r+0xfe>
 8001848:	2300      	movs	r3, #0
 800184a:	3401      	adds	r4, #1
 800184c:	9305      	str	r3, [sp, #20]
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 0c0a 	mov.w	ip, #10
 8001854:	4620      	mov	r0, r4
 8001856:	f810 2b01 	ldrb.w	r2, [r0], #1
 800185a:	3a30      	subs	r2, #48	; 0x30
 800185c:	2a09      	cmp	r2, #9
 800185e:	d903      	bls.n	8001868 <_vfiprintf_r+0x1d0>
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0c6      	beq.n	80017f2 <_vfiprintf_r+0x15a>
 8001864:	9105      	str	r1, [sp, #20]
 8001866:	e7c4      	b.n	80017f2 <_vfiprintf_r+0x15a>
 8001868:	fb0c 2101 	mla	r1, ip, r1, r2
 800186c:	4604      	mov	r4, r0
 800186e:	2301      	movs	r3, #1
 8001870:	e7f0      	b.n	8001854 <_vfiprintf_r+0x1bc>
 8001872:	ab03      	add	r3, sp, #12
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	462a      	mov	r2, r5
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_vfiprintf_r+0x230>)
 800187a:	a904      	add	r1, sp, #16
 800187c:	4630      	mov	r0, r6
 800187e:	f3af 8000 	nop.w
 8001882:	4607      	mov	r7, r0
 8001884:	1c78      	adds	r0, r7, #1
 8001886:	d1d6      	bne.n	8001836 <_vfiprintf_r+0x19e>
 8001888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800188a:	07d9      	lsls	r1, r3, #31
 800188c:	d405      	bmi.n	800189a <_vfiprintf_r+0x202>
 800188e:	89ab      	ldrh	r3, [r5, #12]
 8001890:	059a      	lsls	r2, r3, #22
 8001892:	d402      	bmi.n	800189a <_vfiprintf_r+0x202>
 8001894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001896:	f7ff fddf 	bl	8001458 <__retarget_lock_release_recursive>
 800189a:	89ab      	ldrh	r3, [r5, #12]
 800189c:	065b      	lsls	r3, r3, #25
 800189e:	f53f af1d 	bmi.w	80016dc <_vfiprintf_r+0x44>
 80018a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018a4:	e71c      	b.n	80016e0 <_vfiprintf_r+0x48>
 80018a6:	ab03      	add	r3, sp, #12
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	462a      	mov	r2, r5
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <_vfiprintf_r+0x230>)
 80018ae:	a904      	add	r1, sp, #16
 80018b0:	4630      	mov	r0, r6
 80018b2:	f000 f879 	bl	80019a8 <_printf_i>
 80018b6:	e7e4      	b.n	8001882 <_vfiprintf_r+0x1ea>
 80018b8:	08001ec4 	.word	0x08001ec4
 80018bc:	08001eca 	.word	0x08001eca
 80018c0:	08001ece 	.word	0x08001ece
 80018c4:	00000000 	.word	0x00000000
 80018c8:	08001673 	.word	0x08001673

080018cc <_printf_common>:
 80018cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d0:	4616      	mov	r6, r2
 80018d2:	4699      	mov	r9, r3
 80018d4:	688a      	ldr	r2, [r1, #8]
 80018d6:	690b      	ldr	r3, [r1, #16]
 80018d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018dc:	4293      	cmp	r3, r2
 80018de:	bfb8      	it	lt
 80018e0:	4613      	movlt	r3, r2
 80018e2:	6033      	str	r3, [r6, #0]
 80018e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018e8:	4607      	mov	r7, r0
 80018ea:	460c      	mov	r4, r1
 80018ec:	b10a      	cbz	r2, 80018f2 <_printf_common+0x26>
 80018ee:	3301      	adds	r3, #1
 80018f0:	6033      	str	r3, [r6, #0]
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	0699      	lsls	r1, r3, #26
 80018f6:	bf42      	ittt	mi
 80018f8:	6833      	ldrmi	r3, [r6, #0]
 80018fa:	3302      	addmi	r3, #2
 80018fc:	6033      	strmi	r3, [r6, #0]
 80018fe:	6825      	ldr	r5, [r4, #0]
 8001900:	f015 0506 	ands.w	r5, r5, #6
 8001904:	d106      	bne.n	8001914 <_printf_common+0x48>
 8001906:	f104 0a19 	add.w	sl, r4, #25
 800190a:	68e3      	ldr	r3, [r4, #12]
 800190c:	6832      	ldr	r2, [r6, #0]
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	42ab      	cmp	r3, r5
 8001912:	dc26      	bgt.n	8001962 <_printf_common+0x96>
 8001914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001918:	1e13      	subs	r3, r2, #0
 800191a:	6822      	ldr	r2, [r4, #0]
 800191c:	bf18      	it	ne
 800191e:	2301      	movne	r3, #1
 8001920:	0692      	lsls	r2, r2, #26
 8001922:	d42b      	bmi.n	800197c <_printf_common+0xb0>
 8001924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001928:	4649      	mov	r1, r9
 800192a:	4638      	mov	r0, r7
 800192c:	47c0      	blx	r8
 800192e:	3001      	adds	r0, #1
 8001930:	d01e      	beq.n	8001970 <_printf_common+0xa4>
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	6922      	ldr	r2, [r4, #16]
 8001936:	f003 0306 	and.w	r3, r3, #6
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf02      	ittt	eq
 800193e:	68e5      	ldreq	r5, [r4, #12]
 8001940:	6833      	ldreq	r3, [r6, #0]
 8001942:	1aed      	subeq	r5, r5, r3
 8001944:	68a3      	ldr	r3, [r4, #8]
 8001946:	bf0c      	ite	eq
 8001948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800194c:	2500      	movne	r5, #0
 800194e:	4293      	cmp	r3, r2
 8001950:	bfc4      	itt	gt
 8001952:	1a9b      	subgt	r3, r3, r2
 8001954:	18ed      	addgt	r5, r5, r3
 8001956:	2600      	movs	r6, #0
 8001958:	341a      	adds	r4, #26
 800195a:	42b5      	cmp	r5, r6
 800195c:	d11a      	bne.n	8001994 <_printf_common+0xc8>
 800195e:	2000      	movs	r0, #0
 8001960:	e008      	b.n	8001974 <_printf_common+0xa8>
 8001962:	2301      	movs	r3, #1
 8001964:	4652      	mov	r2, sl
 8001966:	4649      	mov	r1, r9
 8001968:	4638      	mov	r0, r7
 800196a:	47c0      	blx	r8
 800196c:	3001      	adds	r0, #1
 800196e:	d103      	bne.n	8001978 <_printf_common+0xac>
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001978:	3501      	adds	r5, #1
 800197a:	e7c6      	b.n	800190a <_printf_common+0x3e>
 800197c:	18e1      	adds	r1, r4, r3
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	2030      	movs	r0, #48	; 0x30
 8001982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001986:	4422      	add	r2, r4
 8001988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800198c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001990:	3302      	adds	r3, #2
 8001992:	e7c7      	b.n	8001924 <_printf_common+0x58>
 8001994:	2301      	movs	r3, #1
 8001996:	4622      	mov	r2, r4
 8001998:	4649      	mov	r1, r9
 800199a:	4638      	mov	r0, r7
 800199c:	47c0      	blx	r8
 800199e:	3001      	adds	r0, #1
 80019a0:	d0e6      	beq.n	8001970 <_printf_common+0xa4>
 80019a2:	3601      	adds	r6, #1
 80019a4:	e7d9      	b.n	800195a <_printf_common+0x8e>
	...

080019a8 <_printf_i>:
 80019a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019ac:	7e0f      	ldrb	r7, [r1, #24]
 80019ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80019b0:	2f78      	cmp	r7, #120	; 0x78
 80019b2:	4691      	mov	r9, r2
 80019b4:	4680      	mov	r8, r0
 80019b6:	460c      	mov	r4, r1
 80019b8:	469a      	mov	sl, r3
 80019ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80019be:	d807      	bhi.n	80019d0 <_printf_i+0x28>
 80019c0:	2f62      	cmp	r7, #98	; 0x62
 80019c2:	d80a      	bhi.n	80019da <_printf_i+0x32>
 80019c4:	2f00      	cmp	r7, #0
 80019c6:	f000 80d4 	beq.w	8001b72 <_printf_i+0x1ca>
 80019ca:	2f58      	cmp	r7, #88	; 0x58
 80019cc:	f000 80c0 	beq.w	8001b50 <_printf_i+0x1a8>
 80019d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019d8:	e03a      	b.n	8001a50 <_printf_i+0xa8>
 80019da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019de:	2b15      	cmp	r3, #21
 80019e0:	d8f6      	bhi.n	80019d0 <_printf_i+0x28>
 80019e2:	a101      	add	r1, pc, #4	; (adr r1, 80019e8 <_printf_i+0x40>)
 80019e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80019e8:	08001a41 	.word	0x08001a41
 80019ec:	08001a55 	.word	0x08001a55
 80019f0:	080019d1 	.word	0x080019d1
 80019f4:	080019d1 	.word	0x080019d1
 80019f8:	080019d1 	.word	0x080019d1
 80019fc:	080019d1 	.word	0x080019d1
 8001a00:	08001a55 	.word	0x08001a55
 8001a04:	080019d1 	.word	0x080019d1
 8001a08:	080019d1 	.word	0x080019d1
 8001a0c:	080019d1 	.word	0x080019d1
 8001a10:	080019d1 	.word	0x080019d1
 8001a14:	08001b59 	.word	0x08001b59
 8001a18:	08001a81 	.word	0x08001a81
 8001a1c:	08001b13 	.word	0x08001b13
 8001a20:	080019d1 	.word	0x080019d1
 8001a24:	080019d1 	.word	0x080019d1
 8001a28:	08001b7b 	.word	0x08001b7b
 8001a2c:	080019d1 	.word	0x080019d1
 8001a30:	08001a81 	.word	0x08001a81
 8001a34:	080019d1 	.word	0x080019d1
 8001a38:	080019d1 	.word	0x080019d1
 8001a3c:	08001b1b 	.word	0x08001b1b
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	1d1a      	adds	r2, r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	602a      	str	r2, [r5, #0]
 8001a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a50:	2301      	movs	r3, #1
 8001a52:	e09f      	b.n	8001b94 <_printf_i+0x1ec>
 8001a54:	6820      	ldr	r0, [r4, #0]
 8001a56:	682b      	ldr	r3, [r5, #0]
 8001a58:	0607      	lsls	r7, r0, #24
 8001a5a:	f103 0104 	add.w	r1, r3, #4
 8001a5e:	6029      	str	r1, [r5, #0]
 8001a60:	d501      	bpl.n	8001a66 <_printf_i+0xbe>
 8001a62:	681e      	ldr	r6, [r3, #0]
 8001a64:	e003      	b.n	8001a6e <_printf_i+0xc6>
 8001a66:	0646      	lsls	r6, r0, #25
 8001a68:	d5fb      	bpl.n	8001a62 <_printf_i+0xba>
 8001a6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001a6e:	2e00      	cmp	r6, #0
 8001a70:	da03      	bge.n	8001a7a <_printf_i+0xd2>
 8001a72:	232d      	movs	r3, #45	; 0x2d
 8001a74:	4276      	negs	r6, r6
 8001a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a7a:	485a      	ldr	r0, [pc, #360]	; (8001be4 <_printf_i+0x23c>)
 8001a7c:	230a      	movs	r3, #10
 8001a7e:	e012      	b.n	8001aa6 <_printf_i+0xfe>
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	6820      	ldr	r0, [r4, #0]
 8001a84:	1d19      	adds	r1, r3, #4
 8001a86:	6029      	str	r1, [r5, #0]
 8001a88:	0605      	lsls	r5, r0, #24
 8001a8a:	d501      	bpl.n	8001a90 <_printf_i+0xe8>
 8001a8c:	681e      	ldr	r6, [r3, #0]
 8001a8e:	e002      	b.n	8001a96 <_printf_i+0xee>
 8001a90:	0641      	lsls	r1, r0, #25
 8001a92:	d5fb      	bpl.n	8001a8c <_printf_i+0xe4>
 8001a94:	881e      	ldrh	r6, [r3, #0]
 8001a96:	4853      	ldr	r0, [pc, #332]	; (8001be4 <_printf_i+0x23c>)
 8001a98:	2f6f      	cmp	r7, #111	; 0x6f
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2308      	moveq	r3, #8
 8001a9e:	230a      	movne	r3, #10
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001aa6:	6865      	ldr	r5, [r4, #4]
 8001aa8:	60a5      	str	r5, [r4, #8]
 8001aaa:	2d00      	cmp	r5, #0
 8001aac:	bfa2      	ittt	ge
 8001aae:	6821      	ldrge	r1, [r4, #0]
 8001ab0:	f021 0104 	bicge.w	r1, r1, #4
 8001ab4:	6021      	strge	r1, [r4, #0]
 8001ab6:	b90e      	cbnz	r6, 8001abc <_printf_i+0x114>
 8001ab8:	2d00      	cmp	r5, #0
 8001aba:	d04b      	beq.n	8001b54 <_printf_i+0x1ac>
 8001abc:	4615      	mov	r5, r2
 8001abe:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ac2:	fb03 6711 	mls	r7, r3, r1, r6
 8001ac6:	5dc7      	ldrb	r7, [r0, r7]
 8001ac8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001acc:	4637      	mov	r7, r6
 8001ace:	42bb      	cmp	r3, r7
 8001ad0:	460e      	mov	r6, r1
 8001ad2:	d9f4      	bls.n	8001abe <_printf_i+0x116>
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d10b      	bne.n	8001af0 <_printf_i+0x148>
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	07de      	lsls	r6, r3, #31
 8001adc:	d508      	bpl.n	8001af0 <_printf_i+0x148>
 8001ade:	6923      	ldr	r3, [r4, #16]
 8001ae0:	6861      	ldr	r1, [r4, #4]
 8001ae2:	4299      	cmp	r1, r3
 8001ae4:	bfde      	ittt	le
 8001ae6:	2330      	movle	r3, #48	; 0x30
 8001ae8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001aec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001af0:	1b52      	subs	r2, r2, r5
 8001af2:	6122      	str	r2, [r4, #16]
 8001af4:	f8cd a000 	str.w	sl, [sp]
 8001af8:	464b      	mov	r3, r9
 8001afa:	aa03      	add	r2, sp, #12
 8001afc:	4621      	mov	r1, r4
 8001afe:	4640      	mov	r0, r8
 8001b00:	f7ff fee4 	bl	80018cc <_printf_common>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d14a      	bne.n	8001b9e <_printf_i+0x1f6>
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	b004      	add	sp, #16
 8001b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	f043 0320 	orr.w	r3, r3, #32
 8001b18:	6023      	str	r3, [r4, #0]
 8001b1a:	4833      	ldr	r0, [pc, #204]	; (8001be8 <_printf_i+0x240>)
 8001b1c:	2778      	movs	r7, #120	; 0x78
 8001b1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	6829      	ldr	r1, [r5, #0]
 8001b26:	061f      	lsls	r7, r3, #24
 8001b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b2c:	d402      	bmi.n	8001b34 <_printf_i+0x18c>
 8001b2e:	065f      	lsls	r7, r3, #25
 8001b30:	bf48      	it	mi
 8001b32:	b2b6      	uxthmi	r6, r6
 8001b34:	07df      	lsls	r7, r3, #31
 8001b36:	bf48      	it	mi
 8001b38:	f043 0320 	orrmi.w	r3, r3, #32
 8001b3c:	6029      	str	r1, [r5, #0]
 8001b3e:	bf48      	it	mi
 8001b40:	6023      	strmi	r3, [r4, #0]
 8001b42:	b91e      	cbnz	r6, 8001b4c <_printf_i+0x1a4>
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	f023 0320 	bic.w	r3, r3, #32
 8001b4a:	6023      	str	r3, [r4, #0]
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	e7a7      	b.n	8001aa0 <_printf_i+0xf8>
 8001b50:	4824      	ldr	r0, [pc, #144]	; (8001be4 <_printf_i+0x23c>)
 8001b52:	e7e4      	b.n	8001b1e <_printf_i+0x176>
 8001b54:	4615      	mov	r5, r2
 8001b56:	e7bd      	b.n	8001ad4 <_printf_i+0x12c>
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	6826      	ldr	r6, [r4, #0]
 8001b5c:	6961      	ldr	r1, [r4, #20]
 8001b5e:	1d18      	adds	r0, r3, #4
 8001b60:	6028      	str	r0, [r5, #0]
 8001b62:	0635      	lsls	r5, r6, #24
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	d501      	bpl.n	8001b6c <_printf_i+0x1c4>
 8001b68:	6019      	str	r1, [r3, #0]
 8001b6a:	e002      	b.n	8001b72 <_printf_i+0x1ca>
 8001b6c:	0670      	lsls	r0, r6, #25
 8001b6e:	d5fb      	bpl.n	8001b68 <_printf_i+0x1c0>
 8001b70:	8019      	strh	r1, [r3, #0]
 8001b72:	2300      	movs	r3, #0
 8001b74:	6123      	str	r3, [r4, #16]
 8001b76:	4615      	mov	r5, r2
 8001b78:	e7bc      	b.n	8001af4 <_printf_i+0x14c>
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	1d1a      	adds	r2, r3, #4
 8001b7e:	602a      	str	r2, [r5, #0]
 8001b80:	681d      	ldr	r5, [r3, #0]
 8001b82:	6862      	ldr	r2, [r4, #4]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4628      	mov	r0, r5
 8001b88:	f7fe fb32 	bl	80001f0 <memchr>
 8001b8c:	b108      	cbz	r0, 8001b92 <_printf_i+0x1ea>
 8001b8e:	1b40      	subs	r0, r0, r5
 8001b90:	6060      	str	r0, [r4, #4]
 8001b92:	6863      	ldr	r3, [r4, #4]
 8001b94:	6123      	str	r3, [r4, #16]
 8001b96:	2300      	movs	r3, #0
 8001b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b9c:	e7aa      	b.n	8001af4 <_printf_i+0x14c>
 8001b9e:	6923      	ldr	r3, [r4, #16]
 8001ba0:	462a      	mov	r2, r5
 8001ba2:	4649      	mov	r1, r9
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	47d0      	blx	sl
 8001ba8:	3001      	adds	r0, #1
 8001baa:	d0ad      	beq.n	8001b08 <_printf_i+0x160>
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	079b      	lsls	r3, r3, #30
 8001bb0:	d413      	bmi.n	8001bda <_printf_i+0x232>
 8001bb2:	68e0      	ldr	r0, [r4, #12]
 8001bb4:	9b03      	ldr	r3, [sp, #12]
 8001bb6:	4298      	cmp	r0, r3
 8001bb8:	bfb8      	it	lt
 8001bba:	4618      	movlt	r0, r3
 8001bbc:	e7a6      	b.n	8001b0c <_printf_i+0x164>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	4632      	mov	r2, r6
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	4640      	mov	r0, r8
 8001bc6:	47d0      	blx	sl
 8001bc8:	3001      	adds	r0, #1
 8001bca:	d09d      	beq.n	8001b08 <_printf_i+0x160>
 8001bcc:	3501      	adds	r5, #1
 8001bce:	68e3      	ldr	r3, [r4, #12]
 8001bd0:	9903      	ldr	r1, [sp, #12]
 8001bd2:	1a5b      	subs	r3, r3, r1
 8001bd4:	42ab      	cmp	r3, r5
 8001bd6:	dcf2      	bgt.n	8001bbe <_printf_i+0x216>
 8001bd8:	e7eb      	b.n	8001bb2 <_printf_i+0x20a>
 8001bda:	2500      	movs	r5, #0
 8001bdc:	f104 0619 	add.w	r6, r4, #25
 8001be0:	e7f5      	b.n	8001bce <_printf_i+0x226>
 8001be2:	bf00      	nop
 8001be4:	08001ed5 	.word	0x08001ed5
 8001be8:	08001ee6 	.word	0x08001ee6

08001bec <__sflush_r>:
 8001bec:	898a      	ldrh	r2, [r1, #12]
 8001bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf0:	4605      	mov	r5, r0
 8001bf2:	0710      	lsls	r0, r2, #28
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	d457      	bmi.n	8001ca8 <__sflush_r+0xbc>
 8001bf8:	684b      	ldr	r3, [r1, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	dc04      	bgt.n	8001c08 <__sflush_r+0x1c>
 8001bfe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	dc01      	bgt.n	8001c08 <__sflush_r+0x1c>
 8001c04:	2000      	movs	r0, #0
 8001c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c0a:	2e00      	cmp	r6, #0
 8001c0c:	d0fa      	beq.n	8001c04 <__sflush_r+0x18>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c14:	682f      	ldr	r7, [r5, #0]
 8001c16:	6a21      	ldr	r1, [r4, #32]
 8001c18:	602b      	str	r3, [r5, #0]
 8001c1a:	d032      	beq.n	8001c82 <__sflush_r+0x96>
 8001c1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c1e:	89a3      	ldrh	r3, [r4, #12]
 8001c20:	075a      	lsls	r2, r3, #29
 8001c22:	d505      	bpl.n	8001c30 <__sflush_r+0x44>
 8001c24:	6863      	ldr	r3, [r4, #4]
 8001c26:	1ac0      	subs	r0, r0, r3
 8001c28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c2a:	b10b      	cbz	r3, 8001c30 <__sflush_r+0x44>
 8001c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c2e:	1ac0      	subs	r0, r0, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	4602      	mov	r2, r0
 8001c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c36:	6a21      	ldr	r1, [r4, #32]
 8001c38:	4628      	mov	r0, r5
 8001c3a:	47b0      	blx	r6
 8001c3c:	1c43      	adds	r3, r0, #1
 8001c3e:	89a3      	ldrh	r3, [r4, #12]
 8001c40:	d106      	bne.n	8001c50 <__sflush_r+0x64>
 8001c42:	6829      	ldr	r1, [r5, #0]
 8001c44:	291d      	cmp	r1, #29
 8001c46:	d82b      	bhi.n	8001ca0 <__sflush_r+0xb4>
 8001c48:	4a28      	ldr	r2, [pc, #160]	; (8001cec <__sflush_r+0x100>)
 8001c4a:	410a      	asrs	r2, r1
 8001c4c:	07d6      	lsls	r6, r2, #31
 8001c4e:	d427      	bmi.n	8001ca0 <__sflush_r+0xb4>
 8001c50:	2200      	movs	r2, #0
 8001c52:	6062      	str	r2, [r4, #4]
 8001c54:	04d9      	lsls	r1, r3, #19
 8001c56:	6922      	ldr	r2, [r4, #16]
 8001c58:	6022      	str	r2, [r4, #0]
 8001c5a:	d504      	bpl.n	8001c66 <__sflush_r+0x7a>
 8001c5c:	1c42      	adds	r2, r0, #1
 8001c5e:	d101      	bne.n	8001c64 <__sflush_r+0x78>
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	b903      	cbnz	r3, 8001c66 <__sflush_r+0x7a>
 8001c64:	6560      	str	r0, [r4, #84]	; 0x54
 8001c66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c68:	602f      	str	r7, [r5, #0]
 8001c6a:	2900      	cmp	r1, #0
 8001c6c:	d0ca      	beq.n	8001c04 <__sflush_r+0x18>
 8001c6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c72:	4299      	cmp	r1, r3
 8001c74:	d002      	beq.n	8001c7c <__sflush_r+0x90>
 8001c76:	4628      	mov	r0, r5
 8001c78:	f7ff fbf0 	bl	800145c <_free_r>
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	6360      	str	r0, [r4, #52]	; 0x34
 8001c80:	e7c1      	b.n	8001c06 <__sflush_r+0x1a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	4628      	mov	r0, r5
 8001c86:	47b0      	blx	r6
 8001c88:	1c41      	adds	r1, r0, #1
 8001c8a:	d1c8      	bne.n	8001c1e <__sflush_r+0x32>
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0c5      	beq.n	8001c1e <__sflush_r+0x32>
 8001c92:	2b1d      	cmp	r3, #29
 8001c94:	d001      	beq.n	8001c9a <__sflush_r+0xae>
 8001c96:	2b16      	cmp	r3, #22
 8001c98:	d101      	bne.n	8001c9e <__sflush_r+0xb2>
 8001c9a:	602f      	str	r7, [r5, #0]
 8001c9c:	e7b2      	b.n	8001c04 <__sflush_r+0x18>
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca4:	81a3      	strh	r3, [r4, #12]
 8001ca6:	e7ae      	b.n	8001c06 <__sflush_r+0x1a>
 8001ca8:	690f      	ldr	r7, [r1, #16]
 8001caa:	2f00      	cmp	r7, #0
 8001cac:	d0aa      	beq.n	8001c04 <__sflush_r+0x18>
 8001cae:	0793      	lsls	r3, r2, #30
 8001cb0:	680e      	ldr	r6, [r1, #0]
 8001cb2:	bf08      	it	eq
 8001cb4:	694b      	ldreq	r3, [r1, #20]
 8001cb6:	600f      	str	r7, [r1, #0]
 8001cb8:	bf18      	it	ne
 8001cba:	2300      	movne	r3, #0
 8001cbc:	1bf6      	subs	r6, r6, r7
 8001cbe:	608b      	str	r3, [r1, #8]
 8001cc0:	2e00      	cmp	r6, #0
 8001cc2:	dd9f      	ble.n	8001c04 <__sflush_r+0x18>
 8001cc4:	6a21      	ldr	r1, [r4, #32]
 8001cc6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001cca:	4633      	mov	r3, r6
 8001ccc:	463a      	mov	r2, r7
 8001cce:	4628      	mov	r0, r5
 8001cd0:	47e0      	blx	ip
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	dc06      	bgt.n	8001ce4 <__sflush_r+0xf8>
 8001cd6:	89a3      	ldrh	r3, [r4, #12]
 8001cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cdc:	81a3      	strh	r3, [r4, #12]
 8001cde:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce2:	e790      	b.n	8001c06 <__sflush_r+0x1a>
 8001ce4:	4407      	add	r7, r0
 8001ce6:	1a36      	subs	r6, r6, r0
 8001ce8:	e7ea      	b.n	8001cc0 <__sflush_r+0xd4>
 8001cea:	bf00      	nop
 8001cec:	dfbffffe 	.word	0xdfbffffe

08001cf0 <_fflush_r>:
 8001cf0:	b538      	push	{r3, r4, r5, lr}
 8001cf2:	690b      	ldr	r3, [r1, #16]
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	b913      	cbnz	r3, 8001d00 <_fflush_r+0x10>
 8001cfa:	2500      	movs	r5, #0
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	bd38      	pop	{r3, r4, r5, pc}
 8001d00:	b118      	cbz	r0, 8001d0a <_fflush_r+0x1a>
 8001d02:	6a03      	ldr	r3, [r0, #32]
 8001d04:	b90b      	cbnz	r3, 8001d0a <_fflush_r+0x1a>
 8001d06:	f7ff fa0d 	bl	8001124 <__sinit>
 8001d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f3      	beq.n	8001cfa <_fflush_r+0xa>
 8001d12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d14:	07d0      	lsls	r0, r2, #31
 8001d16:	d404      	bmi.n	8001d22 <_fflush_r+0x32>
 8001d18:	0599      	lsls	r1, r3, #22
 8001d1a:	d402      	bmi.n	8001d22 <_fflush_r+0x32>
 8001d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d1e:	f7ff fb9a 	bl	8001456 <__retarget_lock_acquire_recursive>
 8001d22:	4628      	mov	r0, r5
 8001d24:	4621      	mov	r1, r4
 8001d26:	f7ff ff61 	bl	8001bec <__sflush_r>
 8001d2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d2c:	07da      	lsls	r2, r3, #31
 8001d2e:	4605      	mov	r5, r0
 8001d30:	d4e4      	bmi.n	8001cfc <_fflush_r+0xc>
 8001d32:	89a3      	ldrh	r3, [r4, #12]
 8001d34:	059b      	lsls	r3, r3, #22
 8001d36:	d4e1      	bmi.n	8001cfc <_fflush_r+0xc>
 8001d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d3a:	f7ff fb8d 	bl	8001458 <__retarget_lock_release_recursive>
 8001d3e:	e7dd      	b.n	8001cfc <_fflush_r+0xc>

08001d40 <__swhatbuf_r>:
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	460c      	mov	r4, r1
 8001d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d48:	2900      	cmp	r1, #0
 8001d4a:	b096      	sub	sp, #88	; 0x58
 8001d4c:	4615      	mov	r5, r2
 8001d4e:	461e      	mov	r6, r3
 8001d50:	da0d      	bge.n	8001d6e <__swhatbuf_r+0x2e>
 8001d52:	89a3      	ldrh	r3, [r4, #12]
 8001d54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d58:	f04f 0100 	mov.w	r1, #0
 8001d5c:	bf0c      	ite	eq
 8001d5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001d62:	2340      	movne	r3, #64	; 0x40
 8001d64:	2000      	movs	r0, #0
 8001d66:	6031      	str	r1, [r6, #0]
 8001d68:	602b      	str	r3, [r5, #0]
 8001d6a:	b016      	add	sp, #88	; 0x58
 8001d6c:	bd70      	pop	{r4, r5, r6, pc}
 8001d6e:	466a      	mov	r2, sp
 8001d70:	f000 f848 	bl	8001e04 <_fstat_r>
 8001d74:	2800      	cmp	r0, #0
 8001d76:	dbec      	blt.n	8001d52 <__swhatbuf_r+0x12>
 8001d78:	9901      	ldr	r1, [sp, #4]
 8001d7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001d7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001d82:	4259      	negs	r1, r3
 8001d84:	4159      	adcs	r1, r3
 8001d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8a:	e7eb      	b.n	8001d64 <__swhatbuf_r+0x24>

08001d8c <__smakebuf_r>:
 8001d8c:	898b      	ldrh	r3, [r1, #12]
 8001d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d90:	079d      	lsls	r5, r3, #30
 8001d92:	4606      	mov	r6, r0
 8001d94:	460c      	mov	r4, r1
 8001d96:	d507      	bpl.n	8001da8 <__smakebuf_r+0x1c>
 8001d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d9c:	6023      	str	r3, [r4, #0]
 8001d9e:	6123      	str	r3, [r4, #16]
 8001da0:	2301      	movs	r3, #1
 8001da2:	6163      	str	r3, [r4, #20]
 8001da4:	b002      	add	sp, #8
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
 8001da8:	ab01      	add	r3, sp, #4
 8001daa:	466a      	mov	r2, sp
 8001dac:	f7ff ffc8 	bl	8001d40 <__swhatbuf_r>
 8001db0:	9900      	ldr	r1, [sp, #0]
 8001db2:	4605      	mov	r5, r0
 8001db4:	4630      	mov	r0, r6
 8001db6:	f7ff fbbb 	bl	8001530 <_malloc_r>
 8001dba:	b948      	cbnz	r0, 8001dd0 <__smakebuf_r+0x44>
 8001dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dc0:	059a      	lsls	r2, r3, #22
 8001dc2:	d4ef      	bmi.n	8001da4 <__smakebuf_r+0x18>
 8001dc4:	f023 0303 	bic.w	r3, r3, #3
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	81a3      	strh	r3, [r4, #12]
 8001dce:	e7e3      	b.n	8001d98 <__smakebuf_r+0xc>
 8001dd0:	89a3      	ldrh	r3, [r4, #12]
 8001dd2:	6020      	str	r0, [r4, #0]
 8001dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd8:	81a3      	strh	r3, [r4, #12]
 8001dda:	9b00      	ldr	r3, [sp, #0]
 8001ddc:	6163      	str	r3, [r4, #20]
 8001dde:	9b01      	ldr	r3, [sp, #4]
 8001de0:	6120      	str	r0, [r4, #16]
 8001de2:	b15b      	cbz	r3, 8001dfc <__smakebuf_r+0x70>
 8001de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001de8:	4630      	mov	r0, r6
 8001dea:	f000 f81d 	bl	8001e28 <_isatty_r>
 8001dee:	b128      	cbz	r0, 8001dfc <__smakebuf_r+0x70>
 8001df0:	89a3      	ldrh	r3, [r4, #12]
 8001df2:	f023 0303 	bic.w	r3, r3, #3
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	81a3      	strh	r3, [r4, #12]
 8001dfc:	89a3      	ldrh	r3, [r4, #12]
 8001dfe:	431d      	orrs	r5, r3
 8001e00:	81a5      	strh	r5, [r4, #12]
 8001e02:	e7cf      	b.n	8001da4 <__smakebuf_r+0x18>

08001e04 <_fstat_r>:
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	4d07      	ldr	r5, [pc, #28]	; (8001e24 <_fstat_r+0x20>)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	4611      	mov	r1, r2
 8001e10:	602b      	str	r3, [r5, #0]
 8001e12:	f7fe fb89 	bl	8000528 <_fstat>
 8001e16:	1c43      	adds	r3, r0, #1
 8001e18:	d102      	bne.n	8001e20 <_fstat_r+0x1c>
 8001e1a:	682b      	ldr	r3, [r5, #0]
 8001e1c:	b103      	cbz	r3, 8001e20 <_fstat_r+0x1c>
 8001e1e:	6023      	str	r3, [r4, #0]
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
 8001e22:	bf00      	nop
 8001e24:	20000218 	.word	0x20000218

08001e28 <_isatty_r>:
 8001e28:	b538      	push	{r3, r4, r5, lr}
 8001e2a:	4d06      	ldr	r5, [pc, #24]	; (8001e44 <_isatty_r+0x1c>)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	4604      	mov	r4, r0
 8001e30:	4608      	mov	r0, r1
 8001e32:	602b      	str	r3, [r5, #0]
 8001e34:	f7fe fb87 	bl	8000546 <_isatty>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d102      	bne.n	8001e42 <_isatty_r+0x1a>
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	b103      	cbz	r3, 8001e42 <_isatty_r+0x1a>
 8001e40:	6023      	str	r3, [r4, #0]
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
 8001e44:	20000218 	.word	0x20000218

08001e48 <_sbrk_r>:
 8001e48:	b538      	push	{r3, r4, r5, lr}
 8001e4a:	4d06      	ldr	r5, [pc, #24]	; (8001e64 <_sbrk_r+0x1c>)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	4604      	mov	r4, r0
 8001e50:	4608      	mov	r0, r1
 8001e52:	602b      	str	r3, [r5, #0]
 8001e54:	f7fe fb8e 	bl	8000574 <_sbrk>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d102      	bne.n	8001e62 <_sbrk_r+0x1a>
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	b103      	cbz	r3, 8001e62 <_sbrk_r+0x1a>
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	20000218 	.word	0x20000218

08001e68 <_init>:
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6a:	bf00      	nop
 8001e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e6e:	bc08      	pop	{r3}
 8001e70:	469e      	mov	lr, r3
 8001e72:	4770      	bx	lr

08001e74 <_fini>:
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	bf00      	nop
 8001e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7a:	bc08      	pop	{r3}
 8001e7c:	469e      	mov	lr, r3
 8001e7e:	4770      	bx	lr
